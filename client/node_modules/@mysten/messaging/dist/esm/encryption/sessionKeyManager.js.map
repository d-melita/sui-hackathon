{
  "version": 3,
  "sources": ["../../../src/encryption/sessionKeyManager.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { SessionKey } from '@mysten/seal';\nimport type { MessagingCompatibleClient } from '../types.js';\nimport type { SealApproveContract, SessionKeyConfig } from './types.js';\n\n/**\n * Internal utility for managing SessionKey lifecycle.\n * Handles both external SessionKey instances and internal SessionKeyConfig management.\n *\n * @internal - Not exposed in public API\n */\nexport class SessionKeyManager {\n\tprivate managedSessionKey?: SessionKey;\n\n\tconstructor(\n\t\tprivate sessionKey: SessionKey | undefined,\n\t\tprivate readonly sessionKeyConfig: SessionKeyConfig | undefined,\n\t\tprivate readonly suiClient: MessagingCompatibleClient,\n\t\tprivate readonly sealApproveContract: SealApproveContract,\n\t) {\n\t\tif (!sessionKey && !sessionKeyConfig) {\n\t\t\tthrow new Error('Either sessionKey or sessionKeyConfig must be provided');\n\t\t}\n\t\tif (sessionKey && sessionKeyConfig) {\n\t\t\tthrow new Error('Cannot provide both sessionKey and sessionKeyConfig. Choose one.');\n\t\t}\n\t}\n\n\t/**\n\t * Get a valid SessionKey instance\n\t */\n\tasync getSessionKey(): Promise<SessionKey> {\n\t\t// External SessionKey case\n\t\tif (this.sessionKey) {\n\t\t\tif (this.sessionKey.isExpired()) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'The provided SessionKey has expired. Please provide a new SessionKey instance. ' +\n\t\t\t\t\t\t'When using an external SessionKey, lifecycle management is your responsibility.',\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn this.sessionKey;\n\t\t}\n\n\t\t// Managed SessionKey case\n\t\tif (this.sessionKeyConfig) {\n\t\t\tif (this.managedSessionKey && !this.managedSessionKey.isExpired()) {\n\t\t\t\treturn this.managedSessionKey;\n\t\t\t}\n\n\t\t\t// Create or recreate the SessionKey\n\t\t\tthis.managedSessionKey = await SessionKey.create({\n\t\t\t\taddress: this.sessionKeyConfig.address,\n\t\t\t\tsigner: this.sessionKeyConfig.signer,\n\t\t\t\tttlMin: this.sessionKeyConfig.ttlMin,\n\t\t\t\tmvrName: this.sessionKeyConfig.mvrName,\n\t\t\t\tpackageId: this.sealApproveContract.packageId,\n\t\t\t\tsuiClient: this.suiClient,\n\t\t\t});\n\n\t\t\treturn this.managedSessionKey;\n\t\t}\n\n\t\tthrow new Error('Invalid SessionKeyManager state');\n\t}\n\n\t/**\n\t * Update the external SessionKey instance\n\t */\n\tupdateExternalSessionKey(newSessionKey: SessionKey): void {\n\t\tif (!this.sessionKey) {\n\t\t\tthrow new Error('Cannot update external SessionKey when using managed SessionKey');\n\t\t}\n\t\tthis.sessionKey = newSessionKey;\n\t}\n\n\t/**\n\t * Force refresh the managed SessionKey\n\t */\n\tasync refreshManagedSessionKey(): Promise<SessionKey> {\n\t\tif (!this.sessionKeyConfig) {\n\t\t\tthrow new Error('Cannot refresh managed SessionKey when using external SessionKey');\n\t\t}\n\t\tthis.managedSessionKey = undefined;\n\t\treturn this.getSessionKey();\n\t}\n}\n"],
  "mappings": "AAGA,SAAS,kBAAkB;AAUpB,MAAM,kBAAkB;AAAA,EAG9B,YACS,YACS,kBACA,WACA,qBAChB;AAJO;AACS;AACA;AACA;AAEjB,QAAI,CAAC,cAAc,CAAC,kBAAkB;AACrC,YAAM,IAAI,MAAM,wDAAwD;AAAA,IACzE;AACA,QAAI,cAAc,kBAAkB;AACnC,YAAM,IAAI,MAAM,kEAAkE;AAAA,IACnF;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,gBAAqC;AAE1C,QAAI,KAAK,YAAY;AACpB,UAAI,KAAK,WAAW,UAAU,GAAG;AAChC,cAAM,IAAI;AAAA,UACT;AAAA,QAED;AAAA,MACD;AACA,aAAO,KAAK;AAAA,IACb;AAGA,QAAI,KAAK,kBAAkB;AAC1B,UAAI,KAAK,qBAAqB,CAAC,KAAK,kBAAkB,UAAU,GAAG;AAClE,eAAO,KAAK;AAAA,MACb;AAGA,WAAK,oBAAoB,MAAM,WAAW,OAAO;AAAA,QAChD,SAAS,KAAK,iBAAiB;AAAA,QAC/B,QAAQ,KAAK,iBAAiB;AAAA,QAC9B,QAAQ,KAAK,iBAAiB;AAAA,QAC9B,SAAS,KAAK,iBAAiB;AAAA,QAC/B,WAAW,KAAK,oBAAoB;AAAA,QACpC,WAAW,KAAK;AAAA,MACjB,CAAC;AAED,aAAO,KAAK;AAAA,IACb;AAEA,UAAM,IAAI,MAAM,iCAAiC;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA,EAKA,yBAAyB,eAAiC;AACzD,QAAI,CAAC,KAAK,YAAY;AACrB,YAAM,IAAI,MAAM,iEAAiE;AAAA,IAClF;AACA,SAAK,aAAa;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,2BAAgD;AACrD,QAAI,CAAC,KAAK,kBAAkB;AAC3B,YAAM,IAAI,MAAM,kEAAkE;AAAA,IACnF;AACA,SAAK,oBAAoB;AACzB,WAAO,KAAK,cAAc;AAAA,EAC3B;AACD;",
  "names": []
}
