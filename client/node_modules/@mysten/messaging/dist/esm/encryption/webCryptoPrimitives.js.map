{
  "version": 3,
  "sources": ["../../../src/encryption/webCryptoPrimitives.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { MessagingClientError } from '../error.js';\nimport { ENCRYPTION_PRIMITIVES_CONFIG } from './constants.js';\nimport type { EncryptionPrimitives, EncryptionPrimitivesConfig } from './types.js';\n\n/**\n * Default implementation of the KeyProvider interface using Web Crypto API\n */\nexport class WebCryptoPrimitives implements EncryptionPrimitives {\n\tprivate static instance: WebCryptoPrimitives;\n\tprivate config: EncryptionPrimitivesConfig;\n\n\tprivate constructor(config: EncryptionPrimitivesConfig) {\n\t\tthis.config = config;\n\t}\n\n\tpublic static getInstance(config?: EncryptionPrimitivesConfig): WebCryptoPrimitives {\n\t\tif (!WebCryptoPrimitives.instance) {\n\t\t\tWebCryptoPrimitives.instance = new WebCryptoPrimitives(\n\t\t\t\tconfig ?? ENCRYPTION_PRIMITIVES_CONFIG,\n\t\t\t);\n\t\t}\n\t\treturn WebCryptoPrimitives.instance;\n\t}\n\n\t// ===== Key methods =====\n\n\t/**\n\t * Generate a cryptographically secure random Data Encryption Key\n\t * @param length - Optional key length\n\t * @returns Random DEK bytes\n\t */\n\tasync generateDEK(length?: number): Promise<Uint8Array<ArrayBuffer>> {\n\t\tswitch (this.config.dekAlgorithm) {\n\t\t\tcase 'AES-GCM': {\n\t\t\t\tconst dek = await crypto.subtle.generateKey(\n\t\t\t\t\t{ name: this.config.dekAlgorithm, length: length ?? this.config.keySize },\n\t\t\t\t\ttrue,\n\t\t\t\t\t['encrypt', 'decrypt'],\n\t\t\t\t);\n\t\t\t\treturn await crypto.subtle.exportKey('raw', dek).then((dekData) => new Uint8Array(dekData));\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new MessagingClientError('Unsupported Data Encryption Key algorithm');\n\t\t}\n\t}\n\n\t/**\n\t * Generate a cryptographically secure nonce\n\t * @param length - Optional nonce length\n\t * @returns Random nonce bytes\n\t */\n\tgenerateNonce(length?: number): Uint8Array<ArrayBuffer> {\n\t\treturn crypto.getRandomValues(new Uint8Array(length ?? this.config.nonceSize));\n\t}\n\n\t// ===== Encryption methods =====\n\t/**\n\t * Encrypt bytes using a Data Encryption Key and nonce\n\t * @param key - The encryption key\n\t * @param nonce - The encryption nonce\n\t * @param aad - Additional authenticated data\n\t * @param bytesToEncrypt - The bytes to encrypt\n\t * @returns Encrypted bytes\n\t */\n\tasync encryptBytes(\n\t\tkey: Uint8Array<ArrayBuffer>,\n\t\tnonce: Uint8Array<ArrayBuffer>,\n\t\taad: Uint8Array<ArrayBuffer>,\n\t\tbytesToEncrypt: Uint8Array<ArrayBuffer>,\n\t): Promise<Uint8Array<ArrayBuffer>> {\n\t\tswitch (this.config.dekAlgorithm) {\n\t\t\tcase 'AES-GCM': {\n\t\t\t\tconst importedDEK = await crypto.subtle.importKey(\n\t\t\t\t\t'raw',\n\t\t\t\t\tkey,\n\t\t\t\t\t{ name: this.config.dekAlgorithm },\n\t\t\t\t\tfalse,\n\t\t\t\t\t['encrypt'],\n\t\t\t\t);\n\n\t\t\t\treturn await crypto.subtle\n\t\t\t\t\t.encrypt(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: this.config.dekAlgorithm,\n\t\t\t\t\t\t\tiv: nonce,\n\t\t\t\t\t\t\tadditionalData: aad,\n\t\t\t\t\t\t},\n\t\t\t\t\t\timportedDEK,\n\t\t\t\t\t\tbytesToEncrypt,\n\t\t\t\t\t)\n\t\t\t\t\t.then((encryptedData) => new Uint8Array(encryptedData));\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new MessagingClientError('Unsupported encryption algorithm');\n\t\t}\n\t}\n\n\t/**\n\t * Decrypt bytes using a Data Encryption Key and nonce\n\t * @param key - The decryption key\n\t * @param nonce - The decryption nonce\n\t * @param aad - Additional authenticated data\n\t * @param encryptedBytes - The bytes to decrypt\n\t * @returns Decrypted bytes\n\t */\n\tasync decryptBytes(\n\t\tkey: Uint8Array<ArrayBuffer>,\n\t\tnonce: Uint8Array<ArrayBuffer>,\n\t\taad: Uint8Array<ArrayBuffer>,\n\t\tencryptedBytes: Uint8Array<ArrayBuffer>,\n\t): Promise<Uint8Array<ArrayBuffer>> {\n\t\tswitch (this.config.dekAlgorithm) {\n\t\t\tcase 'AES-GCM': {\n\t\t\t\tconst importedDEK = await crypto.subtle.importKey(\n\t\t\t\t\t'raw',\n\t\t\t\t\tkey,\n\t\t\t\t\t{ name: this.config.dekAlgorithm },\n\t\t\t\t\tfalse,\n\t\t\t\t\t['decrypt'],\n\t\t\t\t);\n\n\t\t\t\treturn await crypto.subtle\n\t\t\t\t\t.decrypt(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: this.config.dekAlgorithm,\n\t\t\t\t\t\t\tiv: nonce,\n\t\t\t\t\t\t\tadditionalData: aad,\n\t\t\t\t\t\t},\n\t\t\t\t\t\timportedDEK,\n\t\t\t\t\t\tencryptedBytes,\n\t\t\t\t\t)\n\t\t\t\t\t.then((decryptedData) => new Uint8Array(decryptedData));\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new MessagingClientError('Unsupported encryption algorithm');\n\t\t}\n\t}\n}\n"],
  "mappings": "AAGA,SAAS,4BAA4B;AACrC,SAAS,oCAAoC;AAMtC,MAAM,oBAAoD;AAAA,EAIxD,YAAY,QAAoC;AACvD,SAAK,SAAS;AAAA,EACf;AAAA,EAEA,OAAc,YAAY,QAA0D;AACnF,QAAI,CAAC,oBAAoB,UAAU;AAClC,0BAAoB,WAAW,IAAI;AAAA,QAClC,UAAU;AAAA,MACX;AAAA,IACD;AACA,WAAO,oBAAoB;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,YAAY,QAAmD;AACpE,YAAQ,KAAK,OAAO,cAAc;AAAA,MACjC,KAAK,WAAW;AACf,cAAM,MAAM,MAAM,OAAO,OAAO;AAAA,UAC/B,EAAE,MAAM,KAAK,OAAO,cAAc,QAAQ,UAAU,KAAK,OAAO,QAAQ;AAAA,UACxE;AAAA,UACA,CAAC,WAAW,SAAS;AAAA,QACtB;AACA,eAAO,MAAM,OAAO,OAAO,UAAU,OAAO,GAAG,EAAE,KAAK,CAAC,YAAY,IAAI,WAAW,OAAO,CAAC;AAAA,MAC3F;AAAA,MACA;AACC,cAAM,IAAI,qBAAqB,2CAA2C;AAAA,IAC5E;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc,QAA0C;AACvD,WAAO,OAAO,gBAAgB,IAAI,WAAW,UAAU,KAAK,OAAO,SAAS,CAAC;AAAA,EAC9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,aACL,KACA,OACA,KACA,gBACmC;AACnC,YAAQ,KAAK,OAAO,cAAc;AAAA,MACjC,KAAK,WAAW;AACf,cAAM,cAAc,MAAM,OAAO,OAAO;AAAA,UACvC;AAAA,UACA;AAAA,UACA,EAAE,MAAM,KAAK,OAAO,aAAa;AAAA,UACjC;AAAA,UACA,CAAC,SAAS;AAAA,QACX;AAEA,eAAO,MAAM,OAAO,OAClB;AAAA,UACA;AAAA,YACC,MAAM,KAAK,OAAO;AAAA,YAClB,IAAI;AAAA,YACJ,gBAAgB;AAAA,UACjB;AAAA,UACA;AAAA,UACA;AAAA,QACD,EACC,KAAK,CAAC,kBAAkB,IAAI,WAAW,aAAa,CAAC;AAAA,MACxD;AAAA,MACA;AACC,cAAM,IAAI,qBAAqB,kCAAkC;AAAA,IACnE;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,aACL,KACA,OACA,KACA,gBACmC;AACnC,YAAQ,KAAK,OAAO,cAAc;AAAA,MACjC,KAAK,WAAW;AACf,cAAM,cAAc,MAAM,OAAO,OAAO;AAAA,UACvC;AAAA,UACA;AAAA,UACA,EAAE,MAAM,KAAK,OAAO,aAAa;AAAA,UACjC;AAAA,UACA,CAAC,SAAS;AAAA,QACX;AAEA,eAAO,MAAM,OAAO,OAClB;AAAA,UACA;AAAA,YACC,MAAM,KAAK,OAAO;AAAA,YAClB,IAAI;AAAA,YACJ,gBAAgB;AAAA,UACjB;AAAA,UACA;AAAA,UACA;AAAA,QACD,EACC,KAAK,CAAC,kBAAkB,IAAI,WAAW,aAAa,CAAC;AAAA,MACxD;AAAA,MACA;AACC,cAAM,IAAI,qBAAqB,kCAAkC;AAAA,IACnE;AAAA,EACD;AACD;",
  "names": []
}
