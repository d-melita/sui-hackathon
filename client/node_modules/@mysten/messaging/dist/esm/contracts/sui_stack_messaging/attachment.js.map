{
  "version": 3,
  "sources": ["../../../../src/contracts/sui_stack_messaging/attachment.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { MoveStruct, normalizeMoveArguments } from '../utils/index.js';\nimport type { RawTransactionArgument } from '../utils/index.js';\nimport { bcs } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\nconst $moduleName = '@local-pkg/sui-stack-messaging::attachment';\nexport const Attachment = new MoveStruct({\n\tname: `${$moduleName}::Attachment`,\n\tfields: {\n\t\tblob_ref: bcs.string(),\n\t\tencrypted_metadata: bcs.vector(bcs.u8()),\n\t\tdata_nonce: bcs.vector(bcs.u8()),\n\t\tmetadata_nonce: bcs.vector(bcs.u8()),\n\t\tkey_version: bcs.u32(),\n\t},\n});\nexport interface NewArguments {\n\tblobRef: RawTransactionArgument<string>;\n\tencryptedMetadata: RawTransactionArgument<number[]>;\n\tdataNonce: RawTransactionArgument<number[]>;\n\tmetadataNonce: RawTransactionArgument<number[]>;\n\tkeyVersion: RawTransactionArgument<number>;\n}\nexport interface NewOptions {\n\tpackage?: string;\n\targuments:\n\t\t| NewArguments\n\t\t| [\n\t\t\t\tblobRef: RawTransactionArgument<string>,\n\t\t\t\tencryptedMetadata: RawTransactionArgument<number[]>,\n\t\t\t\tdataNonce: RawTransactionArgument<number[]>,\n\t\t\t\tmetadataNonce: RawTransactionArgument<number[]>,\n\t\t\t\tkeyVersion: RawTransactionArgument<number>,\n\t\t  ];\n}\nexport function _new(options: NewOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/sui-stack-messaging';\n\tconst argumentsTypes = [\n\t\t'0x0000000000000000000000000000000000000000000000000000000000000001::string::String',\n\t\t'vector<u8>',\n\t\t'vector<u8>',\n\t\t'vector<u8>',\n\t\t'u32',\n\t] satisfies string[];\n\tconst parameterNames = [\n\t\t'blobRef',\n\t\t'encryptedMetadata',\n\t\t'dataNonce',\n\t\t'metadataNonce',\n\t\t'keyVersion',\n\t];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'attachment',\n\t\t\tfunction: 'new',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface BlobRefArguments {\n\tself: RawTransactionArgument<string>;\n}\nexport interface BlobRefOptions {\n\tpackage?: string;\n\targuments: BlobRefArguments | [self: RawTransactionArgument<string>];\n}\nexport function blobRef(options: BlobRefOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/sui-stack-messaging';\n\tconst argumentsTypes = [`${packageAddress}::attachment::Attachment`] satisfies string[];\n\tconst parameterNames = ['self'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'attachment',\n\t\t\tfunction: 'blob_ref',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface DataNonceArguments {\n\tself: RawTransactionArgument<string>;\n}\nexport interface DataNonceOptions {\n\tpackage?: string;\n\targuments: DataNonceArguments | [self: RawTransactionArgument<string>];\n}\nexport function dataNonce(options: DataNonceOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/sui-stack-messaging';\n\tconst argumentsTypes = [`${packageAddress}::attachment::Attachment`] satisfies string[];\n\tconst parameterNames = ['self'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'attachment',\n\t\t\tfunction: 'data_nonce',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\n"],
  "mappings": "AAEA,SAAS,YAAY,8BAA8B;AAEnD,SAAS,WAAW;AAEpB,MAAM,cAAc;AACb,MAAM,aAAa,IAAI,WAAW;AAAA,EACxC,MAAM,GAAG,WAAW;AAAA,EACpB,QAAQ;AAAA,IACP,UAAU,IAAI,OAAO;AAAA,IACrB,oBAAoB,IAAI,OAAO,IAAI,GAAG,CAAC;AAAA,IACvC,YAAY,IAAI,OAAO,IAAI,GAAG,CAAC;AAAA,IAC/B,gBAAgB,IAAI,OAAO,IAAI,GAAG,CAAC;AAAA,IACnC,aAAa,IAAI,IAAI;AAAA,EACtB;AACD,CAAC;AAoBM,SAAS,KAAK,SAAqB;AACzC,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB;AAAA,IACtB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACA,QAAM,iBAAiB;AAAA,IACtB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACA,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW,uBAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;AAQO,SAAS,QAAQ,SAAyB;AAChD,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB,CAAC,GAAG,cAAc,0BAA0B;AACnE,QAAM,iBAAiB,CAAC,MAAM;AAC9B,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW,uBAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;AAQO,SAAS,UAAU,SAA2B;AACpD,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB,CAAC,GAAG,cAAc,0BAA0B;AACnE,QAAM,iBAAiB,CAAC,MAAM;AAC9B,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW,uBAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;",
  "names": []
}
