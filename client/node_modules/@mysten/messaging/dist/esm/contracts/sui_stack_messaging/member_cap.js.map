{
  "version": 3,
  "sources": ["../../../../src/contracts/sui_stack_messaging/member_cap.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { MoveStruct, normalizeMoveArguments } from '../utils/index.js';\nimport type { RawTransactionArgument } from '../utils/index.js';\nimport { bcs } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\nimport * as object from './deps/sui/object.js';\nconst $moduleName = '@local-pkg/sui-stack-messaging::member_cap';\nexport const MemberCap = new MoveStruct({\n\tname: `${$moduleName}::MemberCap`,\n\tfields: {\n\t\tid: object.UID,\n\t\tchannel_id: bcs.Address,\n\t},\n});\nexport interface TransferToRecipientArguments {\n\tcap: RawTransactionArgument<string>;\n\tcreatorCap: RawTransactionArgument<string>;\n\trecipient: RawTransactionArgument<string>;\n}\nexport interface TransferToRecipientOptions {\n\tpackage?: string;\n\targuments:\n\t\t| TransferToRecipientArguments\n\t\t| [\n\t\t\t\tcap: RawTransactionArgument<string>,\n\t\t\t\tcreatorCap: RawTransactionArgument<string>,\n\t\t\t\trecipient: RawTransactionArgument<string>,\n\t\t  ];\n}\n/**\n * Transfer a MemberCap to the specified address. Should only be called by a\n * Channel Creator, after a Channel is created and shared.\n */\nexport function transferToRecipient(options: TransferToRecipientOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/sui-stack-messaging';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::member_cap::MemberCap`,\n\t\t`${packageAddress}::creator_cap::CreatorCap`,\n\t\t'address',\n\t] satisfies string[];\n\tconst parameterNames = ['cap', 'creatorCap', 'recipient'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'member_cap',\n\t\t\tfunction: 'transfer_to_recipient',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface TransferMemberCapsArguments {\n\tmemberAddresses: RawTransactionArgument<string[]>;\n\tmemberCaps: RawTransactionArgument<string[]>;\n\tcreatorCap: RawTransactionArgument<string>;\n}\nexport interface TransferMemberCapsOptions {\n\tpackage?: string;\n\targuments:\n\t\t| TransferMemberCapsArguments\n\t\t| [\n\t\t\t\tmemberAddresses: RawTransactionArgument<string[]>,\n\t\t\t\tmemberCaps: RawTransactionArgument<string[]>,\n\t\t\t\tcreatorCap: RawTransactionArgument<string>,\n\t\t  ];\n}\n/**\n * Transfer MemberCaps to the associated addresses Should only be called by a\n * Channel Creator, after a Channel is created and shared.\n */\nexport function transferMemberCaps(options: TransferMemberCapsOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/sui-stack-messaging';\n\tconst argumentsTypes = [\n\t\t'vector<address>',\n\t\t`vector<${packageAddress}::member_cap::MemberCap>`,\n\t\t`${packageAddress}::creator_cap::CreatorCap`,\n\t] satisfies string[];\n\tconst parameterNames = ['memberAddresses', 'memberCaps', 'creatorCap'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'member_cap',\n\t\t\tfunction: 'transfer_member_caps',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface ChannelIdArguments {\n\tself: RawTransactionArgument<string>;\n}\nexport interface ChannelIdOptions {\n\tpackage?: string;\n\targuments: ChannelIdArguments | [self: RawTransactionArgument<string>];\n}\nexport function channelId(options: ChannelIdOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/sui-stack-messaging';\n\tconst argumentsTypes = [`${packageAddress}::member_cap::MemberCap`] satisfies string[];\n\tconst parameterNames = ['self'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'member_cap',\n\t\t\tfunction: 'channel_id',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\n"],
  "mappings": "AAEA,SAAS,YAAY,8BAA8B;AAEnD,SAAS,WAAW;AAEpB,YAAY,YAAY;AACxB,MAAM,cAAc;AACb,MAAM,YAAY,IAAI,WAAW;AAAA,EACvC,MAAM,GAAG,WAAW;AAAA,EACpB,QAAQ;AAAA,IACP,IAAI,OAAO;AAAA,IACX,YAAY,IAAI;AAAA,EACjB;AACD,CAAC;AAoBM,SAAS,oBAAoB,SAAqC;AACxE,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB;AAAA,IACtB,GAAG,cAAc;AAAA,IACjB,GAAG,cAAc;AAAA,IACjB;AAAA,EACD;AACA,QAAM,iBAAiB,CAAC,OAAO,cAAc,WAAW;AACxD,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW,uBAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;AAoBO,SAAS,mBAAmB,SAAoC;AACtE,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB;AAAA,IACtB;AAAA,IACA,UAAU,cAAc;AAAA,IACxB,GAAG,cAAc;AAAA,EAClB;AACA,QAAM,iBAAiB,CAAC,mBAAmB,cAAc,YAAY;AACrE,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW,uBAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;AAQO,SAAS,UAAU,SAA2B;AACpD,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB,CAAC,GAAG,cAAc,yBAAyB;AAClE,QAAM,iBAAiB,CAAC,MAAM;AAC9B,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW,uBAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;",
  "names": []
}
