{
  "version": 3,
  "sources": ["../../../../src/contracts/sui_stack_messaging/message.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { MoveStruct, normalizeMoveArguments } from '../utils/index.js';\nimport type { RawTransactionArgument } from '../utils/index.js';\nimport { bcs } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\nimport * as attachment from './attachment.js';\nconst $moduleName = '@local-pkg/sui-stack-messaging::message';\nexport const Message = new MoveStruct({\n\tname: `${$moduleName}::Message`,\n\tfields: {\n\t\t/** The address of the sender of this message. TODO: should we encrypt this as well? */\n\t\tsender: bcs.Address,\n\t\t/** The message content, encrypted with a DEK(Data Encryption Key) */\n\t\tciphertext: bcs.vector(bcs.u8()),\n\t\t/** The nonce used for the encryption of the content. */\n\t\tnonce: bcs.vector(bcs.u8()),\n\t\t/**\n\t\t * The version of the DEK(Data Encryption Key) that was used to encrypt this\n\t\t * Message\n\t\t */\n\t\tkey_version: bcs.u32(),\n\t\t/** A vector of attachments associated with this message. */\n\t\tattachments: bcs.vector(attachment.Attachment),\n\t\t/** Timestamp in milliseconds when the message was created. */\n\t\tcreated_at_ms: bcs.u64(),\n\t},\n});\nexport const MessageAddedEvent = new MoveStruct({\n\tname: `${$moduleName}::MessageAddedEvent`,\n\tfields: {\n\t\tchannel_id: bcs.Address,\n\t\tmessage_index: bcs.u64(),\n\t\tsender: bcs.Address,\n\t\tciphertext: bcs.vector(bcs.u8()),\n\t\tnonce: bcs.vector(bcs.u8()),\n\t\tkey_version: bcs.u32(),\n\t\tattachment_refs: bcs.vector(bcs.string()),\n\t\tattachment_nonces: bcs.vector(bcs.vector(bcs.u8())),\n\t\tcreated_at_ms: bcs.u64(),\n\t},\n});\nexport interface NewArguments {\n\tsender: RawTransactionArgument<string>;\n\tciphertext: RawTransactionArgument<number[]>;\n\tnonce: RawTransactionArgument<number[]>;\n\tkeyVersion: RawTransactionArgument<number>;\n\tattachments: RawTransactionArgument<string[]>;\n}\nexport interface NewOptions {\n\tpackage?: string;\n\targuments:\n\t\t| NewArguments\n\t\t| [\n\t\t\t\tsender: RawTransactionArgument<string>,\n\t\t\t\tciphertext: RawTransactionArgument<number[]>,\n\t\t\t\tnonce: RawTransactionArgument<number[]>,\n\t\t\t\tkeyVersion: RawTransactionArgument<number>,\n\t\t\t\tattachments: RawTransactionArgument<string[]>,\n\t\t  ];\n}\nexport function _new(options: NewOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/sui-stack-messaging';\n\tconst argumentsTypes = [\n\t\t'address',\n\t\t'vector<u8>',\n\t\t'vector<u8>',\n\t\t'u32',\n\t\t`vector<${packageAddress}::attachment::Attachment>`,\n\t\t'0x0000000000000000000000000000000000000000000000000000000000000002::clock::Clock',\n\t] satisfies string[];\n\tconst parameterNames = ['sender', 'ciphertext', 'nonce', 'keyVersion', 'attachments', 'clock'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'message',\n\t\t\tfunction: 'new',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,mBAAmD;AAEnD,iBAAoB;AAEpB,iBAA4B;AAC5B,MAAM,cAAc;AACb,MAAM,UAAU,IAAI,wBAAW;AAAA,EACrC,MAAM,GAAG,WAAW;AAAA,EACpB,QAAQ;AAAA;AAAA,IAEP,QAAQ,eAAI;AAAA;AAAA,IAEZ,YAAY,eAAI,OAAO,eAAI,GAAG,CAAC;AAAA;AAAA,IAE/B,OAAO,eAAI,OAAO,eAAI,GAAG,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,IAK1B,aAAa,eAAI,IAAI;AAAA;AAAA,IAErB,aAAa,eAAI,OAAO,WAAW,UAAU;AAAA;AAAA,IAE7C,eAAe,eAAI,IAAI;AAAA,EACxB;AACD,CAAC;AACM,MAAM,oBAAoB,IAAI,wBAAW;AAAA,EAC/C,MAAM,GAAG,WAAW;AAAA,EACpB,QAAQ;AAAA,IACP,YAAY,eAAI;AAAA,IAChB,eAAe,eAAI,IAAI;AAAA,IACvB,QAAQ,eAAI;AAAA,IACZ,YAAY,eAAI,OAAO,eAAI,GAAG,CAAC;AAAA,IAC/B,OAAO,eAAI,OAAO,eAAI,GAAG,CAAC;AAAA,IAC1B,aAAa,eAAI,IAAI;AAAA,IACrB,iBAAiB,eAAI,OAAO,eAAI,OAAO,CAAC;AAAA,IACxC,mBAAmB,eAAI,OAAO,eAAI,OAAO,eAAI,GAAG,CAAC,CAAC;AAAA,IAClD,eAAe,eAAI,IAAI;AAAA,EACxB;AACD,CAAC;AAoBM,SAAS,KAAK,SAAqB;AACzC,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB;AAAA,IACtB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,UAAU,cAAc;AAAA,IACxB;AAAA,EACD;AACA,QAAM,iBAAiB,CAAC,UAAU,cAAc,SAAS,cAAc,eAAe,OAAO;AAC7F,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,eAAW,qCAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;",
  "names": []
}
