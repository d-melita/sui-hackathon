{
  "version": 3,
  "sources": ["../../../../src/contracts/sui_stack_messaging/config.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { MoveTuple, MoveStruct, normalizeMoveArguments } from '../utils/index.js';\nimport type { RawTransactionArgument } from '../utils/index.js';\nimport { bcs } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\nconst $moduleName = '@local-pkg/sui-stack-messaging::config';\nexport const EditConfig = new MoveTuple({\n\tname: `${$moduleName}::EditConfig`,\n\tfields: [bcs.bool()],\n});\nexport const Config = new MoveStruct({\n\tname: `${$moduleName}::Config`,\n\tfields: {\n\t\tmax_channel_members: bcs.u64(),\n\t\tmax_channel_roles: bcs.u64(),\n\t\tmax_message_text_chars: bcs.u64(),\n\t\tmax_message_attachments: bcs.u64(),\n\t\trequire_invitation: bcs.bool(),\n\t\trequire_request: bcs.bool(),\n\t\temit_events: bcs.bool(),\n\t},\n});\nexport interface DefaultOptions {\n\tpackage?: string;\n\targuments?: [];\n}\nexport function _default(options: DefaultOptions = {}) {\n\tconst packageAddress = options.package ?? '@local-pkg/sui-stack-messaging';\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'config',\n\t\t\tfunction: 'default',\n\t\t});\n}\nexport interface NewArguments {\n\tmaxChannelMembers: RawTransactionArgument<number | bigint>;\n\tmaxChannelRoles: RawTransactionArgument<number | bigint>;\n\tmaxMessageTextChars: RawTransactionArgument<number | bigint>;\n\tmaxMessageAttachments: RawTransactionArgument<number | bigint>;\n\trequireInvitation: RawTransactionArgument<boolean>;\n\trequireRequest: RawTransactionArgument<boolean>;\n\temitEvents: RawTransactionArgument<boolean>;\n}\nexport interface NewOptions {\n\tpackage?: string;\n\targuments:\n\t\t| NewArguments\n\t\t| [\n\t\t\t\tmaxChannelMembers: RawTransactionArgument<number | bigint>,\n\t\t\t\tmaxChannelRoles: RawTransactionArgument<number | bigint>,\n\t\t\t\tmaxMessageTextChars: RawTransactionArgument<number | bigint>,\n\t\t\t\tmaxMessageAttachments: RawTransactionArgument<number | bigint>,\n\t\t\t\trequireInvitation: RawTransactionArgument<boolean>,\n\t\t\t\trequireRequest: RawTransactionArgument<boolean>,\n\t\t\t\temitEvents: RawTransactionArgument<boolean>,\n\t\t  ];\n}\nexport function _new(options: NewOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/sui-stack-messaging';\n\tconst argumentsTypes = ['u64', 'u64', 'u64', 'u64', 'bool', 'bool', 'bool'] satisfies string[];\n\tconst parameterNames = [\n\t\t'maxChannelMembers',\n\t\t'maxChannelRoles',\n\t\t'maxMessageTextChars',\n\t\t'maxMessageAttachments',\n\t\t'requireInvitation',\n\t\t'requireRequest',\n\t\t'emitEvents',\n\t];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'config',\n\t\t\tfunction: 'new',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface NoneOptions {\n\tpackage?: string;\n\targuments?: [];\n}\nexport function none(options: NoneOptions = {}) {\n\tconst packageAddress = options.package ?? '@local-pkg/sui-stack-messaging';\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'config',\n\t\t\tfunction: 'none',\n\t\t});\n}\nexport interface IsValidConfigArguments {\n\tconfig: RawTransactionArgument<string>;\n}\nexport interface IsValidConfigOptions {\n\tpackage?: string;\n\targuments: IsValidConfigArguments | [config: RawTransactionArgument<string>];\n}\nexport function isValidConfig(options: IsValidConfigOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/sui-stack-messaging';\n\tconst argumentsTypes = [`${packageAddress}::config::Config`] satisfies string[];\n\tconst parameterNames = ['config'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'config',\n\t\t\tfunction: 'is_valid_config',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface ConfigMaxChannelMembersArguments {\n\tself: RawTransactionArgument<string>;\n}\nexport interface ConfigMaxChannelMembersOptions {\n\tpackage?: string;\n\targuments: ConfigMaxChannelMembersArguments | [self: RawTransactionArgument<string>];\n}\nexport function configMaxChannelMembers(options: ConfigMaxChannelMembersOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/sui-stack-messaging';\n\tconst argumentsTypes = [`${packageAddress}::config::Config`] satisfies string[];\n\tconst parameterNames = ['self'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'config',\n\t\t\tfunction: 'config_max_channel_members',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface ConfigMaxChannelRolesArguments {\n\tself: RawTransactionArgument<string>;\n}\nexport interface ConfigMaxChannelRolesOptions {\n\tpackage?: string;\n\targuments: ConfigMaxChannelRolesArguments | [self: RawTransactionArgument<string>];\n}\nexport function configMaxChannelRoles(options: ConfigMaxChannelRolesOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/sui-stack-messaging';\n\tconst argumentsTypes = [`${packageAddress}::config::Config`] satisfies string[];\n\tconst parameterNames = ['self'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'config',\n\t\t\tfunction: 'config_max_channel_roles',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface ConfigMaxMessageTextCharsArguments {\n\tself: RawTransactionArgument<string>;\n}\nexport interface ConfigMaxMessageTextCharsOptions {\n\tpackage?: string;\n\targuments: ConfigMaxMessageTextCharsArguments | [self: RawTransactionArgument<string>];\n}\nexport function configMaxMessageTextChars(options: ConfigMaxMessageTextCharsOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/sui-stack-messaging';\n\tconst argumentsTypes = [`${packageAddress}::config::Config`] satisfies string[];\n\tconst parameterNames = ['self'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'config',\n\t\t\tfunction: 'config_max_message_text_chars',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface ConfigMaxMessageAttachmentsArguments {\n\tself: RawTransactionArgument<string>;\n}\nexport interface ConfigMaxMessageAttachmentsOptions {\n\tpackage?: string;\n\targuments: ConfigMaxMessageAttachmentsArguments | [self: RawTransactionArgument<string>];\n}\nexport function configMaxMessageAttachments(options: ConfigMaxMessageAttachmentsOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/sui-stack-messaging';\n\tconst argumentsTypes = [`${packageAddress}::config::Config`] satisfies string[];\n\tconst parameterNames = ['self'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'config',\n\t\t\tfunction: 'config_max_message_attachments',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface ConfigRequireInvitationArguments {\n\tself: RawTransactionArgument<string>;\n}\nexport interface ConfigRequireInvitationOptions {\n\tpackage?: string;\n\targuments: ConfigRequireInvitationArguments | [self: RawTransactionArgument<string>];\n}\nexport function configRequireInvitation(options: ConfigRequireInvitationOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/sui-stack-messaging';\n\tconst argumentsTypes = [`${packageAddress}::config::Config`] satisfies string[];\n\tconst parameterNames = ['self'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'config',\n\t\t\tfunction: 'config_require_invitation',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface ConfigRequireRequestArguments {\n\tself: RawTransactionArgument<string>;\n}\nexport interface ConfigRequireRequestOptions {\n\tpackage?: string;\n\targuments: ConfigRequireRequestArguments | [self: RawTransactionArgument<string>];\n}\nexport function configRequireRequest(options: ConfigRequireRequestOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/sui-stack-messaging';\n\tconst argumentsTypes = [`${packageAddress}::config::Config`] satisfies string[];\n\tconst parameterNames = ['self'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'config',\n\t\t\tfunction: 'config_require_request',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface ConfigEmitEventsArguments {\n\tself: RawTransactionArgument<string>;\n}\nexport interface ConfigEmitEventsOptions {\n\tpackage?: string;\n\targuments: ConfigEmitEventsArguments | [self: RawTransactionArgument<string>];\n}\nexport function configEmitEvents(options: ConfigEmitEventsOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/sui-stack-messaging';\n\tconst argumentsTypes = [`${packageAddress}::config::Config`] satisfies string[];\n\tconst parameterNames = ['self'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'config',\n\t\t\tfunction: 'config_emit_events',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\n"],
  "mappings": "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",
  "names": []
}
