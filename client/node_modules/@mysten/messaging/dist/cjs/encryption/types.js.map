{
  "version": 3,
  "sources": ["../../../src/encryption/types.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { SessionKey } from '@mysten/seal';\nimport type { Signer } from '@mysten/sui/cryptography';\nimport type { MessagingCompatibleClient } from '../types.js';\n\nexport interface EnvelopeEncryptionConfig {\n\tsuiClient: MessagingCompatibleClient;\n\tsealApproveContract: SealApproveContract;\n\tsessionKey?: SessionKey;\n\tsessionKeyConfig?: SessionKeyConfig;\n\tencryptionPrimitives?: EncryptionPrimitives;\n\tsealConfig?: SealConfig;\n}\n\nexport interface SessionKeyConfig {\n\taddress: string;\n\tmvrName?: string;\n\tttlMin: number;\n\tsigner?: Signer;\n}\n\nexport interface SealApproveContract {\n\tpackageId: string;\n\tmodule: string;\n\tfunctionName: string;\n}\n\n/**\n * Seal configuration for messaging operations\n *\n * Note: This is separate from SealClient configuration!\n * - SealClient configuration (via SealClient.asClientExtension): Configures which key servers to use\n * - MessagingClient SealConfig: Configures operation parameters like encryption threshold\n */\nexport interface SealConfig {\n\t/**\n\t * Encryption threshold for Seal operations (default: 2)\n\t * This determines how many key servers must participate in encryption/decryption\n\t */\n\tthreshold?: number;\n}\n\n/**\n * Interface for encryption primitives used in messaging encryption\n */\nexport interface EncryptionPrimitives {\n\tgenerateDEK(length?: number): Promise<Uint8Array<ArrayBuffer>>;\n\tgenerateNonce(length?: number): Uint8Array<ArrayBuffer>;\n\tencryptBytes(\n\t\tkey: Uint8Array<ArrayBuffer>,\n\t\tnonce: Uint8Array<ArrayBuffer>,\n\t\taad: Uint8Array<ArrayBuffer>,\n\t\tbytesToEncrypt: Uint8Array<ArrayBuffer>,\n\t): Promise<Uint8Array<ArrayBuffer>>;\n\tdecryptBytes(\n\t\tkey: Uint8Array<ArrayBuffer>,\n\t\tnonce: Uint8Array<ArrayBuffer>,\n\t\taad: Uint8Array<ArrayBuffer>,\n\t\tencryptedBytes: Uint8Array<ArrayBuffer>,\n\t): Promise<Uint8Array<ArrayBuffer>>;\n}\n\n/**\n * Represents an encryption key that can be used for both encryption and decryption\n */\nexport interface SymmetricKey {\n\t$kind: 'Unencrypted';\n\tbytes: Uint8Array<ArrayBuffer>;\n\tversion: number;\n}\n\nexport interface DecryptChannelDEKOpts {\n\tencryptedKey: EncryptedSymmetricKey;\n\tmemberCapId: string; // should be valid sui object id\n\tchannelId: string; // should be valid sui object id\n}\n\n/**\n * Represents an encrypted symmetric key that needs to be decrypted before use\n */\nexport interface EncryptedSymmetricKey {\n\t$kind: 'Encrypted';\n\tencryptedBytes: Uint8Array<ArrayBuffer>;\n\tversion: number;\n}\n\nexport type EncryptionKey = SymmetricKey | EncryptedSymmetricKey;\n\nexport interface EncryptionPrimitivesConfig {\n\tkeySize: number;\n\tnonceSize: number;\n\tdekAlgorithm: 'AES-GCM';\n}\n\n// Additional Authenticated Data for encryption/decryption\n// (channelId, keyVersion, sender)\nexport interface EncryptAAD {\n\tchannelId: string; // should be valid sui object id\n\tkeyVersion: number; // u32\n\tsender: string; // should be valid sui address\n}\n\nexport interface CommonEncryptOpts {\n\tchannelId: string; // should be valid sui object id\n\tsender: string; // should be valid sui address\n\tencryptedKey: EncryptedSymmetricKey; // encrypted key that needs decryption via Seal\n\tmemberCapId: string; // required for Seal decryption\n}\n\nexport interface GenerateEncryptedChannelDEKopts {\n\tchannelId: string; // should be valid sui object id\n}\n\n/**\n * Represents an encrypted payload along with its metadata\n */\nexport interface EncryptedPayload {\n\tencryptedBytes: Uint8Array<ArrayBuffer>;\n\tnonce: Uint8Array<ArrayBuffer>;\n}\n\nexport interface EncryptTextOpts extends CommonEncryptOpts {\n\ttext: string;\n}\nexport interface DecryptTextOpts extends CommonEncryptOpts, EncryptedPayload {}\n\nexport interface AttachmentMetadata {\n\tfileName: string;\n\tmimeType: string;\n\tfileSize: number;\n}\nexport interface EncryptAttachmentOpts extends CommonEncryptOpts {\n\tfile: File;\n}\n\nexport interface EncryptedAttachmentPayload {\n\tdata: EncryptedPayload;\n\tmetadata: EncryptedPayload;\n}\n\nexport interface DecryptAttachmentMetadataOpts extends CommonEncryptOpts, EncryptedPayload {}\nexport interface DecryptAttachmentDataOpts extends CommonEncryptOpts, EncryptedPayload {}\nexport interface DecryptAttachmentOpts extends CommonEncryptOpts, EncryptedAttachmentPayload {}\n\nexport interface DecryptAttachmentResult extends AttachmentMetadata {\n\tdata: Uint8Array<ArrayBuffer>;\n}\nexport interface DecryptAttachmentDataResult {\n\tdata: Uint8Array<ArrayBuffer>;\n}\nexport type DecryptAttachmentMetadataResult = AttachmentMetadata;\n\nexport interface EncryptMessageOpts extends CommonEncryptOpts {\n\ttext: string;\n\tattachments?: File[];\n}\n\nexport interface EncryptedMessagePayload {\n\ttext: EncryptedPayload;\n\tattachments?: EncryptedAttachmentPayload[];\n}\n\nexport interface DecryptMessageOpts extends CommonEncryptOpts {\n\tciphertext: Uint8Array<ArrayBuffer>;\n\tnonce: Uint8Array<ArrayBuffer>;\n\tattachments?: EncryptedAttachmentPayload[];\n}\n\nexport interface DecryptMessageResult {\n\ttext: string;\n\tattachments?: DecryptAttachmentResult[];\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
