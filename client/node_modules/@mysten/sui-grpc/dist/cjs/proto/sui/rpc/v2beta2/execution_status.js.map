{
  "version": 3,
  "sources": ["../../../../../../src/proto/sui/rpc/v2beta2/execution_status.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport type { BinaryWriteOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryWriter } from '@protobuf-ts/runtime';\nimport { WireType } from '@protobuf-ts/runtime';\nimport type { BinaryReadOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryReader } from '@protobuf-ts/runtime';\nimport { UnknownFieldHandler } from '@protobuf-ts/runtime';\nimport type { PartialMessage } from '@protobuf-ts/runtime';\nimport { reflectionMergePartial } from '@protobuf-ts/runtime';\nimport { MessageType } from '@protobuf-ts/runtime';\n/**\n * The status of an executed transaction.\n *\n * @generated from protobuf message sui.rpc.v2beta2.ExecutionStatus\n */\nexport interface ExecutionStatus {\n\t/**\n\t * Indicates if the transaction was successful or not.\n\t *\n\t * @generated from protobuf field: optional bool success = 1\n\t */\n\tsuccess?: boolean;\n\t/**\n\t * The error if `success` is false.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.ExecutionError error = 2\n\t */\n\terror?: ExecutionError;\n}\n/**\n * An error that can occur during the execution of a transaction.\n *\n * @generated from protobuf message sui.rpc.v2beta2.ExecutionError\n */\nexport interface ExecutionError {\n\t/**\n\t * A human readable description of the error\n\t *\n\t * @generated from protobuf field: optional string description = 1\n\t */\n\tdescription?: string;\n\t/**\n\t * The command, if any, during which the error occurred.\n\t *\n\t * @generated from protobuf field: optional uint64 command = 2\n\t */\n\tcommand?: bigint;\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.ExecutionError.ExecutionErrorKind kind = 3\n\t */\n\tkind?: ExecutionError_ExecutionErrorKind;\n\t/**\n\t * @generated from protobuf oneof: error_details\n\t */\n\terrorDetails:\n\t\t| {\n\t\t\t\toneofKind: 'abort';\n\t\t\t\t/**\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.MoveAbort abort = 4\n\t\t\t\t */\n\t\t\t\tabort: MoveAbort;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'sizeError';\n\t\t\t\t/**\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.SizeError size_error = 5\n\t\t\t\t */\n\t\t\t\tsizeError: SizeError;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'commandArgumentError';\n\t\t\t\t/**\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.CommandArgumentError command_argument_error = 6\n\t\t\t\t */\n\t\t\t\tcommandArgumentError: CommandArgumentError;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'typeArgumentError';\n\t\t\t\t/**\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.TypeArgumentError type_argument_error = 7\n\t\t\t\t */\n\t\t\t\ttypeArgumentError: TypeArgumentError;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'packageUpgradeError';\n\t\t\t\t/**\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.PackageUpgradeError package_upgrade_error = 8\n\t\t\t\t */\n\t\t\t\tpackageUpgradeError: PackageUpgradeError;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'indexError';\n\t\t\t\t/**\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.IndexError index_error = 9\n\t\t\t\t */\n\t\t\t\tindexError: IndexError;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'objectId';\n\t\t\t\t/**\n\t\t\t\t * @generated from protobuf field: string object_id = 10\n\t\t\t\t */\n\t\t\t\tobjectId: string;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'coinDenyListError';\n\t\t\t\t/**\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.CoinDenyListError coin_deny_list_error = 11\n\t\t\t\t */\n\t\t\t\tcoinDenyListError: CoinDenyListError;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'congestedObjects';\n\t\t\t\t/**\n\t\t\t\t * Set of objects that were congested, leading to the transaction's cancellation.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.CongestedObjects congested_objects = 12\n\t\t\t\t */\n\t\t\t\tcongestedObjects: CongestedObjects;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: undefined;\n\t\t  };\n}\n/**\n * @generated from protobuf enum sui.rpc.v2beta2.ExecutionError.ExecutionErrorKind\n */\nexport enum ExecutionError_ExecutionErrorKind {\n\t/**\n\t * @generated from protobuf enum value: EXECUTION_ERROR_KIND_UNKNOWN = 0;\n\t */\n\tEXECUTION_ERROR_KIND_UNKNOWN = 0,\n\t/**\n\t * Insufficient gas.\n\t *\n\t * @generated from protobuf enum value: INSUFFICIENT_GAS = 1;\n\t */\n\tINSUFFICIENT_GAS = 1,\n\t/**\n\t * Invalid `Gas` object.\n\t *\n\t * @generated from protobuf enum value: INVALID_GAS_OBJECT = 2;\n\t */\n\tINVALID_GAS_OBJECT = 2,\n\t/**\n\t * Invariant violation.\n\t *\n\t * @generated from protobuf enum value: INVARIANT_VIOLATION = 3;\n\t */\n\tINVARIANT_VIOLATION = 3,\n\t/**\n\t * Attempted to use feature that is not supported yet.\n\t *\n\t * @generated from protobuf enum value: FEATURE_NOT_YET_SUPPORTED = 4;\n\t */\n\tFEATURE_NOT_YET_SUPPORTED = 4,\n\t/**\n\t * Move object is larger than the maximum allowed size.\n\t *\n\t * @generated from protobuf enum value: OBJECT_TOO_BIG = 5;\n\t */\n\tOBJECT_TOO_BIG = 5,\n\t/**\n\t * Package is larger than the maximum allowed size.\n\t *\n\t * @generated from protobuf enum value: PACKAGE_TOO_BIG = 6;\n\t */\n\tPACKAGE_TOO_BIG = 6,\n\t/**\n\t * Circular object ownership.\n\t *\n\t * @generated from protobuf enum value: CIRCULAR_OBJECT_OWNERSHIP = 7;\n\t */\n\tCIRCULAR_OBJECT_OWNERSHIP = 7,\n\t/**\n\t * Insufficient coin balance for requested operation.\n\t *\n\t * @generated from protobuf enum value: INSUFFICIENT_COIN_BALANCE = 8;\n\t */\n\tINSUFFICIENT_COIN_BALANCE = 8,\n\t/**\n\t * Coin balance overflowed an u64.\n\t *\n\t * @generated from protobuf enum value: COIN_BALANCE_OVERFLOW = 9;\n\t */\n\tCOIN_BALANCE_OVERFLOW = 9,\n\t/**\n\t * Publish error, non-zero address.\n\t * The modules in the package must have their self-addresses set to zero.\n\t *\n\t * @generated from protobuf enum value: PUBLISH_ERROR_NON_ZERO_ADDRESS = 10;\n\t */\n\tPUBLISH_ERROR_NON_ZERO_ADDRESS = 10,\n\t/**\n\t * Sui Move bytecode verification error.\n\t *\n\t * @generated from protobuf enum value: SUI_MOVE_VERIFICATION_ERROR = 11;\n\t */\n\tSUI_MOVE_VERIFICATION_ERROR = 11,\n\t/**\n\t * Error from a non-abort instruction.\n\t * Possible causes:\n\t *     Arithmetic error, stack overflow, max value depth, or similar.\n\t *\n\t * @generated from protobuf enum value: MOVE_PRIMITIVE_RUNTIME_ERROR = 12;\n\t */\n\tMOVE_PRIMITIVE_RUNTIME_ERROR = 12,\n\t/**\n\t * Move runtime abort.\n\t *\n\t * @generated from protobuf enum value: MOVE_ABORT = 13;\n\t */\n\tMOVE_ABORT = 13,\n\t/**\n\t * Bytecode verification error.\n\t *\n\t * @generated from protobuf enum value: VM_VERIFICATION_OR_DESERIALIZATION_ERROR = 14;\n\t */\n\tVM_VERIFICATION_OR_DESERIALIZATION_ERROR = 14,\n\t/**\n\t * MoveVm invariant violation.\n\t *\n\t * @generated from protobuf enum value: VM_INVARIANT_VIOLATION = 15;\n\t */\n\tVM_INVARIANT_VIOLATION = 15,\n\t/**\n\t * Function not found.\n\t *\n\t * @generated from protobuf enum value: FUNCTION_NOT_FOUND = 16;\n\t */\n\tFUNCTION_NOT_FOUND = 16,\n\t/**\n\t * Parity mismatch for Move function.\n\t * The number of arguments does not match the number of parameters.\n\t *\n\t * @generated from protobuf enum value: ARITY_MISMATCH = 17;\n\t */\n\tARITY_MISMATCH = 17,\n\t/**\n\t * Type parity mismatch for Move function.\n\t * Mismatch between the number of actual versus expected type arguments.\n\t *\n\t * @generated from protobuf enum value: TYPE_ARITY_MISMATCH = 18;\n\t */\n\tTYPE_ARITY_MISMATCH = 18,\n\t/**\n\t * Non-entry function invoked. Move Call must start with an entry function.\n\t *\n\t * @generated from protobuf enum value: NON_ENTRY_FUNCTION_INVOKED = 19;\n\t */\n\tNON_ENTRY_FUNCTION_INVOKED = 19,\n\t/**\n\t * Invalid command argument.\n\t *\n\t * @generated from protobuf enum value: COMMAND_ARGUMENT_ERROR = 20;\n\t */\n\tCOMMAND_ARGUMENT_ERROR = 20,\n\t/**\n\t * Type argument error.\n\t *\n\t * @generated from protobuf enum value: TYPE_ARGUMENT_ERROR = 21;\n\t */\n\tTYPE_ARGUMENT_ERROR = 21,\n\t/**\n\t * Unused result without the drop ability.\n\t *\n\t * @generated from protobuf enum value: UNUSED_VALUE_WITHOUT_DROP = 22;\n\t */\n\tUNUSED_VALUE_WITHOUT_DROP = 22,\n\t/**\n\t * Invalid public Move function signature.\n\t * Unsupported return type for return value.\n\t *\n\t * @generated from protobuf enum value: INVALID_PUBLIC_FUNCTION_RETURN_TYPE = 23;\n\t */\n\tINVALID_PUBLIC_FUNCTION_RETURN_TYPE = 23,\n\t/**\n\t * Invalid transfer object, object does not have public transfer.\n\t *\n\t * @generated from protobuf enum value: INVALID_TRANSFER_OBJECT = 24;\n\t */\n\tINVALID_TRANSFER_OBJECT = 24,\n\t/**\n\t * Effects from the transaction are too large.\n\t *\n\t * @generated from protobuf enum value: EFFECTS_TOO_LARGE = 25;\n\t */\n\tEFFECTS_TOO_LARGE = 25,\n\t/**\n\t * Publish or Upgrade is missing dependency.\n\t *\n\t * @generated from protobuf enum value: PUBLISH_UPGRADE_MISSING_DEPENDENCY = 26;\n\t */\n\tPUBLISH_UPGRADE_MISSING_DEPENDENCY = 26,\n\t/**\n\t * Publish or upgrade dependency downgrade.\n\t *\n\t * Indirect (transitive) dependency of published or upgraded package has been assigned an\n\t * on-chain version that is less than the version required by one of the package's\n\t * transitive dependencies.\n\t *\n\t * @generated from protobuf enum value: PUBLISH_UPGRADE_DEPENDENCY_DOWNGRADE = 27;\n\t */\n\tPUBLISH_UPGRADE_DEPENDENCY_DOWNGRADE = 27,\n\t/**\n\t * Invalid package upgrade.\n\t *\n\t * @generated from protobuf enum value: PACKAGE_UPGRADE_ERROR = 28;\n\t */\n\tPACKAGE_UPGRADE_ERROR = 28,\n\t/**\n\t * Indicates the transaction tried to write objects too large to storage.\n\t *\n\t * @generated from protobuf enum value: WRITTEN_OBJECTS_TOO_LARGE = 29;\n\t */\n\tWRITTEN_OBJECTS_TOO_LARGE = 29,\n\t/**\n\t * Certificate is on the deny list.\n\t *\n\t * @generated from protobuf enum value: CERTIFICATE_DENIED = 30;\n\t */\n\tCERTIFICATE_DENIED = 30,\n\t/**\n\t * Sui Move bytecode verification timed out.\n\t *\n\t * @generated from protobuf enum value: SUI_MOVE_VERIFICATION_TIMEDOUT = 31;\n\t */\n\tSUI_MOVE_VERIFICATION_TIMEDOUT = 31,\n\t/**\n\t * The requested shared object operation is not allowed.\n\t *\n\t * @generated from protobuf enum value: SHARED_OBJECT_OPERATION_NOT_ALLOWED = 32;\n\t */\n\tSHARED_OBJECT_OPERATION_NOT_ALLOWED = 32,\n\t/**\n\t * Requested shared object has been deleted.\n\t *\n\t * @generated from protobuf enum value: INPUT_OBJECT_DELETED = 33;\n\t */\n\tINPUT_OBJECT_DELETED = 33,\n\t/**\n\t * Certificate is canceled due to congestion on shared objects.\n\t *\n\t * @generated from protobuf enum value: EXECUTION_CANCELED_DUE_TO_SHARED_OBJECT_CONGESTION = 34;\n\t */\n\tEXECUTION_CANCELED_DUE_TO_SHARED_OBJECT_CONGESTION = 34,\n\t/**\n\t * Address is denied for this coin type.\n\t *\n\t * @generated from protobuf enum value: ADDRESS_DENIED_FOR_COIN = 35;\n\t */\n\tADDRESS_DENIED_FOR_COIN = 35,\n\t/**\n\t * Coin type is globally paused for use.\n\t *\n\t * @generated from protobuf enum value: COIN_TYPE_GLOBAL_PAUSE = 36;\n\t */\n\tCOIN_TYPE_GLOBAL_PAUSE = 36,\n\t/**\n\t * Certificate is canceled because randomness could not be generated this epoch.\n\t *\n\t * @generated from protobuf enum value: EXECUTION_CANCELED_DUE_TO_RANDOMNESS_UNAVAILABLE = 37;\n\t */\n\tEXECUTION_CANCELED_DUE_TO_RANDOMNESS_UNAVAILABLE = 37,\n\t/**\n\t * @generated from protobuf enum value: MOVE_VECTOR_ELEM_TOO_BIG = 38;\n\t */\n\tMOVE_VECTOR_ELEM_TOO_BIG = 38,\n\t/**\n\t * @generated from protobuf enum value: MOVE_RAW_VALUE_TOO_BIG = 39;\n\t */\n\tMOVE_RAW_VALUE_TOO_BIG = 39,\n\t/**\n\t * @generated from protobuf enum value: INVALID_LINKAGE = 40;\n\t */\n\tINVALID_LINKAGE = 40,\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.MoveAbort\n */\nexport interface MoveAbort {\n\t/**\n\t * @generated from protobuf field: optional uint64 abort_code = 1\n\t */\n\tabortCode?: bigint;\n\t/**\n\t * Location in Move where the error occurred.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.MoveLocation location = 2\n\t */\n\tlocation?: MoveLocation;\n\t/**\n\t * Extra error information if abort code is a \"Clever Error\"\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.CleverError clever_error = 3\n\t */\n\tcleverError?: CleverError;\n}\n/**\n * Location in Move bytecode where an error occurred.\n *\n * @generated from protobuf message sui.rpc.v2beta2.MoveLocation\n */\nexport interface MoveLocation {\n\t/**\n\t * The package ID.\n\t *\n\t * @generated from protobuf field: optional string package = 1\n\t */\n\tpackage?: string;\n\t/**\n\t * The module name.\n\t *\n\t * @generated from protobuf field: optional string module = 2\n\t */\n\tmodule?: string;\n\t/**\n\t * The function index.\n\t *\n\t * @generated from protobuf field: optional uint32 function = 3\n\t */\n\tfunction?: number;\n\t/**\n\t * Offset of the instruction where the error occurred.\n\t *\n\t * @generated from protobuf field: optional uint32 instruction = 4\n\t */\n\tinstruction?: number;\n\t/**\n\t * The name of the function, if available.\n\t *\n\t * @generated from protobuf field: optional string function_name = 5\n\t */\n\tfunctionName?: string;\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.CleverError\n */\nexport interface CleverError {\n\t/**\n\t * @generated from protobuf field: optional uint64 error_code = 1\n\t */\n\terrorCode?: bigint;\n\t/**\n\t * @generated from protobuf field: optional uint64 line_number = 2\n\t */\n\tlineNumber?: bigint;\n\t/**\n\t * @generated from protobuf field: optional string constant_name = 3\n\t */\n\tconstantName?: string;\n\t/**\n\t * @generated from protobuf field: optional string constant_type = 4\n\t */\n\tconstantType?: string;\n\t/**\n\t * @generated from protobuf oneof: value\n\t */\n\tvalue:\n\t\t| {\n\t\t\t\toneofKind: 'rendered';\n\t\t\t\t/**\n\t\t\t\t * @generated from protobuf field: string rendered = 5\n\t\t\t\t */\n\t\t\t\trendered: string;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'raw';\n\t\t\t\t/**\n\t\t\t\t * @generated from protobuf field: bytes raw = 6\n\t\t\t\t */\n\t\t\t\traw: Uint8Array;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: undefined;\n\t\t  };\n}\n/**\n * A size error.\n *\n * @generated from protobuf message sui.rpc.v2beta2.SizeError\n */\nexport interface SizeError {\n\t/**\n\t * The offending size.\n\t *\n\t * @generated from protobuf field: optional uint64 size = 1\n\t */\n\tsize?: bigint;\n\t/**\n\t * The maximum allowable size.\n\t *\n\t * @generated from protobuf field: optional uint64 max_size = 2\n\t */\n\tmaxSize?: bigint;\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.IndexError\n */\nexport interface IndexError {\n\t/**\n\t * Index of an input or result.\n\t *\n\t * @generated from protobuf field: optional uint32 index = 1\n\t */\n\tindex?: number;\n\t/**\n\t * Index of a subresult.\n\t *\n\t * @generated from protobuf field: optional uint32 subresult = 2\n\t */\n\tsubresult?: number;\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.CoinDenyListError\n */\nexport interface CoinDenyListError {\n\t/**\n\t * Denied address.\n\t *\n\t * @generated from protobuf field: optional string address = 1\n\t */\n\taddress?: string;\n\t/**\n\t * Coin type.\n\t *\n\t * @generated from protobuf field: optional string coin_type = 2\n\t */\n\tcoinType?: string;\n}\n/**\n * Set of objects that were congested, leading to the transaction's cancellation.\n *\n * @generated from protobuf message sui.rpc.v2beta2.CongestedObjects\n */\nexport interface CongestedObjects {\n\t/**\n\t * @generated from protobuf field: repeated string objects = 1\n\t */\n\tobjects: string[];\n}\n/**\n * An error with an argument to a command.\n *\n * @generated from protobuf message sui.rpc.v2beta2.CommandArgumentError\n */\nexport interface CommandArgumentError {\n\t/**\n\t * Position of the problematic argument.\n\t *\n\t * @generated from protobuf field: optional uint32 argument = 1\n\t */\n\targument?: number;\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.CommandArgumentError.CommandArgumentErrorKind kind = 2\n\t */\n\tkind?: CommandArgumentError_CommandArgumentErrorKind;\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.IndexError index_error = 3\n\t */\n\tindexError?: IndexError;\n}\n/**\n * @generated from protobuf enum sui.rpc.v2beta2.CommandArgumentError.CommandArgumentErrorKind\n */\nexport enum CommandArgumentError_CommandArgumentErrorKind {\n\t/**\n\t * @generated from protobuf enum value: COMMAND_ARGUMENT_ERROR_KIND_UNKNOWN = 0;\n\t */\n\tCOMMAND_ARGUMENT_ERROR_KIND_UNKNOWN = 0,\n\t/**\n\t * The type of the value does not match the expected type.\n\t *\n\t * @generated from protobuf enum value: TYPE_MISMATCH = 1;\n\t */\n\tTYPE_MISMATCH = 1,\n\t/**\n\t * The argument cannot be deserialized into a value of the specified type.\n\t *\n\t * @generated from protobuf enum value: INVALID_BCS_BYTES = 2;\n\t */\n\tINVALID_BCS_BYTES = 2,\n\t/**\n\t * The argument cannot be instantiated from raw bytes.\n\t *\n\t * @generated from protobuf enum value: INVALID_USAGE_OF_PURE_ARGUMENT = 3;\n\t */\n\tINVALID_USAGE_OF_PURE_ARGUMENT = 3,\n\t/**\n\t * Invalid argument to private entry function.\n\t * Private entry functions cannot take arguments from other Move functions.\n\t *\n\t * @generated from protobuf enum value: INVALID_ARGUMENT_TO_PRIVATE_ENTRY_FUNCTION = 4;\n\t */\n\tINVALID_ARGUMENT_TO_PRIVATE_ENTRY_FUNCTION = 4,\n\t/**\n\t * Out of bounds access to input or results.\n\t *\n\t * `index` field will be set indicating the invalid index value.\n\t *\n\t * @generated from protobuf enum value: INDEX_OUT_OF_BOUNDS = 5;\n\t */\n\tINDEX_OUT_OF_BOUNDS = 5,\n\t/**\n\t * Out of bounds access to subresult.\n\t *\n\t * `index` and `subresult` fields will be set indicating the invalid index value.\n\t *\n\t * @generated from protobuf enum value: SECONDARY_INDEX_OUT_OF_BOUNDS = 6;\n\t */\n\tSECONDARY_INDEX_OUT_OF_BOUNDS = 6,\n\t/**\n\t * Invalid usage of result.\n\t * Expected a single result but found either no return value or multiple.\n\t * `index` field will be set indicating the invalid index value.\n\t *\n\t * @generated from protobuf enum value: INVALID_RESULT_ARITY = 7;\n\t */\n\tINVALID_RESULT_ARITY = 7,\n\t/**\n\t * Invalid usage of gas coin.\n\t * The gas coin can only be used by-value with a `TransferObject` command.\n\t *\n\t * @generated from protobuf enum value: INVALID_GAS_COIN_USAGE = 8;\n\t */\n\tINVALID_GAS_COIN_USAGE = 8,\n\t/**\n\t * Invalid usage of Move value.\n\t *    - Mutably borrowed values require unique usage.\n\t *    - Immutably borrowed values cannot be taken or borrowed mutably.\n\t *    - Taken values cannot be used again.\n\t *\n\t * @generated from protobuf enum value: INVALID_VALUE_USAGE = 9;\n\t */\n\tINVALID_VALUE_USAGE = 9,\n\t/**\n\t * Immutable objects cannot be passed by-value.\n\t *\n\t * @generated from protobuf enum value: INVALID_OBJECT_BY_VALUE = 10;\n\t */\n\tINVALID_OBJECT_BY_VALUE = 10,\n\t/**\n\t * Immutable objects cannot be passed by mutable reference, `&mut`.\n\t *\n\t * @generated from protobuf enum value: INVALID_OBJECT_BY_MUT_REF = 11;\n\t */\n\tINVALID_OBJECT_BY_MUT_REF = 11,\n\t/**\n\t * Shared object operations such as wrapping, freezing, or converting to owned are not\n\t * allowed.\n\t *\n\t * @generated from protobuf enum value: SHARED_OBJECT_OPERATION_NOT_ALLOWED = 12;\n\t */\n\tSHARED_OBJECT_OPERATION_NOT_ALLOWED = 12,\n\t/**\n\t * Invalid argument arity. Expected a single argument but found a result that expanded to\n\t * multiple arguments.\n\t *\n\t * @generated from protobuf enum value: INVALID_ARGUMENT_ARITY = 13;\n\t */\n\tINVALID_ARGUMENT_ARITY = 13,\n}\n/**\n * An error with upgrading a package.\n *\n * @generated from protobuf message sui.rpc.v2beta2.PackageUpgradeError\n */\nexport interface PackageUpgradeError {\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.PackageUpgradeError.PackageUpgradeErrorKind kind = 1\n\t */\n\tkind?: PackageUpgradeError_PackageUpgradeErrorKind;\n\t/**\n\t * The Package Id.\n\t *\n\t * @generated from protobuf field: optional string package_id = 2\n\t */\n\tpackageId?: string;\n\t/**\n\t * A digest.\n\t *\n\t * @generated from protobuf field: optional string digest = 3\n\t */\n\tdigest?: string;\n\t/**\n\t * The policy.\n\t *\n\t * @generated from protobuf field: optional uint32 policy = 4\n\t */\n\tpolicy?: number;\n\t/**\n\t * The ticket Id.\n\t *\n\t * @generated from protobuf field: optional string ticket_id = 5\n\t */\n\tticketId?: string;\n}\n/**\n * @generated from protobuf enum sui.rpc.v2beta2.PackageUpgradeError.PackageUpgradeErrorKind\n */\nexport enum PackageUpgradeError_PackageUpgradeErrorKind {\n\t/**\n\t * @generated from protobuf enum value: PACKAGE_UPGRADE_ERROR_KIND_UNKNOWN = 0;\n\t */\n\tPACKAGE_UPGRADE_ERROR_KIND_UNKNOWN = 0,\n\t/**\n\t * Unable to fetch package.\n\t *\n\t * @generated from protobuf enum value: UNABLE_TO_FETCH_PACKAGE = 1;\n\t */\n\tUNABLE_TO_FETCH_PACKAGE = 1,\n\t/**\n\t * Object is not a package.\n\t *\n\t * @generated from protobuf enum value: NOT_A_PACKAGE = 2;\n\t */\n\tNOT_A_PACKAGE = 2,\n\t/**\n\t * Package upgrade is incompatible with previous version.\n\t *\n\t * @generated from protobuf enum value: INCOMPATIBLE_UPGRADE = 3;\n\t */\n\tINCOMPATIBLE_UPGRADE = 3,\n\t/**\n\t * Digest in upgrade ticket and computed digest differ.\n\t *\n\t * @generated from protobuf enum value: DIGEST_DOES_NOT_MATCH = 4;\n\t */\n\tDIGEST_DOES_NOT_MATCH = 4,\n\t/**\n\t * Upgrade policy is not valid.\n\t *\n\t * @generated from protobuf enum value: UNKNOWN_UPGRADE_POLICY = 5;\n\t */\n\tUNKNOWN_UPGRADE_POLICY = 5,\n\t/**\n\t * Package ID does not match `PackageId` in upgrade ticket.\n\t *\n\t * @generated from protobuf enum value: PACKAGE_ID_DOES_NOT_MATCH = 6;\n\t */\n\tPACKAGE_ID_DOES_NOT_MATCH = 6,\n}\n/**\n * Type argument error.\n *\n * @generated from protobuf message sui.rpc.v2beta2.TypeArgumentError\n */\nexport interface TypeArgumentError {\n\t/**\n\t * Index of the problematic type argument.\n\t *\n\t * @generated from protobuf field: optional uint32 type_argument = 1\n\t */\n\ttypeArgument?: number;\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.TypeArgumentError.TypeArgumentErrorKind kind = 2\n\t */\n\tkind?: TypeArgumentError_TypeArgumentErrorKind;\n}\n/**\n * @generated from protobuf enum sui.rpc.v2beta2.TypeArgumentError.TypeArgumentErrorKind\n */\nexport enum TypeArgumentError_TypeArgumentErrorKind {\n\t/**\n\t * @generated from protobuf enum value: TYPE_ARGUMENT_ERROR_KIND_UNKNOWN = 0;\n\t */\n\tTYPE_ARGUMENT_ERROR_KIND_UNKNOWN = 0,\n\t/**\n\t * A type was not found in the module specified.\n\t *\n\t * @generated from protobuf enum value: TYPE_NOT_FOUND = 1;\n\t */\n\tTYPE_NOT_FOUND = 1,\n\t/**\n\t * A type provided did not match the specified constraint.\n\t *\n\t * @generated from protobuf enum value: CONSTRAINT_NOT_SATISFIED = 2;\n\t */\n\tCONSTRAINT_NOT_SATISFIED = 2,\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass ExecutionStatus$Type extends MessageType<ExecutionStatus> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ExecutionStatus', [\n\t\t\t{ no: 1, name: 'success', kind: 'scalar', opt: true, T: 8 /*ScalarType.BOOL*/ },\n\t\t\t{ no: 2, name: 'error', kind: 'message', T: () => ExecutionError },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ExecutionStatus>): ExecutionStatus {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<ExecutionStatus>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ExecutionStatus,\n\t): ExecutionStatus {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional bool success */ 1:\n\t\t\t\t\tmessage.success = reader.bool();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.ExecutionError error */ 2:\n\t\t\t\t\tmessage.error = ExecutionError.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.error,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ExecutionStatus,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional bool success = 1; */\n\t\tif (message.success !== undefined) writer.tag(1, WireType.Varint).bool(message.success);\n\t\t/* optional sui.rpc.v2beta2.ExecutionError error = 2; */\n\t\tif (message.error)\n\t\t\tExecutionError.internalBinaryWrite(\n\t\t\t\tmessage.error,\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ExecutionStatus\n */\nexport const ExecutionStatus = new ExecutionStatus$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ExecutionError$Type extends MessageType<ExecutionError> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ExecutionError', [\n\t\t\t{ no: 1, name: 'description', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'command',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'kind',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => [\n\t\t\t\t\t'sui.rpc.v2beta2.ExecutionError.ExecutionErrorKind',\n\t\t\t\t\tExecutionError_ExecutionErrorKind,\n\t\t\t\t],\n\t\t\t},\n\t\t\t{ no: 4, name: 'abort', kind: 'message', oneof: 'errorDetails', T: () => MoveAbort },\n\t\t\t{ no: 5, name: 'size_error', kind: 'message', oneof: 'errorDetails', T: () => SizeError },\n\t\t\t{\n\t\t\t\tno: 6,\n\t\t\t\tname: 'command_argument_error',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'errorDetails',\n\t\t\t\tT: () => CommandArgumentError,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 7,\n\t\t\t\tname: 'type_argument_error',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'errorDetails',\n\t\t\t\tT: () => TypeArgumentError,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 8,\n\t\t\t\tname: 'package_upgrade_error',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'errorDetails',\n\t\t\t\tT: () => PackageUpgradeError,\n\t\t\t},\n\t\t\t{ no: 9, name: 'index_error', kind: 'message', oneof: 'errorDetails', T: () => IndexError },\n\t\t\t{\n\t\t\t\tno: 10,\n\t\t\t\tname: 'object_id',\n\t\t\t\tkind: 'scalar',\n\t\t\t\toneof: 'errorDetails',\n\t\t\t\tT: 9 /*ScalarType.STRING*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 11,\n\t\t\t\tname: 'coin_deny_list_error',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'errorDetails',\n\t\t\t\tT: () => CoinDenyListError,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 12,\n\t\t\t\tname: 'congested_objects',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'errorDetails',\n\t\t\t\tT: () => CongestedObjects,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ExecutionError>): ExecutionError {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.errorDetails = { oneofKind: undefined };\n\t\tif (value !== undefined) reflectionMergePartial<ExecutionError>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ExecutionError,\n\t): ExecutionError {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string description */ 1:\n\t\t\t\t\tmessage.description = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 command */ 2:\n\t\t\t\t\tmessage.command = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.ExecutionError.ExecutionErrorKind kind */ 3:\n\t\t\t\t\tmessage.kind = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.MoveAbort abort */ 4:\n\t\t\t\t\tmessage.errorDetails = {\n\t\t\t\t\t\toneofKind: 'abort',\n\t\t\t\t\t\tabort: MoveAbort.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.errorDetails as any).abort,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.SizeError size_error */ 5:\n\t\t\t\t\tmessage.errorDetails = {\n\t\t\t\t\t\toneofKind: 'sizeError',\n\t\t\t\t\t\tsizeError: SizeError.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.errorDetails as any).sizeError,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.CommandArgumentError command_argument_error */ 6:\n\t\t\t\t\tmessage.errorDetails = {\n\t\t\t\t\t\toneofKind: 'commandArgumentError',\n\t\t\t\t\t\tcommandArgumentError: CommandArgumentError.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.errorDetails as any).commandArgumentError,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.TypeArgumentError type_argument_error */ 7:\n\t\t\t\t\tmessage.errorDetails = {\n\t\t\t\t\t\toneofKind: 'typeArgumentError',\n\t\t\t\t\t\ttypeArgumentError: TypeArgumentError.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.errorDetails as any).typeArgumentError,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.PackageUpgradeError package_upgrade_error */ 8:\n\t\t\t\t\tmessage.errorDetails = {\n\t\t\t\t\t\toneofKind: 'packageUpgradeError',\n\t\t\t\t\t\tpackageUpgradeError: PackageUpgradeError.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.errorDetails as any).packageUpgradeError,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.IndexError index_error */ 9:\n\t\t\t\t\tmessage.errorDetails = {\n\t\t\t\t\t\toneofKind: 'indexError',\n\t\t\t\t\t\tindexError: IndexError.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.errorDetails as any).indexError,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* string object_id */ 10:\n\t\t\t\t\tmessage.errorDetails = {\n\t\t\t\t\t\toneofKind: 'objectId',\n\t\t\t\t\t\tobjectId: reader.string(),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.CoinDenyListError coin_deny_list_error */ 11:\n\t\t\t\t\tmessage.errorDetails = {\n\t\t\t\t\t\toneofKind: 'coinDenyListError',\n\t\t\t\t\t\tcoinDenyListError: CoinDenyListError.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.errorDetails as any).coinDenyListError,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.CongestedObjects congested_objects */ 12:\n\t\t\t\t\tmessage.errorDetails = {\n\t\t\t\t\t\toneofKind: 'congestedObjects',\n\t\t\t\t\t\tcongestedObjects: CongestedObjects.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.errorDetails as any).congestedObjects,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ExecutionError,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string description = 1; */\n\t\tif (message.description !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).string(message.description);\n\t\t/* optional uint64 command = 2; */\n\t\tif (message.command !== undefined) writer.tag(2, WireType.Varint).uint64(message.command);\n\t\t/* optional sui.rpc.v2beta2.ExecutionError.ExecutionErrorKind kind = 3; */\n\t\tif (message.kind !== undefined) writer.tag(3, WireType.Varint).int32(message.kind);\n\t\t/* sui.rpc.v2beta2.MoveAbort abort = 4; */\n\t\tif (message.errorDetails.oneofKind === 'abort')\n\t\t\tMoveAbort.internalBinaryWrite(\n\t\t\t\tmessage.errorDetails.abort,\n\t\t\t\twriter.tag(4, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.SizeError size_error = 5; */\n\t\tif (message.errorDetails.oneofKind === 'sizeError')\n\t\t\tSizeError.internalBinaryWrite(\n\t\t\t\tmessage.errorDetails.sizeError,\n\t\t\t\twriter.tag(5, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.CommandArgumentError command_argument_error = 6; */\n\t\tif (message.errorDetails.oneofKind === 'commandArgumentError')\n\t\t\tCommandArgumentError.internalBinaryWrite(\n\t\t\t\tmessage.errorDetails.commandArgumentError,\n\t\t\t\twriter.tag(6, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.TypeArgumentError type_argument_error = 7; */\n\t\tif (message.errorDetails.oneofKind === 'typeArgumentError')\n\t\t\tTypeArgumentError.internalBinaryWrite(\n\t\t\t\tmessage.errorDetails.typeArgumentError,\n\t\t\t\twriter.tag(7, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.PackageUpgradeError package_upgrade_error = 8; */\n\t\tif (message.errorDetails.oneofKind === 'packageUpgradeError')\n\t\t\tPackageUpgradeError.internalBinaryWrite(\n\t\t\t\tmessage.errorDetails.packageUpgradeError,\n\t\t\t\twriter.tag(8, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.IndexError index_error = 9; */\n\t\tif (message.errorDetails.oneofKind === 'indexError')\n\t\t\tIndexError.internalBinaryWrite(\n\t\t\t\tmessage.errorDetails.indexError,\n\t\t\t\twriter.tag(9, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* string object_id = 10; */\n\t\tif (message.errorDetails.oneofKind === 'objectId')\n\t\t\twriter.tag(10, WireType.LengthDelimited).string(message.errorDetails.objectId);\n\t\t/* sui.rpc.v2beta2.CoinDenyListError coin_deny_list_error = 11; */\n\t\tif (message.errorDetails.oneofKind === 'coinDenyListError')\n\t\t\tCoinDenyListError.internalBinaryWrite(\n\t\t\t\tmessage.errorDetails.coinDenyListError,\n\t\t\t\twriter.tag(11, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.CongestedObjects congested_objects = 12; */\n\t\tif (message.errorDetails.oneofKind === 'congestedObjects')\n\t\t\tCongestedObjects.internalBinaryWrite(\n\t\t\t\tmessage.errorDetails.congestedObjects,\n\t\t\t\twriter.tag(12, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ExecutionError\n */\nexport const ExecutionError = new ExecutionError$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MoveAbort$Type extends MessageType<MoveAbort> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.MoveAbort', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'abort_code',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 2, name: 'location', kind: 'message', T: () => MoveLocation },\n\t\t\t{ no: 3, name: 'clever_error', kind: 'message', T: () => CleverError },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<MoveAbort>): MoveAbort {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<MoveAbort>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: MoveAbort,\n\t): MoveAbort {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional uint64 abort_code */ 1:\n\t\t\t\t\tmessage.abortCode = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.MoveLocation location */ 2:\n\t\t\t\t\tmessage.location = MoveLocation.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.location,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.CleverError clever_error */ 3:\n\t\t\t\t\tmessage.cleverError = CleverError.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.cleverError,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: MoveAbort,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional uint64 abort_code = 1; */\n\t\tif (message.abortCode !== undefined) writer.tag(1, WireType.Varint).uint64(message.abortCode);\n\t\t/* optional sui.rpc.v2beta2.MoveLocation location = 2; */\n\t\tif (message.location)\n\t\t\tMoveLocation.internalBinaryWrite(\n\t\t\t\tmessage.location,\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.CleverError clever_error = 3; */\n\t\tif (message.cleverError)\n\t\t\tCleverError.internalBinaryWrite(\n\t\t\t\tmessage.cleverError,\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.MoveAbort\n */\nexport const MoveAbort = new MoveAbort$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MoveLocation$Type extends MessageType<MoveLocation> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.MoveLocation', [\n\t\t\t{ no: 1, name: 'package', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'module', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 3, name: 'function', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t\t{ no: 4, name: 'instruction', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t\t{ no: 5, name: 'function_name', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<MoveLocation>): MoveLocation {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<MoveLocation>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: MoveLocation,\n\t): MoveLocation {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string package */ 1:\n\t\t\t\t\tmessage.package = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string module */ 2:\n\t\t\t\t\tmessage.module = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint32 function */ 3:\n\t\t\t\t\tmessage.function = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint32 instruction */ 4:\n\t\t\t\t\tmessage.instruction = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string function_name */ 5:\n\t\t\t\t\tmessage.functionName = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: MoveLocation,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string package = 1; */\n\t\tif (message.package !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).string(message.package);\n\t\t/* optional string module = 2; */\n\t\tif (message.module !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.module);\n\t\t/* optional uint32 function = 3; */\n\t\tif (message.function !== undefined) writer.tag(3, WireType.Varint).uint32(message.function);\n\t\t/* optional uint32 instruction = 4; */\n\t\tif (message.instruction !== undefined)\n\t\t\twriter.tag(4, WireType.Varint).uint32(message.instruction);\n\t\t/* optional string function_name = 5; */\n\t\tif (message.functionName !== undefined)\n\t\t\twriter.tag(5, WireType.LengthDelimited).string(message.functionName);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.MoveLocation\n */\nexport const MoveLocation = new MoveLocation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CleverError$Type extends MessageType<CleverError> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.CleverError', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'error_code',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'line_number',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 3, name: 'constant_name', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 4, name: 'constant_type', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 5, name: 'rendered', kind: 'scalar', oneof: 'value', T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 6, name: 'raw', kind: 'scalar', oneof: 'value', T: 12 /*ScalarType.BYTES*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<CleverError>): CleverError {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.value = { oneofKind: undefined };\n\t\tif (value !== undefined) reflectionMergePartial<CleverError>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: CleverError,\n\t): CleverError {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional uint64 error_code */ 1:\n\t\t\t\t\tmessage.errorCode = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 line_number */ 2:\n\t\t\t\t\tmessage.lineNumber = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string constant_name */ 3:\n\t\t\t\t\tmessage.constantName = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string constant_type */ 4:\n\t\t\t\t\tmessage.constantType = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* string rendered */ 5:\n\t\t\t\t\tmessage.value = {\n\t\t\t\t\t\toneofKind: 'rendered',\n\t\t\t\t\t\trendered: reader.string(),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* bytes raw */ 6:\n\t\t\t\t\tmessage.value = {\n\t\t\t\t\t\toneofKind: 'raw',\n\t\t\t\t\t\traw: reader.bytes(),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: CleverError,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional uint64 error_code = 1; */\n\t\tif (message.errorCode !== undefined) writer.tag(1, WireType.Varint).uint64(message.errorCode);\n\t\t/* optional uint64 line_number = 2; */\n\t\tif (message.lineNumber !== undefined) writer.tag(2, WireType.Varint).uint64(message.lineNumber);\n\t\t/* optional string constant_name = 3; */\n\t\tif (message.constantName !== undefined)\n\t\t\twriter.tag(3, WireType.LengthDelimited).string(message.constantName);\n\t\t/* optional string constant_type = 4; */\n\t\tif (message.constantType !== undefined)\n\t\t\twriter.tag(4, WireType.LengthDelimited).string(message.constantType);\n\t\t/* string rendered = 5; */\n\t\tif (message.value.oneofKind === 'rendered')\n\t\t\twriter.tag(5, WireType.LengthDelimited).string(message.value.rendered);\n\t\t/* bytes raw = 6; */\n\t\tif (message.value.oneofKind === 'raw')\n\t\t\twriter.tag(6, WireType.LengthDelimited).bytes(message.value.raw);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.CleverError\n */\nexport const CleverError = new CleverError$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SizeError$Type extends MessageType<SizeError> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.SizeError', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'size',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'max_size',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<SizeError>): SizeError {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<SizeError>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: SizeError,\n\t): SizeError {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional uint64 size */ 1:\n\t\t\t\t\tmessage.size = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 max_size */ 2:\n\t\t\t\t\tmessage.maxSize = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: SizeError,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional uint64 size = 1; */\n\t\tif (message.size !== undefined) writer.tag(1, WireType.Varint).uint64(message.size);\n\t\t/* optional uint64 max_size = 2; */\n\t\tif (message.maxSize !== undefined) writer.tag(2, WireType.Varint).uint64(message.maxSize);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.SizeError\n */\nexport const SizeError = new SizeError$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IndexError$Type extends MessageType<IndexError> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.IndexError', [\n\t\t\t{ no: 1, name: 'index', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t\t{ no: 2, name: 'subresult', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<IndexError>): IndexError {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<IndexError>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: IndexError,\n\t): IndexError {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional uint32 index */ 1:\n\t\t\t\t\tmessage.index = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint32 subresult */ 2:\n\t\t\t\t\tmessage.subresult = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: IndexError,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional uint32 index = 1; */\n\t\tif (message.index !== undefined) writer.tag(1, WireType.Varint).uint32(message.index);\n\t\t/* optional uint32 subresult = 2; */\n\t\tif (message.subresult !== undefined) writer.tag(2, WireType.Varint).uint32(message.subresult);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.IndexError\n */\nexport const IndexError = new IndexError$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CoinDenyListError$Type extends MessageType<CoinDenyListError> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.CoinDenyListError', [\n\t\t\t{ no: 1, name: 'address', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'coin_type', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<CoinDenyListError>): CoinDenyListError {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<CoinDenyListError>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: CoinDenyListError,\n\t): CoinDenyListError {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string address */ 1:\n\t\t\t\t\tmessage.address = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string coin_type */ 2:\n\t\t\t\t\tmessage.coinType = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: CoinDenyListError,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string address = 1; */\n\t\tif (message.address !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).string(message.address);\n\t\t/* optional string coin_type = 2; */\n\t\tif (message.coinType !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.coinType);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.CoinDenyListError\n */\nexport const CoinDenyListError = new CoinDenyListError$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CongestedObjects$Type extends MessageType<CongestedObjects> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.CongestedObjects', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'objects',\n\t\t\t\tkind: 'scalar',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: 9 /*ScalarType.STRING*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<CongestedObjects>): CongestedObjects {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.objects = [];\n\t\tif (value !== undefined) reflectionMergePartial<CongestedObjects>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: CongestedObjects,\n\t): CongestedObjects {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* repeated string objects */ 1:\n\t\t\t\t\tmessage.objects.push(reader.string());\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: CongestedObjects,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* repeated string objects = 1; */\n\t\tfor (let i = 0; i < message.objects.length; i++)\n\t\t\twriter.tag(1, WireType.LengthDelimited).string(message.objects[i]);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.CongestedObjects\n */\nexport const CongestedObjects = new CongestedObjects$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CommandArgumentError$Type extends MessageType<CommandArgumentError> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.CommandArgumentError', [\n\t\t\t{ no: 1, name: 'argument', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'kind',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => [\n\t\t\t\t\t'sui.rpc.v2beta2.CommandArgumentError.CommandArgumentErrorKind',\n\t\t\t\t\tCommandArgumentError_CommandArgumentErrorKind,\n\t\t\t\t],\n\t\t\t},\n\t\t\t{ no: 3, name: 'index_error', kind: 'message', T: () => IndexError },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<CommandArgumentError>): CommandArgumentError {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<CommandArgumentError>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: CommandArgumentError,\n\t): CommandArgumentError {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional uint32 argument */ 1:\n\t\t\t\t\tmessage.argument = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.CommandArgumentError.CommandArgumentErrorKind kind */ 2:\n\t\t\t\t\tmessage.kind = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.IndexError index_error */ 3:\n\t\t\t\t\tmessage.indexError = IndexError.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.indexError,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: CommandArgumentError,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional uint32 argument = 1; */\n\t\tif (message.argument !== undefined) writer.tag(1, WireType.Varint).uint32(message.argument);\n\t\t/* optional sui.rpc.v2beta2.CommandArgumentError.CommandArgumentErrorKind kind = 2; */\n\t\tif (message.kind !== undefined) writer.tag(2, WireType.Varint).int32(message.kind);\n\t\t/* optional sui.rpc.v2beta2.IndexError index_error = 3; */\n\t\tif (message.indexError)\n\t\t\tIndexError.internalBinaryWrite(\n\t\t\t\tmessage.indexError,\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.CommandArgumentError\n */\nexport const CommandArgumentError = new CommandArgumentError$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PackageUpgradeError$Type extends MessageType<PackageUpgradeError> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.PackageUpgradeError', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'kind',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => [\n\t\t\t\t\t'sui.rpc.v2beta2.PackageUpgradeError.PackageUpgradeErrorKind',\n\t\t\t\t\tPackageUpgradeError_PackageUpgradeErrorKind,\n\t\t\t\t],\n\t\t\t},\n\t\t\t{ no: 2, name: 'package_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 3, name: 'digest', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 4, name: 'policy', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t\t{ no: 5, name: 'ticket_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<PackageUpgradeError>): PackageUpgradeError {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<PackageUpgradeError>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: PackageUpgradeError,\n\t): PackageUpgradeError {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.PackageUpgradeError.PackageUpgradeErrorKind kind */ 1:\n\t\t\t\t\tmessage.kind = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string package_id */ 2:\n\t\t\t\t\tmessage.packageId = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string digest */ 3:\n\t\t\t\t\tmessage.digest = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint32 policy */ 4:\n\t\t\t\t\tmessage.policy = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string ticket_id */ 5:\n\t\t\t\t\tmessage.ticketId = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: PackageUpgradeError,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.PackageUpgradeError.PackageUpgradeErrorKind kind = 1; */\n\t\tif (message.kind !== undefined) writer.tag(1, WireType.Varint).int32(message.kind);\n\t\t/* optional string package_id = 2; */\n\t\tif (message.packageId !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.packageId);\n\t\t/* optional string digest = 3; */\n\t\tif (message.digest !== undefined)\n\t\t\twriter.tag(3, WireType.LengthDelimited).string(message.digest);\n\t\t/* optional uint32 policy = 4; */\n\t\tif (message.policy !== undefined) writer.tag(4, WireType.Varint).uint32(message.policy);\n\t\t/* optional string ticket_id = 5; */\n\t\tif (message.ticketId !== undefined)\n\t\t\twriter.tag(5, WireType.LengthDelimited).string(message.ticketId);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.PackageUpgradeError\n */\nexport const PackageUpgradeError = new PackageUpgradeError$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TypeArgumentError$Type extends MessageType<TypeArgumentError> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.TypeArgumentError', [\n\t\t\t{ no: 1, name: 'type_argument', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'kind',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => [\n\t\t\t\t\t'sui.rpc.v2beta2.TypeArgumentError.TypeArgumentErrorKind',\n\t\t\t\t\tTypeArgumentError_TypeArgumentErrorKind,\n\t\t\t\t],\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<TypeArgumentError>): TypeArgumentError {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<TypeArgumentError>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: TypeArgumentError,\n\t): TypeArgumentError {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional uint32 type_argument */ 1:\n\t\t\t\t\tmessage.typeArgument = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.TypeArgumentError.TypeArgumentErrorKind kind */ 2:\n\t\t\t\t\tmessage.kind = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: TypeArgumentError,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional uint32 type_argument = 1; */\n\t\tif (message.typeArgument !== undefined)\n\t\t\twriter.tag(1, WireType.Varint).uint32(message.typeArgument);\n\t\t/* optional sui.rpc.v2beta2.TypeArgumentError.TypeArgumentErrorKind kind = 2; */\n\t\tif (message.kind !== undefined) writer.tag(2, WireType.Varint).int32(message.kind);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.TypeArgumentError\n */\nexport const TypeArgumentError = new TypeArgumentError$Type();\n"],
  "mappings": "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",
  "names": ["import_runtime", "ExecutionError_ExecutionErrorKind", "CommandArgumentError_CommandArgumentErrorKind", "PackageUpgradeError_PackageUpgradeErrorKind", "TypeArgumentError_TypeArgumentErrorKind"]
}
