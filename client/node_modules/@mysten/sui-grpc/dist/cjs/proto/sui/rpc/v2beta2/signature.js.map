{
  "version": 3,
  "sources": ["../../../../../../src/proto/sui/rpc/v2beta2/signature.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport type { BinaryWriteOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryWriter } from '@protobuf-ts/runtime';\nimport { WireType } from '@protobuf-ts/runtime';\nimport type { BinaryReadOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryReader } from '@protobuf-ts/runtime';\nimport { UnknownFieldHandler } from '@protobuf-ts/runtime';\nimport type { PartialMessage } from '@protobuf-ts/runtime';\nimport { reflectionMergePartial } from '@protobuf-ts/runtime';\nimport { MessageType } from '@protobuf-ts/runtime';\nimport { SignatureScheme } from './signature_scheme.js';\nimport { Bcs } from './bcs.js';\n/**\n * A signature from a user.\n *\n * @generated from protobuf message sui.rpc.v2beta2.UserSignature\n */\nexport interface UserSignature {\n\t/**\n\t * This signature serialized as as BCS.\n\t *\n\t * When provided as input this will support both the form that is length\n\t * prefixed as well as not length prefixed.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Bcs bcs = 1\n\t */\n\tbcs?: Bcs;\n\t/**\n\t * The signature scheme of this signature.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.SignatureScheme scheme = 2\n\t */\n\tscheme?: SignatureScheme;\n\t/**\n\t * @generated from protobuf oneof: signature\n\t */\n\tsignature:\n\t\t| {\n\t\t\t\toneofKind: 'simple';\n\t\t\t\t/**\n\t\t\t\t * Simple signature if scheme is ed25519 | secp256k1 | secp256r1.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.SimpleSignature simple = 3\n\t\t\t\t */\n\t\t\t\tsimple: SimpleSignature;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'multisig';\n\t\t\t\t/**\n\t\t\t\t * The multisig aggregated signature if scheme is `MULTISIG`.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.MultisigAggregatedSignature multisig = 4\n\t\t\t\t */\n\t\t\t\tmultisig: MultisigAggregatedSignature;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'zklogin';\n\t\t\t\t/**\n\t\t\t\t * The zklogin authenticator if scheme is `ZKLOGIN`.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.ZkLoginAuthenticator zklogin = 5\n\t\t\t\t */\n\t\t\t\tzklogin: ZkLoginAuthenticator;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'passkey';\n\t\t\t\t/**\n\t\t\t\t * The passkey authenticator if scheme is `PASSKEY`.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.PasskeyAuthenticator passkey = 6\n\t\t\t\t */\n\t\t\t\tpasskey: PasskeyAuthenticator;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: undefined;\n\t\t  };\n}\n/**\n * Either an ed25519, secp256k1 or secp256r1 signature\n *\n * @generated from protobuf message sui.rpc.v2beta2.SimpleSignature\n */\nexport interface SimpleSignature {\n\t/**\n\t * The signature scheme of this signature.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.SignatureScheme scheme = 1\n\t */\n\tscheme?: SignatureScheme;\n\t/**\n\t * Signature bytes\n\t *\n\t * @generated from protobuf field: optional bytes signature = 2\n\t */\n\tsignature?: Uint8Array;\n\t/**\n\t * Public key bytes\n\t *\n\t * @generated from protobuf field: optional bytes public_key = 3\n\t */\n\tpublicKey?: Uint8Array;\n}\n/**\n * Public key equivalent for zklogin authenticators.\n *\n * @generated from protobuf message sui.rpc.v2beta2.ZkLoginPublicIdentifier\n */\nexport interface ZkLoginPublicIdentifier {\n\t/**\n\t * @generated from protobuf field: optional string iss = 1\n\t */\n\tiss?: string;\n\t/**\n\t * base10 encoded Bn254FieldElement\n\t *\n\t * @generated from protobuf field: optional string address_seed = 2\n\t */\n\taddressSeed?: string;\n}\n/**\n * Set of valid public keys for multisig committee members.\n *\n * @generated from protobuf message sui.rpc.v2beta2.MultisigMemberPublicKey\n */\nexport interface MultisigMemberPublicKey {\n\t/**\n\t * The signature scheme of this public key.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.SignatureScheme scheme = 1\n\t */\n\tscheme?: SignatureScheme;\n\t/**\n\t * Public key bytes if scheme is ed25519 | secp256k1 | secp256r1 | passkey.\n\t *\n\t * @generated from protobuf field: optional bytes public_key = 2\n\t */\n\tpublicKey?: Uint8Array;\n\t/**\n\t * A zklogin public identifier if scheme is zklogin.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.ZkLoginPublicIdentifier zklogin = 3\n\t */\n\tzklogin?: ZkLoginPublicIdentifier;\n}\n/**\n * A member in a multisig committee.\n *\n * @generated from protobuf message sui.rpc.v2beta2.MultisigMember\n */\nexport interface MultisigMember {\n\t/**\n\t * The public key of the committee member.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.MultisigMemberPublicKey public_key = 1\n\t */\n\tpublicKey?: MultisigMemberPublicKey;\n\t/**\n\t * The weight of this member's signature.\n\t *\n\t * @generated from protobuf field: optional uint32 weight = 2\n\t */\n\tweight?: number;\n}\n/**\n * A multisig committee.\n *\n * @generated from protobuf message sui.rpc.v2beta2.MultisigCommittee\n */\nexport interface MultisigCommittee {\n\t/**\n\t * A list of committee members and their corresponding weight.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.MultisigMember members = 1\n\t */\n\tmembers: MultisigMember[];\n\t/**\n\t * The threshold of signatures needed to validate a signature from\n\t * this committee.\n\t *\n\t * @generated from protobuf field: optional uint32 threshold = 2\n\t */\n\tthreshold?: number;\n}\n/**\n * Aggregated signature from members of a multisig committee.\n *\n * @generated from protobuf message sui.rpc.v2beta2.MultisigAggregatedSignature\n */\nexport interface MultisigAggregatedSignature {\n\t/**\n\t * The plain signatures encoded with signature scheme.\n\t *\n\t * The signatures must be in the same order as they are listed in the committee.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.MultisigMemberSignature signatures = 1\n\t */\n\tsignatures: MultisigMemberSignature[];\n\t/**\n\t * Bitmap indicating which committee members contributed to the\n\t * signature.\n\t *\n\t * @generated from protobuf field: optional uint32 bitmap = 2\n\t */\n\tbitmap?: number;\n\t/**\n\t * If present, means this signature's on-chain format uses the old\n\t * legacy multisig format.\n\t *\n\t * @generated from protobuf field: repeated uint32 legacy_bitmap = 3\n\t */\n\tlegacyBitmap: number[];\n\t/**\n\t * The committee to use to validate this signature.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.MultisigCommittee committee = 4\n\t */\n\tcommittee?: MultisigCommittee;\n}\n/**\n * A signature from a member of a multisig committee.\n *\n * @generated from protobuf message sui.rpc.v2beta2.MultisigMemberSignature\n */\nexport interface MultisigMemberSignature {\n\t/**\n\t * The signature scheme of this signature.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.SignatureScheme scheme = 1\n\t */\n\tscheme?: SignatureScheme;\n\t/**\n\t * Signature bytes if scheme is ed25519 | secp256k1 | secp256r1.\n\t *\n\t * @generated from protobuf field: optional bytes signature = 2\n\t */\n\tsignature?: Uint8Array;\n\t/**\n\t * The zklogin authenticator if scheme is `ZKLOGIN`.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.ZkLoginAuthenticator zklogin = 3\n\t */\n\tzklogin?: ZkLoginAuthenticator;\n\t/**\n\t * The passkey authenticator if scheme is `PASSKEY`.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.PasskeyAuthenticator passkey = 4\n\t */\n\tpasskey?: PasskeyAuthenticator;\n}\n/**\n * A zklogin authenticator.\n *\n * @generated from protobuf message sui.rpc.v2beta2.ZkLoginAuthenticator\n */\nexport interface ZkLoginAuthenticator {\n\t/**\n\t * Zklogin proof and inputs required to perform proof verification.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.ZkLoginInputs inputs = 1\n\t */\n\tinputs?: ZkLoginInputs;\n\t/**\n\t * Maximum epoch for which the proof is valid.\n\t *\n\t * @generated from protobuf field: optional uint64 max_epoch = 2\n\t */\n\tmaxEpoch?: bigint;\n\t/**\n\t * User signature with the public key attested to by the provided proof.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.SimpleSignature signature = 3\n\t */\n\tsignature?: SimpleSignature;\n}\n/**\n * A zklogin groth16 proof and the required inputs to perform proof verification.\n *\n * @generated from protobuf message sui.rpc.v2beta2.ZkLoginInputs\n */\nexport interface ZkLoginInputs {\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.ZkLoginProof proof_points = 1\n\t */\n\tproofPoints?: ZkLoginProof;\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.ZkLoginClaim iss_base64_details = 2\n\t */\n\tissBase64Details?: ZkLoginClaim;\n\t/**\n\t * @generated from protobuf field: optional string header_base64 = 3\n\t */\n\theaderBase64?: string;\n\t/**\n\t * base10 encoded Bn254FieldElement\n\t *\n\t * @generated from protobuf field: optional string address_seed = 4\n\t */\n\taddressSeed?: string;\n}\n/**\n * A zklogin groth16 proof.\n *\n * @generated from protobuf message sui.rpc.v2beta2.ZkLoginProof\n */\nexport interface ZkLoginProof {\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.CircomG1 a = 1\n\t */\n\ta?: CircomG1;\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.CircomG2 b = 2\n\t */\n\tb?: CircomG2;\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.CircomG1 c = 3\n\t */\n\tc?: CircomG1;\n}\n/**\n * A claim of the iss in a zklogin proof.\n *\n * @generated from protobuf message sui.rpc.v2beta2.ZkLoginClaim\n */\nexport interface ZkLoginClaim {\n\t/**\n\t * @generated from protobuf field: optional string value = 1\n\t */\n\tvalue?: string;\n\t/**\n\t * @generated from protobuf field: optional uint32 index_mod_4 = 2\n\t */\n\tindexMod4?: number;\n}\n/**\n * A G1 point.\n *\n * @generated from protobuf message sui.rpc.v2beta2.CircomG1\n */\nexport interface CircomG1 {\n\t/**\n\t * base10 encoded Bn254FieldElement\n\t *\n\t * @generated from protobuf field: optional string e0 = 1\n\t */\n\te0?: string;\n\t/**\n\t * base10 encoded Bn254FieldElement\n\t *\n\t * @generated from protobuf field: optional string e1 = 2\n\t */\n\te1?: string;\n\t/**\n\t * base10 encoded Bn254FieldElement\n\t *\n\t * @generated from protobuf field: optional string e2 = 3\n\t */\n\te2?: string;\n}\n/**\n * A G2 point.\n *\n * @generated from protobuf message sui.rpc.v2beta2.CircomG2\n */\nexport interface CircomG2 {\n\t/**\n\t * base10 encoded Bn254FieldElement\n\t *\n\t * @generated from protobuf field: optional string e00 = 1\n\t */\n\te00?: string;\n\t/**\n\t * base10 encoded Bn254FieldElement\n\t *\n\t * @generated from protobuf field: optional string e01 = 2\n\t */\n\te01?: string;\n\t/**\n\t * base10 encoded Bn254FieldElement\n\t *\n\t * @generated from protobuf field: optional string e10 = 3\n\t */\n\te10?: string;\n\t/**\n\t * base10 encoded Bn254FieldElement\n\t *\n\t * @generated from protobuf field: optional string e11 = 4\n\t */\n\te11?: string;\n\t/**\n\t * base10 encoded Bn254FieldElement\n\t *\n\t * @generated from protobuf field: optional string e20 = 5\n\t */\n\te20?: string;\n\t/**\n\t * base10 encoded Bn254FieldElement\n\t *\n\t * @generated from protobuf field: optional string e21 = 6\n\t */\n\te21?: string;\n}\n/**\n * A passkey authenticator.\n *\n * See\n * [struct.PasskeyAuthenticator](https://mystenlabs.github.io/sui-rust-sdk/sui_sdk_types/struct.PasskeyAuthenticator.html#bcs)\n * for more information on the requirements on the shape of the\n * `client_data_json` field.\n *\n * @generated from protobuf message sui.rpc.v2beta2.PasskeyAuthenticator\n */\nexport interface PasskeyAuthenticator {\n\t/**\n\t * Opaque authenticator data for this passkey signature.\n\t *\n\t * See [Authenticator Data](https://www.w3.org/TR/webauthn-2/#sctn-authenticator-data) for\n\t * more information on this field.\n\t *\n\t * @generated from protobuf field: optional bytes authenticator_data = 1\n\t */\n\tauthenticatorData?: Uint8Array;\n\t/**\n\t * Structured, unparsed, JSON for this passkey signature.\n\t *\n\t * See [CollectedClientData](https://www.w3.org/TR/webauthn-2/#dictdef-collectedclientdata)\n\t * for more information on this field.\n\t *\n\t * @generated from protobuf field: optional string client_data_json = 2\n\t */\n\tclientDataJson?: string;\n\t/**\n\t * A secp256r1 signature.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.SimpleSignature signature = 3\n\t */\n\tsignature?: SimpleSignature;\n}\n/**\n * The validator set for a particular epoch.\n *\n * @generated from protobuf message sui.rpc.v2beta2.ValidatorCommittee\n */\nexport interface ValidatorCommittee {\n\t/**\n\t * The epoch where this committee governs.\n\t *\n\t * @generated from protobuf field: optional uint64 epoch = 1\n\t */\n\tepoch?: bigint;\n\t/**\n\t * The committee members.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.ValidatorCommitteeMember members = 2\n\t */\n\tmembers: ValidatorCommitteeMember[];\n}\n/**\n * A member of a validator committee.\n *\n * @generated from protobuf message sui.rpc.v2beta2.ValidatorCommitteeMember\n */\nexport interface ValidatorCommitteeMember {\n\t/**\n\t * The 96-byte Bls12381 public key for this validator.\n\t *\n\t * @generated from protobuf field: optional bytes public_key = 1\n\t */\n\tpublicKey?: Uint8Array;\n\t/**\n\t * voting weight this validator possesses.\n\t *\n\t * @generated from protobuf field: optional uint64 weight = 2\n\t */\n\tweight?: bigint;\n}\n/**\n * / An aggregated signature from multiple validators.\n *\n * @generated from protobuf message sui.rpc.v2beta2.ValidatorAggregatedSignature\n */\nexport interface ValidatorAggregatedSignature {\n\t/**\n\t * The epoch when this signature was produced.\n\t *\n\t * This can be used to lookup the `ValidatorCommittee` from this epoch\n\t * to verify this signature.\n\t *\n\t * @generated from protobuf field: optional uint64 epoch = 1\n\t */\n\tepoch?: bigint;\n\t/**\n\t * The 48-byte Bls12381 aggregated signature.\n\t *\n\t * @generated from protobuf field: optional bytes signature = 2\n\t */\n\tsignature?: Uint8Array;\n\t/**\n\t * Bitmap indicating which members of the committee contributed to\n\t * this signature.\n\t *\n\t * @generated from protobuf field: repeated uint32 bitmap = 3\n\t */\n\tbitmap: number[];\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass UserSignature$Type extends MessageType<UserSignature> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.UserSignature', [\n\t\t\t{ no: 1, name: 'bcs', kind: 'message', T: () => Bcs },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'scheme',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => ['sui.rpc.v2beta2.SignatureScheme', SignatureScheme],\n\t\t\t},\n\t\t\t{ no: 3, name: 'simple', kind: 'message', oneof: 'signature', T: () => SimpleSignature },\n\t\t\t{\n\t\t\t\tno: 4,\n\t\t\t\tname: 'multisig',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'signature',\n\t\t\t\tT: () => MultisigAggregatedSignature,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 5,\n\t\t\t\tname: 'zklogin',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'signature',\n\t\t\t\tT: () => ZkLoginAuthenticator,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 6,\n\t\t\t\tname: 'passkey',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'signature',\n\t\t\t\tT: () => PasskeyAuthenticator,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<UserSignature>): UserSignature {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.signature = { oneofKind: undefined };\n\t\tif (value !== undefined) reflectionMergePartial<UserSignature>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: UserSignature,\n\t): UserSignature {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Bcs bcs */ 1:\n\t\t\t\t\tmessage.bcs = Bcs.internalBinaryRead(reader, reader.uint32(), options, message.bcs);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.SignatureScheme scheme */ 2:\n\t\t\t\t\tmessage.scheme = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.SimpleSignature simple */ 3:\n\t\t\t\t\tmessage.signature = {\n\t\t\t\t\t\toneofKind: 'simple',\n\t\t\t\t\t\tsimple: SimpleSignature.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.signature as any).simple,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.MultisigAggregatedSignature multisig */ 4:\n\t\t\t\t\tmessage.signature = {\n\t\t\t\t\t\toneofKind: 'multisig',\n\t\t\t\t\t\tmultisig: MultisigAggregatedSignature.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.signature as any).multisig,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.ZkLoginAuthenticator zklogin */ 5:\n\t\t\t\t\tmessage.signature = {\n\t\t\t\t\t\toneofKind: 'zklogin',\n\t\t\t\t\t\tzklogin: ZkLoginAuthenticator.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.signature as any).zklogin,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.PasskeyAuthenticator passkey */ 6:\n\t\t\t\t\tmessage.signature = {\n\t\t\t\t\t\toneofKind: 'passkey',\n\t\t\t\t\t\tpasskey: PasskeyAuthenticator.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.signature as any).passkey,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: UserSignature,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.Bcs bcs = 1; */\n\t\tif (message.bcs)\n\t\t\tBcs.internalBinaryWrite(\n\t\t\t\tmessage.bcs,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.SignatureScheme scheme = 2; */\n\t\tif (message.scheme !== undefined) writer.tag(2, WireType.Varint).int32(message.scheme);\n\t\t/* sui.rpc.v2beta2.SimpleSignature simple = 3; */\n\t\tif (message.signature.oneofKind === 'simple')\n\t\t\tSimpleSignature.internalBinaryWrite(\n\t\t\t\tmessage.signature.simple,\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.MultisigAggregatedSignature multisig = 4; */\n\t\tif (message.signature.oneofKind === 'multisig')\n\t\t\tMultisigAggregatedSignature.internalBinaryWrite(\n\t\t\t\tmessage.signature.multisig,\n\t\t\t\twriter.tag(4, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.ZkLoginAuthenticator zklogin = 5; */\n\t\tif (message.signature.oneofKind === 'zklogin')\n\t\t\tZkLoginAuthenticator.internalBinaryWrite(\n\t\t\t\tmessage.signature.zklogin,\n\t\t\t\twriter.tag(5, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.PasskeyAuthenticator passkey = 6; */\n\t\tif (message.signature.oneofKind === 'passkey')\n\t\t\tPasskeyAuthenticator.internalBinaryWrite(\n\t\t\t\tmessage.signature.passkey,\n\t\t\t\twriter.tag(6, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.UserSignature\n */\nexport const UserSignature = new UserSignature$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimpleSignature$Type extends MessageType<SimpleSignature> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.SimpleSignature', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'scheme',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => ['sui.rpc.v2beta2.SignatureScheme', SignatureScheme],\n\t\t\t},\n\t\t\t{ no: 2, name: 'signature', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{ no: 3, name: 'public_key', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<SimpleSignature>): SimpleSignature {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<SimpleSignature>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: SimpleSignature,\n\t): SimpleSignature {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.SignatureScheme scheme */ 1:\n\t\t\t\t\tmessage.scheme = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes signature */ 2:\n\t\t\t\t\tmessage.signature = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes public_key */ 3:\n\t\t\t\t\tmessage.publicKey = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: SimpleSignature,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.SignatureScheme scheme = 1; */\n\t\tif (message.scheme !== undefined) writer.tag(1, WireType.Varint).int32(message.scheme);\n\t\t/* optional bytes signature = 2; */\n\t\tif (message.signature !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).bytes(message.signature);\n\t\t/* optional bytes public_key = 3; */\n\t\tif (message.publicKey !== undefined)\n\t\t\twriter.tag(3, WireType.LengthDelimited).bytes(message.publicKey);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.SimpleSignature\n */\nexport const SimpleSignature = new SimpleSignature$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ZkLoginPublicIdentifier$Type extends MessageType<ZkLoginPublicIdentifier> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ZkLoginPublicIdentifier', [\n\t\t\t{ no: 1, name: 'iss', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'address_seed', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ZkLoginPublicIdentifier>): ZkLoginPublicIdentifier {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<ZkLoginPublicIdentifier>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ZkLoginPublicIdentifier,\n\t): ZkLoginPublicIdentifier {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string iss */ 1:\n\t\t\t\t\tmessage.iss = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string address_seed */ 2:\n\t\t\t\t\tmessage.addressSeed = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ZkLoginPublicIdentifier,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string iss = 1; */\n\t\tif (message.iss !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.iss);\n\t\t/* optional string address_seed = 2; */\n\t\tif (message.addressSeed !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.addressSeed);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ZkLoginPublicIdentifier\n */\nexport const ZkLoginPublicIdentifier = new ZkLoginPublicIdentifier$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MultisigMemberPublicKey$Type extends MessageType<MultisigMemberPublicKey> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.MultisigMemberPublicKey', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'scheme',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => ['sui.rpc.v2beta2.SignatureScheme', SignatureScheme],\n\t\t\t},\n\t\t\t{ no: 2, name: 'public_key', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{ no: 3, name: 'zklogin', kind: 'message', T: () => ZkLoginPublicIdentifier },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<MultisigMemberPublicKey>): MultisigMemberPublicKey {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<MultisigMemberPublicKey>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: MultisigMemberPublicKey,\n\t): MultisigMemberPublicKey {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.SignatureScheme scheme */ 1:\n\t\t\t\t\tmessage.scheme = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes public_key */ 2:\n\t\t\t\t\tmessage.publicKey = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.ZkLoginPublicIdentifier zklogin */ 3:\n\t\t\t\t\tmessage.zklogin = ZkLoginPublicIdentifier.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.zklogin,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: MultisigMemberPublicKey,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.SignatureScheme scheme = 1; */\n\t\tif (message.scheme !== undefined) writer.tag(1, WireType.Varint).int32(message.scheme);\n\t\t/* optional bytes public_key = 2; */\n\t\tif (message.publicKey !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).bytes(message.publicKey);\n\t\t/* optional sui.rpc.v2beta2.ZkLoginPublicIdentifier zklogin = 3; */\n\t\tif (message.zklogin)\n\t\t\tZkLoginPublicIdentifier.internalBinaryWrite(\n\t\t\t\tmessage.zklogin,\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.MultisigMemberPublicKey\n */\nexport const MultisigMemberPublicKey = new MultisigMemberPublicKey$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MultisigMember$Type extends MessageType<MultisigMember> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.MultisigMember', [\n\t\t\t{ no: 1, name: 'public_key', kind: 'message', T: () => MultisigMemberPublicKey },\n\t\t\t{ no: 2, name: 'weight', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<MultisigMember>): MultisigMember {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<MultisigMember>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: MultisigMember,\n\t): MultisigMember {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.MultisigMemberPublicKey public_key */ 1:\n\t\t\t\t\tmessage.publicKey = MultisigMemberPublicKey.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.publicKey,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint32 weight */ 2:\n\t\t\t\t\tmessage.weight = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: MultisigMember,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.MultisigMemberPublicKey public_key = 1; */\n\t\tif (message.publicKey)\n\t\t\tMultisigMemberPublicKey.internalBinaryWrite(\n\t\t\t\tmessage.publicKey,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional uint32 weight = 2; */\n\t\tif (message.weight !== undefined) writer.tag(2, WireType.Varint).uint32(message.weight);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.MultisigMember\n */\nexport const MultisigMember = new MultisigMember$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MultisigCommittee$Type extends MessageType<MultisigCommittee> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.MultisigCommittee', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'members',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => MultisigMember,\n\t\t\t},\n\t\t\t{ no: 2, name: 'threshold', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<MultisigCommittee>): MultisigCommittee {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.members = [];\n\t\tif (value !== undefined) reflectionMergePartial<MultisigCommittee>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: MultisigCommittee,\n\t): MultisigCommittee {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.MultisigMember members */ 1:\n\t\t\t\t\tmessage.members.push(MultisigMember.internalBinaryRead(reader, reader.uint32(), options));\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint32 threshold */ 2:\n\t\t\t\t\tmessage.threshold = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: MultisigCommittee,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* repeated sui.rpc.v2beta2.MultisigMember members = 1; */\n\t\tfor (let i = 0; i < message.members.length; i++)\n\t\t\tMultisigMember.internalBinaryWrite(\n\t\t\t\tmessage.members[i],\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional uint32 threshold = 2; */\n\t\tif (message.threshold !== undefined) writer.tag(2, WireType.Varint).uint32(message.threshold);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.MultisigCommittee\n */\nexport const MultisigCommittee = new MultisigCommittee$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MultisigAggregatedSignature$Type extends MessageType<MultisigAggregatedSignature> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.MultisigAggregatedSignature', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'signatures',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => MultisigMemberSignature,\n\t\t\t},\n\t\t\t{ no: 2, name: 'bitmap', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'legacy_bitmap',\n\t\t\t\tkind: 'scalar',\n\t\t\t\trepeat: 1 /*RepeatType.PACKED*/,\n\t\t\t\tT: 13 /*ScalarType.UINT32*/,\n\t\t\t},\n\t\t\t{ no: 4, name: 'committee', kind: 'message', T: () => MultisigCommittee },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<MultisigAggregatedSignature>): MultisigAggregatedSignature {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.signatures = [];\n\t\tmessage.legacyBitmap = [];\n\t\tif (value !== undefined)\n\t\t\treflectionMergePartial<MultisigAggregatedSignature>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: MultisigAggregatedSignature,\n\t): MultisigAggregatedSignature {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.MultisigMemberSignature signatures */ 1:\n\t\t\t\t\tmessage.signatures.push(\n\t\t\t\t\t\tMultisigMemberSignature.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint32 bitmap */ 2:\n\t\t\t\t\tmessage.bitmap = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated uint32 legacy_bitmap */ 3:\n\t\t\t\t\tif (wireType === WireType.LengthDelimited)\n\t\t\t\t\t\tfor (let e = reader.int32() + reader.pos; reader.pos < e; )\n\t\t\t\t\t\t\tmessage.legacyBitmap.push(reader.uint32());\n\t\t\t\t\telse message.legacyBitmap.push(reader.uint32());\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.MultisigCommittee committee */ 4:\n\t\t\t\t\tmessage.committee = MultisigCommittee.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.committee,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: MultisigAggregatedSignature,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* repeated sui.rpc.v2beta2.MultisigMemberSignature signatures = 1; */\n\t\tfor (let i = 0; i < message.signatures.length; i++)\n\t\t\tMultisigMemberSignature.internalBinaryWrite(\n\t\t\t\tmessage.signatures[i],\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional uint32 bitmap = 2; */\n\t\tif (message.bitmap !== undefined) writer.tag(2, WireType.Varint).uint32(message.bitmap);\n\t\t/* repeated uint32 legacy_bitmap = 3; */\n\t\tif (message.legacyBitmap.length) {\n\t\t\twriter.tag(3, WireType.LengthDelimited).fork();\n\t\t\tfor (let i = 0; i < message.legacyBitmap.length; i++) writer.uint32(message.legacyBitmap[i]);\n\t\t\twriter.join();\n\t\t}\n\t\t/* optional sui.rpc.v2beta2.MultisigCommittee committee = 4; */\n\t\tif (message.committee)\n\t\t\tMultisigCommittee.internalBinaryWrite(\n\t\t\t\tmessage.committee,\n\t\t\t\twriter.tag(4, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.MultisigAggregatedSignature\n */\nexport const MultisigAggregatedSignature = new MultisigAggregatedSignature$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MultisigMemberSignature$Type extends MessageType<MultisigMemberSignature> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.MultisigMemberSignature', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'scheme',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => ['sui.rpc.v2beta2.SignatureScheme', SignatureScheme],\n\t\t\t},\n\t\t\t{ no: 2, name: 'signature', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{ no: 3, name: 'zklogin', kind: 'message', T: () => ZkLoginAuthenticator },\n\t\t\t{ no: 4, name: 'passkey', kind: 'message', T: () => PasskeyAuthenticator },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<MultisigMemberSignature>): MultisigMemberSignature {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<MultisigMemberSignature>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: MultisigMemberSignature,\n\t): MultisigMemberSignature {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.SignatureScheme scheme */ 1:\n\t\t\t\t\tmessage.scheme = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes signature */ 2:\n\t\t\t\t\tmessage.signature = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.ZkLoginAuthenticator zklogin */ 3:\n\t\t\t\t\tmessage.zklogin = ZkLoginAuthenticator.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.zklogin,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.PasskeyAuthenticator passkey */ 4:\n\t\t\t\t\tmessage.passkey = PasskeyAuthenticator.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.passkey,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: MultisigMemberSignature,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.SignatureScheme scheme = 1; */\n\t\tif (message.scheme !== undefined) writer.tag(1, WireType.Varint).int32(message.scheme);\n\t\t/* optional bytes signature = 2; */\n\t\tif (message.signature !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).bytes(message.signature);\n\t\t/* optional sui.rpc.v2beta2.ZkLoginAuthenticator zklogin = 3; */\n\t\tif (message.zklogin)\n\t\t\tZkLoginAuthenticator.internalBinaryWrite(\n\t\t\t\tmessage.zklogin,\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.PasskeyAuthenticator passkey = 4; */\n\t\tif (message.passkey)\n\t\t\tPasskeyAuthenticator.internalBinaryWrite(\n\t\t\t\tmessage.passkey,\n\t\t\t\twriter.tag(4, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.MultisigMemberSignature\n */\nexport const MultisigMemberSignature = new MultisigMemberSignature$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ZkLoginAuthenticator$Type extends MessageType<ZkLoginAuthenticator> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ZkLoginAuthenticator', [\n\t\t\t{ no: 1, name: 'inputs', kind: 'message', T: () => ZkLoginInputs },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'max_epoch',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 3, name: 'signature', kind: 'message', T: () => SimpleSignature },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ZkLoginAuthenticator>): ZkLoginAuthenticator {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<ZkLoginAuthenticator>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ZkLoginAuthenticator,\n\t): ZkLoginAuthenticator {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.ZkLoginInputs inputs */ 1:\n\t\t\t\t\tmessage.inputs = ZkLoginInputs.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.inputs,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 max_epoch */ 2:\n\t\t\t\t\tmessage.maxEpoch = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.SimpleSignature signature */ 3:\n\t\t\t\t\tmessage.signature = SimpleSignature.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.signature,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ZkLoginAuthenticator,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.ZkLoginInputs inputs = 1; */\n\t\tif (message.inputs)\n\t\t\tZkLoginInputs.internalBinaryWrite(\n\t\t\t\tmessage.inputs,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional uint64 max_epoch = 2; */\n\t\tif (message.maxEpoch !== undefined) writer.tag(2, WireType.Varint).uint64(message.maxEpoch);\n\t\t/* optional sui.rpc.v2beta2.SimpleSignature signature = 3; */\n\t\tif (message.signature)\n\t\t\tSimpleSignature.internalBinaryWrite(\n\t\t\t\tmessage.signature,\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ZkLoginAuthenticator\n */\nexport const ZkLoginAuthenticator = new ZkLoginAuthenticator$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ZkLoginInputs$Type extends MessageType<ZkLoginInputs> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ZkLoginInputs', [\n\t\t\t{ no: 1, name: 'proof_points', kind: 'message', T: () => ZkLoginProof },\n\t\t\t{ no: 2, name: 'iss_base64_details', kind: 'message', T: () => ZkLoginClaim },\n\t\t\t{ no: 3, name: 'header_base64', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 4, name: 'address_seed', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ZkLoginInputs>): ZkLoginInputs {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<ZkLoginInputs>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ZkLoginInputs,\n\t): ZkLoginInputs {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.ZkLoginProof proof_points */ 1:\n\t\t\t\t\tmessage.proofPoints = ZkLoginProof.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.proofPoints,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.ZkLoginClaim iss_base64_details */ 2:\n\t\t\t\t\tmessage.issBase64Details = ZkLoginClaim.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.issBase64Details,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string header_base64 */ 3:\n\t\t\t\t\tmessage.headerBase64 = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string address_seed */ 4:\n\t\t\t\t\tmessage.addressSeed = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ZkLoginInputs,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.ZkLoginProof proof_points = 1; */\n\t\tif (message.proofPoints)\n\t\t\tZkLoginProof.internalBinaryWrite(\n\t\t\t\tmessage.proofPoints,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.ZkLoginClaim iss_base64_details = 2; */\n\t\tif (message.issBase64Details)\n\t\t\tZkLoginClaim.internalBinaryWrite(\n\t\t\t\tmessage.issBase64Details,\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional string header_base64 = 3; */\n\t\tif (message.headerBase64 !== undefined)\n\t\t\twriter.tag(3, WireType.LengthDelimited).string(message.headerBase64);\n\t\t/* optional string address_seed = 4; */\n\t\tif (message.addressSeed !== undefined)\n\t\t\twriter.tag(4, WireType.LengthDelimited).string(message.addressSeed);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ZkLoginInputs\n */\nexport const ZkLoginInputs = new ZkLoginInputs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ZkLoginProof$Type extends MessageType<ZkLoginProof> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ZkLoginProof', [\n\t\t\t{ no: 1, name: 'a', kind: 'message', T: () => CircomG1 },\n\t\t\t{ no: 2, name: 'b', kind: 'message', T: () => CircomG2 },\n\t\t\t{ no: 3, name: 'c', kind: 'message', T: () => CircomG1 },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ZkLoginProof>): ZkLoginProof {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<ZkLoginProof>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ZkLoginProof,\n\t): ZkLoginProof {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.CircomG1 a */ 1:\n\t\t\t\t\tmessage.a = CircomG1.internalBinaryRead(reader, reader.uint32(), options, message.a);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.CircomG2 b */ 2:\n\t\t\t\t\tmessage.b = CircomG2.internalBinaryRead(reader, reader.uint32(), options, message.b);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.CircomG1 c */ 3:\n\t\t\t\t\tmessage.c = CircomG1.internalBinaryRead(reader, reader.uint32(), options, message.c);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ZkLoginProof,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.CircomG1 a = 1; */\n\t\tif (message.a)\n\t\t\tCircomG1.internalBinaryWrite(\n\t\t\t\tmessage.a,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.CircomG2 b = 2; */\n\t\tif (message.b)\n\t\t\tCircomG2.internalBinaryWrite(\n\t\t\t\tmessage.b,\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.CircomG1 c = 3; */\n\t\tif (message.c)\n\t\t\tCircomG1.internalBinaryWrite(\n\t\t\t\tmessage.c,\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ZkLoginProof\n */\nexport const ZkLoginProof = new ZkLoginProof$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ZkLoginClaim$Type extends MessageType<ZkLoginClaim> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ZkLoginClaim', [\n\t\t\t{ no: 1, name: 'value', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'index_mod_4', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ZkLoginClaim>): ZkLoginClaim {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<ZkLoginClaim>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ZkLoginClaim,\n\t): ZkLoginClaim {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string value */ 1:\n\t\t\t\t\tmessage.value = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint32 index_mod_4 */ 2:\n\t\t\t\t\tmessage.indexMod4 = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ZkLoginClaim,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string value = 1; */\n\t\tif (message.value !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.value);\n\t\t/* optional uint32 index_mod_4 = 2; */\n\t\tif (message.indexMod4 !== undefined) writer.tag(2, WireType.Varint).uint32(message.indexMod4);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ZkLoginClaim\n */\nexport const ZkLoginClaim = new ZkLoginClaim$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CircomG1$Type extends MessageType<CircomG1> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.CircomG1', [\n\t\t\t{ no: 1, name: 'e0', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'e1', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 3, name: 'e2', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<CircomG1>): CircomG1 {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<CircomG1>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: CircomG1,\n\t): CircomG1 {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string e0 */ 1:\n\t\t\t\t\tmessage.e0 = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string e1 */ 2:\n\t\t\t\t\tmessage.e1 = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string e2 */ 3:\n\t\t\t\t\tmessage.e2 = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: CircomG1,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string e0 = 1; */\n\t\tif (message.e0 !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.e0);\n\t\t/* optional string e1 = 2; */\n\t\tif (message.e1 !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.e1);\n\t\t/* optional string e2 = 3; */\n\t\tif (message.e2 !== undefined) writer.tag(3, WireType.LengthDelimited).string(message.e2);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.CircomG1\n */\nexport const CircomG1 = new CircomG1$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CircomG2$Type extends MessageType<CircomG2> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.CircomG2', [\n\t\t\t{ no: 1, name: 'e00', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'e01', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 3, name: 'e10', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 4, name: 'e11', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 5, name: 'e20', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 6, name: 'e21', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<CircomG2>): CircomG2 {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<CircomG2>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: CircomG2,\n\t): CircomG2 {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string e00 */ 1:\n\t\t\t\t\tmessage.e00 = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string e01 */ 2:\n\t\t\t\t\tmessage.e01 = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string e10 */ 3:\n\t\t\t\t\tmessage.e10 = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string e11 */ 4:\n\t\t\t\t\tmessage.e11 = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string e20 */ 5:\n\t\t\t\t\tmessage.e20 = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string e21 */ 6:\n\t\t\t\t\tmessage.e21 = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: CircomG2,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string e00 = 1; */\n\t\tif (message.e00 !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.e00);\n\t\t/* optional string e01 = 2; */\n\t\tif (message.e01 !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.e01);\n\t\t/* optional string e10 = 3; */\n\t\tif (message.e10 !== undefined) writer.tag(3, WireType.LengthDelimited).string(message.e10);\n\t\t/* optional string e11 = 4; */\n\t\tif (message.e11 !== undefined) writer.tag(4, WireType.LengthDelimited).string(message.e11);\n\t\t/* optional string e20 = 5; */\n\t\tif (message.e20 !== undefined) writer.tag(5, WireType.LengthDelimited).string(message.e20);\n\t\t/* optional string e21 = 6; */\n\t\tif (message.e21 !== undefined) writer.tag(6, WireType.LengthDelimited).string(message.e21);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.CircomG2\n */\nexport const CircomG2 = new CircomG2$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PasskeyAuthenticator$Type extends MessageType<PasskeyAuthenticator> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.PasskeyAuthenticator', [\n\t\t\t{ no: 1, name: 'authenticator_data', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{ no: 2, name: 'client_data_json', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 3, name: 'signature', kind: 'message', T: () => SimpleSignature },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<PasskeyAuthenticator>): PasskeyAuthenticator {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<PasskeyAuthenticator>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: PasskeyAuthenticator,\n\t): PasskeyAuthenticator {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional bytes authenticator_data */ 1:\n\t\t\t\t\tmessage.authenticatorData = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string client_data_json */ 2:\n\t\t\t\t\tmessage.clientDataJson = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.SimpleSignature signature */ 3:\n\t\t\t\t\tmessage.signature = SimpleSignature.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.signature,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: PasskeyAuthenticator,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional bytes authenticator_data = 1; */\n\t\tif (message.authenticatorData !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).bytes(message.authenticatorData);\n\t\t/* optional string client_data_json = 2; */\n\t\tif (message.clientDataJson !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.clientDataJson);\n\t\t/* optional sui.rpc.v2beta2.SimpleSignature signature = 3; */\n\t\tif (message.signature)\n\t\t\tSimpleSignature.internalBinaryWrite(\n\t\t\t\tmessage.signature,\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.PasskeyAuthenticator\n */\nexport const PasskeyAuthenticator = new PasskeyAuthenticator$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ValidatorCommittee$Type extends MessageType<ValidatorCommittee> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ValidatorCommittee', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'epoch',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'members',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => ValidatorCommitteeMember,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ValidatorCommittee>): ValidatorCommittee {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.members = [];\n\t\tif (value !== undefined) reflectionMergePartial<ValidatorCommittee>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ValidatorCommittee,\n\t): ValidatorCommittee {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional uint64 epoch */ 1:\n\t\t\t\t\tmessage.epoch = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.ValidatorCommitteeMember members */ 2:\n\t\t\t\t\tmessage.members.push(\n\t\t\t\t\t\tValidatorCommitteeMember.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ValidatorCommittee,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional uint64 epoch = 1; */\n\t\tif (message.epoch !== undefined) writer.tag(1, WireType.Varint).uint64(message.epoch);\n\t\t/* repeated sui.rpc.v2beta2.ValidatorCommitteeMember members = 2; */\n\t\tfor (let i = 0; i < message.members.length; i++)\n\t\t\tValidatorCommitteeMember.internalBinaryWrite(\n\t\t\t\tmessage.members[i],\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ValidatorCommittee\n */\nexport const ValidatorCommittee = new ValidatorCommittee$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ValidatorCommitteeMember$Type extends MessageType<ValidatorCommitteeMember> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ValidatorCommitteeMember', [\n\t\t\t{ no: 1, name: 'public_key', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'weight',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ValidatorCommitteeMember>): ValidatorCommitteeMember {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<ValidatorCommitteeMember>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ValidatorCommitteeMember,\n\t): ValidatorCommitteeMember {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional bytes public_key */ 1:\n\t\t\t\t\tmessage.publicKey = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 weight */ 2:\n\t\t\t\t\tmessage.weight = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ValidatorCommitteeMember,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional bytes public_key = 1; */\n\t\tif (message.publicKey !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).bytes(message.publicKey);\n\t\t/* optional uint64 weight = 2; */\n\t\tif (message.weight !== undefined) writer.tag(2, WireType.Varint).uint64(message.weight);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ValidatorCommitteeMember\n */\nexport const ValidatorCommitteeMember = new ValidatorCommitteeMember$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ValidatorAggregatedSignature$Type extends MessageType<ValidatorAggregatedSignature> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ValidatorAggregatedSignature', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'epoch',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 2, name: 'signature', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'bitmap',\n\t\t\t\tkind: 'scalar',\n\t\t\t\trepeat: 1 /*RepeatType.PACKED*/,\n\t\t\t\tT: 13 /*ScalarType.UINT32*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ValidatorAggregatedSignature>): ValidatorAggregatedSignature {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.bitmap = [];\n\t\tif (value !== undefined)\n\t\t\treflectionMergePartial<ValidatorAggregatedSignature>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ValidatorAggregatedSignature,\n\t): ValidatorAggregatedSignature {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional uint64 epoch */ 1:\n\t\t\t\t\tmessage.epoch = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes signature */ 2:\n\t\t\t\t\tmessage.signature = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated uint32 bitmap */ 3:\n\t\t\t\t\tif (wireType === WireType.LengthDelimited)\n\t\t\t\t\t\tfor (let e = reader.int32() + reader.pos; reader.pos < e; )\n\t\t\t\t\t\t\tmessage.bitmap.push(reader.uint32());\n\t\t\t\t\telse message.bitmap.push(reader.uint32());\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ValidatorAggregatedSignature,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional uint64 epoch = 1; */\n\t\tif (message.epoch !== undefined) writer.tag(1, WireType.Varint).uint64(message.epoch);\n\t\t/* optional bytes signature = 2; */\n\t\tif (message.signature !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).bytes(message.signature);\n\t\t/* repeated uint32 bitmap = 3; */\n\t\tif (message.bitmap.length) {\n\t\t\twriter.tag(3, WireType.LengthDelimited).fork();\n\t\t\tfor (let i = 0; i < message.bitmap.length; i++) writer.uint32(message.bitmap[i]);\n\t\t\twriter.join();\n\t\t}\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ValidatorAggregatedSignature\n */\nexport const ValidatorAggregatedSignature = new ValidatorAggregatedSignature$Type();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,qBAAyB;AAGzB,IAAAA,kBAAoC;AAEpC,IAAAA,kBAAuC;AACvC,IAAAA,kBAA4B;AAC5B,8BAAgC;AAChC,iBAAoB;AA8epB,MAAM,2BAA2B,4BAA2B;AAAA,EAC3D,cAAc;AACb,UAAM,iCAAiC;AAAA,MACtC,EAAE,IAAI,GAAG,MAAM,OAAO,MAAM,WAAW,GAAG,MAAM,eAAI;AAAA,MACpD;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG,MAAM,CAAC,mCAAmC,uCAAe;AAAA,MAC7D;AAAA,MACA,EAAE,IAAI,GAAG,MAAM,UAAU,MAAM,WAAW,OAAO,aAAa,GAAG,MAAM,gBAAgB;AAAA,MACvF;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,GAAG,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,GAAG,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,GAAG,MAAM;AAAA,MACV;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAsD;AAC5D,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,YAAY,EAAE,WAAW,OAAU;AAC3C,QAAI,UAAU,OAAW,6CAAsC,MAAM,SAAS,KAAK;AACnF,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACgB;AAChB,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAA4C;AAC3C,kBAAQ,MAAM,eAAI,mBAAmB,QAAQ,OAAO,OAAO,GAAG,SAAS,QAAQ,GAAG;AAClF;AAAA,QACD;AAAA,QAA2D;AAC1D,kBAAQ,SAAS,OAAO,MAAM;AAC9B;AAAA,QACD;AAAA,QAAkD;AACjD,kBAAQ,YAAY;AAAA,YACnB,WAAW;AAAA,YACX,QAAQ,gBAAgB;AAAA,cACvB;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,UAAkB;AAAA,YAC5B;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAAgE;AAC/D,kBAAQ,YAAY;AAAA,YACnB,WAAW;AAAA,YACX,UAAU,4BAA4B;AAAA,cACrC;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,UAAkB;AAAA,YAC5B;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAAwD;AACvD,kBAAQ,YAAY;AAAA,YACnB,WAAW;AAAA,YACX,SAAS,qBAAqB;AAAA,cAC7B;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,UAAkB;AAAA,YAC5B;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAAwD;AACvD,kBAAQ,YAAY;AAAA,YACnB,WAAW;AAAA,YACX,SAAS,qBAAqB;AAAA,cAC7B;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,UAAkB;AAAA,YAC5B;AAAA,UACD;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ;AACX,qBAAI;AAAA,QACH,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,WAAW,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,MAAM,QAAQ,MAAM;AAErF,QAAI,QAAQ,UAAU,cAAc;AACnC,sBAAgB;AAAA,QACf,QAAQ,UAAU;AAAA,QAClB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,UAAU,cAAc;AACnC,kCAA4B;AAAA,QAC3B,QAAQ,UAAU;AAAA,QAClB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,UAAU,cAAc;AACnC,2BAAqB;AAAA,QACpB,QAAQ,UAAU;AAAA,QAClB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,UAAU,cAAc;AACnC,2BAAqB;AAAA,QACpB,QAAQ,UAAU;AAAA,QAClB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,gBAAgB,IAAI,mBAAmB;AAEpD,MAAM,6BAA6B,4BAA6B;AAAA,EAC/D,cAAc;AACb,UAAM,mCAAmC;AAAA,MACxC;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG,MAAM,CAAC,mCAAmC,uCAAe;AAAA,MAC7D;AAAA,MACA;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAa,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAClF;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAc,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,IACpF,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA0D;AAChE,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAAwC,MAAM,SAAS,KAAK;AACrF,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACkB;AAClB,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAA2D;AAC1D,kBAAQ,SAAS,OAAO,MAAM;AAC9B;AAAA,QACD;AAAA,QAAoC;AACnC,kBAAQ,YAAY,OAAO,MAAM;AACjC;AAAA,QACD;AAAA,QAAqC;AACpC,kBAAQ,YAAY,OAAO,MAAM;AACjC;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,WAAW,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,MAAM,QAAQ,MAAM;AAErF,QAAI,QAAQ,cAAc;AACzB,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,MAAM,QAAQ,SAAS;AAEhE,QAAI,QAAQ,cAAc;AACzB,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,MAAM,QAAQ,SAAS;AAChE,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,kBAAkB,IAAI,qBAAqB;AAExD,MAAM,qCAAqC,4BAAqC;AAAA,EAC/E,cAAc;AACb,UAAM,2CAA2C;AAAA,MAChD;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAO,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAC5E;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAgB,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,IACtF,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA0E;AAChF,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAAgD,MAAM,SAAS,KAAK;AAC7F,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QAC0B;AAC1B,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAA+B;AAC9B,kBAAQ,MAAM,OAAO,OAAO;AAC5B;AAAA,QACD;AAAA,QAAwC;AACvC,kBAAQ,cAAc,OAAO,OAAO;AACpC;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,QAAQ,OAAW,QAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,GAAG;AAEzF,QAAI,QAAQ,gBAAgB;AAC3B,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,WAAW;AACnE,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,0BAA0B,IAAI,6BAA6B;AAExE,MAAM,qCAAqC,4BAAqC;AAAA,EAC/E,cAAc;AACb,UAAM,2CAA2C;AAAA,MAChD;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG,MAAM,CAAC,mCAAmC,uCAAe;AAAA,MAC7D;AAAA,MACA;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAc,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MACnF,EAAE,IAAI,GAAG,MAAM,WAAW,MAAM,WAAW,GAAG,MAAM,wBAAwB;AAAA,IAC7E,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA0E;AAChF,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAAgD,MAAM,SAAS,KAAK;AAC7F,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QAC0B;AAC1B,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAA2D;AAC1D,kBAAQ,SAAS,OAAO,MAAM;AAC9B;AAAA,QACD;AAAA,QAAqC;AACpC,kBAAQ,YAAY,OAAO,MAAM;AACjC;AAAA,QACD;AAAA,QAAoE;AACnE,kBAAQ,UAAU,wBAAwB;AAAA,YACzC;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,WAAW,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,MAAM,QAAQ,MAAM;AAErF,QAAI,QAAQ,cAAc;AACzB,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,MAAM,QAAQ,SAAS;AAEhE,QAAI,QAAQ;AACX,8BAAwB;AAAA,QACvB,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,0BAA0B,IAAI,6BAA6B;AAExE,MAAM,4BAA4B,4BAA4B;AAAA,EAC7D,cAAc;AACb,UAAM,kCAAkC;AAAA,MACvC,EAAE,IAAI,GAAG,MAAM,cAAc,MAAM,WAAW,GAAG,MAAM,wBAAwB;AAAA,MAC/E;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAU,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAyB;AAAA,IACjF,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAwD;AAC9D,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAAuC,MAAM,SAAS,KAAK;AACpF,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACiB;AACjB,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAuE;AACtE,kBAAQ,YAAY,wBAAwB;AAAA,YAC3C;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AAAA,QAAkC;AACjC,kBAAQ,SAAS,OAAO,OAAO;AAC/B;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ;AACX,8BAAwB;AAAA,QACvB,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,WAAW,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,MAAM;AACtF,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,iBAAiB,IAAI,oBAAoB;AAEtD,MAAM,+BAA+B,4BAA+B;AAAA,EACnE,cAAc;AACb,UAAM,qCAAqC;AAAA,MAC1C;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAa,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAyB;AAAA,IACpF,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA8D;AACpE,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,UAAU,CAAC;AACnB,QAAI,UAAU,OAAW,6CAA0C,MAAM,SAAS,KAAK;AACvF,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACoB;AACpB,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAA2D;AAC1D,kBAAQ,QAAQ,KAAK,eAAe,mBAAmB,QAAQ,OAAO,OAAO,GAAG,OAAO,CAAC;AACxF;AAAA,QACD;AAAA,QAAqC;AACpC,kBAAQ,YAAY,OAAO,OAAO;AAClC;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,QAAQ;AAC3C,qBAAe;AAAA,QACd,QAAQ,QAAQ,CAAC;AAAA,QACjB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,cAAc,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,SAAS;AAC5F,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,oBAAoB,IAAI,uBAAuB;AAE5D,MAAM,yCAAyC,4BAAyC;AAAA,EACvF,cAAc;AACb,UAAM,+CAA+C;AAAA,MACpD;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAU,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAyB;AAAA,MAChF;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG;AAAA,MACJ;AAAA,MACA,EAAE,IAAI,GAAG,MAAM,aAAa,MAAM,WAAW,GAAG,MAAM,kBAAkB;AAAA,IACzE,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAkF;AACxF,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,aAAa,CAAC;AACtB,YAAQ,eAAe,CAAC;AACxB,QAAI,UAAU;AACb,kDAAoD,MAAM,SAAS,KAAK;AACzE,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QAC8B;AAC9B,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAuE;AACtE,kBAAQ,WAAW;AAAA,YAClB,wBAAwB,mBAAmB,QAAQ,OAAO,OAAO,GAAG,OAAO;AAAA,UAC5E;AACA;AAAA,QACD;AAAA,QAAkC;AACjC,kBAAQ,SAAS,OAAO,OAAO;AAC/B;AAAA,QACD;AAAA,QAAyC;AACxC,cAAI,aAAa,wBAAS;AACzB,qBAAS,IAAI,OAAO,MAAM,IAAI,OAAO,KAAK,OAAO,MAAM;AACtD,sBAAQ,aAAa,KAAK,OAAO,OAAO,CAAC;AAAA,cACtC,SAAQ,aAAa,KAAK,OAAO,OAAO,CAAC;AAC9C;AAAA,QACD;AAAA,QAAgE;AAC/D,kBAAQ,YAAY,kBAAkB;AAAA,YACrC;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,aAAS,IAAI,GAAG,IAAI,QAAQ,WAAW,QAAQ;AAC9C,8BAAwB;AAAA,QACvB,QAAQ,WAAW,CAAC;AAAA,QACpB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,WAAW,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,MAAM;AAEtF,QAAI,QAAQ,aAAa,QAAQ;AAChC,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAC7C,eAAS,IAAI,GAAG,IAAI,QAAQ,aAAa,QAAQ,IAAK,QAAO,OAAO,QAAQ,aAAa,CAAC,CAAC;AAC3F,aAAO,KAAK;AAAA,IACb;AAEA,QAAI,QAAQ;AACX,wBAAkB;AAAA,QACjB,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,8BAA8B,IAAI,iCAAiC;AAEhF,MAAM,qCAAqC,4BAAqC;AAAA,EAC/E,cAAc;AACb,UAAM,2CAA2C;AAAA,MAChD;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG,MAAM,CAAC,mCAAmC,uCAAe;AAAA,MAC7D;AAAA,MACA;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAa,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAClF,EAAE,IAAI,GAAG,MAAM,WAAW,MAAM,WAAW,GAAG,MAAM,qBAAqB;AAAA,MACzE,EAAE,IAAI,GAAG,MAAM,WAAW,MAAM,WAAW,GAAG,MAAM,qBAAqB;AAAA,IAC1E,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA0E;AAChF,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAAgD,MAAM,SAAS,KAAK;AAC7F,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QAC0B;AAC1B,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAA2D;AAC1D,kBAAQ,SAAS,OAAO,MAAM;AAC9B;AAAA,QACD;AAAA,QAAoC;AACnC,kBAAQ,YAAY,OAAO,MAAM;AACjC;AAAA,QACD;AAAA,QAAiE;AAChE,kBAAQ,UAAU,qBAAqB;AAAA,YACtC;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AAAA,QAAiE;AAChE,kBAAQ,UAAU,qBAAqB;AAAA,YACtC;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,WAAW,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,MAAM,QAAQ,MAAM;AAErF,QAAI,QAAQ,cAAc;AACzB,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,MAAM,QAAQ,SAAS;AAEhE,QAAI,QAAQ;AACX,2BAAqB;AAAA,QACpB,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ;AACX,2BAAqB;AAAA,QACpB,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,0BAA0B,IAAI,6BAA6B;AAExE,MAAM,kCAAkC,4BAAkC;AAAA,EACzE,cAAc;AACb,UAAM,wCAAwC;AAAA,MAC7C,EAAE,IAAI,GAAG,MAAM,UAAU,MAAM,WAAW,GAAG,MAAM,cAAc;AAAA,MACjE;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,MACA,EAAE,IAAI,GAAG,MAAM,aAAa,MAAM,WAAW,GAAG,MAAM,gBAAgB;AAAA,IACvE,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAoE;AAC1E,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAA6C,MAAM,SAAS,KAAK;AAC1F,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACuB;AACvB,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAyD;AACxD,kBAAQ,SAAS,cAAc;AAAA,YAC9B;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AAAA,QAAqC;AACpC,kBAAQ,WAAW,OAAO,OAAO,EAAE,SAAS;AAC5C;AAAA,QACD;AAAA,QAA8D;AAC7D,kBAAQ,YAAY,gBAAgB;AAAA,YACnC;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ;AACX,oBAAc;AAAA,QACb,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,aAAa,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,QAAQ;AAE1F,QAAI,QAAQ;AACX,sBAAgB;AAAA,QACf,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,uBAAuB,IAAI,0BAA0B;AAElE,MAAM,2BAA2B,4BAA2B;AAAA,EAC3D,cAAc;AACb,UAAM,iCAAiC;AAAA,MACtC,EAAE,IAAI,GAAG,MAAM,gBAAgB,MAAM,WAAW,GAAG,MAAM,aAAa;AAAA,MACtE,EAAE,IAAI,GAAG,MAAM,sBAAsB,MAAM,WAAW,GAAG,MAAM,aAAa;AAAA,MAC5E;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAiB,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MACtF;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAgB,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,IACtF,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAsD;AAC5D,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAAsC,MAAM,SAAS,KAAK;AACnF,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACgB;AAChB,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAA8D;AAC7D,kBAAQ,cAAc,aAAa;AAAA,YAClC;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AAAA,QAAoE;AACnE,kBAAQ,mBAAmB,aAAa;AAAA,YACvC;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AAAA,QAAyC;AACxC,kBAAQ,eAAe,OAAO,OAAO;AACrC;AAAA,QACD;AAAA,QAAwC;AACvC,kBAAQ,cAAc,OAAO,OAAO;AACpC;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ;AACX,mBAAa;AAAA,QACZ,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ;AACX,mBAAa;AAAA,QACZ,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,iBAAiB;AAC5B,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,YAAY;AAEpE,QAAI,QAAQ,gBAAgB;AAC3B,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,WAAW;AACnE,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,gBAAgB,IAAI,mBAAmB;AAEpD,MAAM,0BAA0B,4BAA0B;AAAA,EACzD,cAAc;AACb,UAAM,gCAAgC;AAAA,MACrC,EAAE,IAAI,GAAG,MAAM,KAAK,MAAM,WAAW,GAAG,MAAM,SAAS;AAAA,MACvD,EAAE,IAAI,GAAG,MAAM,KAAK,MAAM,WAAW,GAAG,MAAM,SAAS;AAAA,MACvD,EAAE,IAAI,GAAG,MAAM,KAAK,MAAM,WAAW,GAAG,MAAM,SAAS;AAAA,IACxD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAoD;AAC1D,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAAqC,MAAM,SAAS,KAAK;AAClF,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACe;AACf,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAA+C;AAC9C,kBAAQ,IAAI,SAAS,mBAAmB,QAAQ,OAAO,OAAO,GAAG,SAAS,QAAQ,CAAC;AACnF;AAAA,QACD;AAAA,QAA+C;AAC9C,kBAAQ,IAAI,SAAS,mBAAmB,QAAQ,OAAO,OAAO,GAAG,SAAS,QAAQ,CAAC;AACnF;AAAA,QACD;AAAA,QAA+C;AAC9C,kBAAQ,IAAI,SAAS,mBAAmB,QAAQ,OAAO,OAAO,GAAG,SAAS,QAAQ,CAAC;AACnF;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ;AACX,eAAS;AAAA,QACR,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ;AACX,eAAS;AAAA,QACR,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ;AACX,eAAS;AAAA,QACR,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,eAAe,IAAI,kBAAkB;AAElD,MAAM,0BAA0B,4BAA0B;AAAA,EACzD,cAAc;AACb,UAAM,gCAAgC;AAAA,MACrC;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAS,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAC9E;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAe,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAyB;AAAA,IACtF,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAoD;AAC1D,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAAqC,MAAM,SAAS,KAAK;AAClF,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACe;AACf,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAiC;AAChC,kBAAQ,QAAQ,OAAO,OAAO;AAC9B;AAAA,QACD;AAAA,QAAuC;AACtC,kBAAQ,YAAY,OAAO,OAAO;AAClC;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,UAAU,OAAW,QAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,KAAK;AAE7F,QAAI,QAAQ,cAAc,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,SAAS;AAC5F,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,eAAe,IAAI,kBAAkB;AAElD,MAAM,sBAAsB,4BAAsB;AAAA,EACjD,cAAc;AACb,UAAM,4BAA4B;AAAA,MACjC;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAM,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAC3E;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAM,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAC3E;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAM,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,IAC5E,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA4C;AAClD,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAAiC,MAAM,SAAS,KAAK;AAC9E,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACW;AACX,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAA8B;AAC7B,kBAAQ,KAAK,OAAO,OAAO;AAC3B;AAAA,QACD;AAAA,QAA8B;AAC7B,kBAAQ,KAAK,OAAO,OAAO;AAC3B;AAAA,QACD;AAAA,QAA8B;AAC7B,kBAAQ,KAAK,OAAO,OAAO;AAC3B;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,OAAO,OAAW,QAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,EAAE;AAEvF,QAAI,QAAQ,OAAO,OAAW,QAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,EAAE;AAEvF,QAAI,QAAQ,OAAO,OAAW,QAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,EAAE;AACvF,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,WAAW,IAAI,cAAc;AAE1C,MAAM,sBAAsB,4BAAsB;AAAA,EACjD,cAAc;AACb,UAAM,4BAA4B;AAAA,MACjC;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAO,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAC5E;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAO,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAC5E;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAO,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAC5E;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAO,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAC5E;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAO,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAC5E;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAO,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,IAC7E,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA4C;AAClD,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAAiC,MAAM,SAAS,KAAK;AAC9E,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACW;AACX,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAA+B;AAC9B,kBAAQ,MAAM,OAAO,OAAO;AAC5B;AAAA,QACD;AAAA,QAA+B;AAC9B,kBAAQ,MAAM,OAAO,OAAO;AAC5B;AAAA,QACD;AAAA,QAA+B;AAC9B,kBAAQ,MAAM,OAAO,OAAO;AAC5B;AAAA,QACD;AAAA,QAA+B;AAC9B,kBAAQ,MAAM,OAAO,OAAO;AAC5B;AAAA,QACD;AAAA,QAA+B;AAC9B,kBAAQ,MAAM,OAAO,OAAO;AAC5B;AAAA,QACD;AAAA,QAA+B;AAC9B,kBAAQ,MAAM,OAAO,OAAO;AAC5B;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,QAAQ,OAAW,QAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,GAAG;AAEzF,QAAI,QAAQ,QAAQ,OAAW,QAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,GAAG;AAEzF,QAAI,QAAQ,QAAQ,OAAW,QAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,GAAG;AAEzF,QAAI,QAAQ,QAAQ,OAAW,QAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,GAAG;AAEzF,QAAI,QAAQ,QAAQ,OAAW,QAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,GAAG;AAEzF,QAAI,QAAQ,QAAQ,OAAW,QAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,GAAG;AACzF,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,WAAW,IAAI,cAAc;AAE1C,MAAM,kCAAkC,4BAAkC;AAAA,EACzE,cAAc;AACb,UAAM,wCAAwC;AAAA,MAC7C;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAsB,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAC3F;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAoB,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MACzF,EAAE,IAAI,GAAG,MAAM,aAAa,MAAM,WAAW,GAAG,MAAM,gBAAgB;AAAA,IACvE,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAoE;AAC1E,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAA6C,MAAM,SAAS,KAAK;AAC1F,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACuB;AACvB,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAA6C;AAC5C,kBAAQ,oBAAoB,OAAO,MAAM;AACzC;AAAA,QACD;AAAA,QAA4C;AAC3C,kBAAQ,iBAAiB,OAAO,OAAO;AACvC;AAAA,QACD;AAAA,QAA8D;AAC7D,kBAAQ,YAAY,gBAAgB;AAAA,YACnC;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,sBAAsB;AACjC,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,MAAM,QAAQ,iBAAiB;AAExE,QAAI,QAAQ,mBAAmB;AAC9B,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,cAAc;AAEtE,QAAI,QAAQ;AACX,sBAAgB;AAAA,QACf,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,uBAAuB,IAAI,0BAA0B;AAElE,MAAM,gCAAgC,4BAAgC;AAAA,EACrE,cAAc;AACb,UAAM,sCAAsC;AAAA,MAC3C;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG,MAAM;AAAA,MACV;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAgE;AACtE,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,UAAU,CAAC;AACnB,QAAI,UAAU,OAAW,6CAA2C,MAAM,SAAS,KAAK;AACxF,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACqB;AACrB,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAiC;AAChC,kBAAQ,QAAQ,OAAO,OAAO,EAAE,SAAS;AACzC;AAAA,QACD;AAAA,QAAqE;AACpE,kBAAQ,QAAQ;AAAA,YACf,yBAAyB,mBAAmB,QAAQ,OAAO,OAAO,GAAG,OAAO;AAAA,UAC7E;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,UAAU,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,KAAK;AAEpF,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,QAAQ;AAC3C,+BAAyB;AAAA,QACxB,QAAQ,QAAQ,CAAC;AAAA,QACjB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,qBAAqB,IAAI,wBAAwB;AAE9D,MAAM,sCAAsC,4BAAsC;AAAA,EACjF,cAAc;AACb,UAAM,4CAA4C;AAAA,MACjD;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAc,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MACnF;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA4E;AAClF,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAAiD,MAAM,SAAS,KAAK;AAC9F,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QAC2B;AAC3B,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAqC;AACpC,kBAAQ,YAAY,OAAO,MAAM;AACjC;AAAA,QACD;AAAA,QAAkC;AACjC,kBAAQ,SAAS,OAAO,OAAO,EAAE,SAAS;AAC1C;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,cAAc;AACzB,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,MAAM,QAAQ,SAAS;AAEhE,QAAI,QAAQ,WAAW,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,MAAM;AACtF,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,2BAA2B,IAAI,8BAA8B;AAE1E,MAAM,0CAA0C,4BAA0C;AAAA,EACzF,cAAc;AACb,UAAM,gDAAgD;AAAA,MACrD;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAa,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAClF;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG;AAAA,MACJ;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAoF;AAC1F,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,SAAS,CAAC;AAClB,QAAI,UAAU;AACb,kDAAqD,MAAM,SAAS,KAAK;AAC1E,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QAC+B;AAC/B,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAiC;AAChC,kBAAQ,QAAQ,OAAO,OAAO,EAAE,SAAS;AACzC;AAAA,QACD;AAAA,QAAoC;AACnC,kBAAQ,YAAY,OAAO,MAAM;AACjC;AAAA,QACD;AAAA,QAAkC;AACjC,cAAI,aAAa,wBAAS;AACzB,qBAAS,IAAI,OAAO,MAAM,IAAI,OAAO,KAAK,OAAO,MAAM;AACtD,sBAAQ,OAAO,KAAK,OAAO,OAAO,CAAC;AAAA,cAChC,SAAQ,OAAO,KAAK,OAAO,OAAO,CAAC;AACxC;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,UAAU,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,KAAK;AAEpF,QAAI,QAAQ,cAAc;AACzB,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,MAAM,QAAQ,SAAS;AAEhE,QAAI,QAAQ,OAAO,QAAQ;AAC1B,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAC7C,eAAS,IAAI,GAAG,IAAI,QAAQ,OAAO,QAAQ,IAAK,QAAO,OAAO,QAAQ,OAAO,CAAC,CAAC;AAC/E,aAAO,KAAK;AAAA,IACb;AACA,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,+BAA+B,IAAI,kCAAkC;",
  "names": ["import_runtime"]
}
