{
  "version": 3,
  "sources": ["../../../../../../src/proto/sui/rpc/v2beta2/checkpoint.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport type { BinaryWriteOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryWriter } from '@protobuf-ts/runtime';\nimport { WireType } from '@protobuf-ts/runtime';\nimport type { BinaryReadOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryReader } from '@protobuf-ts/runtime';\nimport { UnknownFieldHandler } from '@protobuf-ts/runtime';\nimport type { PartialMessage } from '@protobuf-ts/runtime';\nimport { reflectionMergePartial } from '@protobuf-ts/runtime';\nimport { MessageType } from '@protobuf-ts/runtime';\nimport { ExecutedTransaction } from './executed_transaction.js';\nimport { CheckpointContents } from './checkpoint_contents.js';\nimport { ValidatorAggregatedSignature } from './signature.js';\nimport { CheckpointSummary } from './checkpoint_summary.js';\n/**\n * @generated from protobuf message sui.rpc.v2beta2.Checkpoint\n */\nexport interface Checkpoint {\n\t/**\n\t * The height of this checkpoint.\n\t *\n\t * @generated from protobuf field: optional uint64 sequence_number = 1\n\t */\n\tsequenceNumber?: bigint;\n\t/**\n\t * The digest of this Checkpoint's CheckpointSummary.\n\t *\n\t * @generated from protobuf field: optional string digest = 2\n\t */\n\tdigest?: string;\n\t/**\n\t * The `CheckpointSummary` for this checkpoint.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.CheckpointSummary summary = 3\n\t */\n\tsummary?: CheckpointSummary;\n\t/**\n\t * An aggregated quorum signature from the validator committee that\n\t * certified this checkpoint.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.ValidatorAggregatedSignature signature = 4\n\t */\n\tsignature?: ValidatorAggregatedSignature;\n\t/**\n\t * The `CheckpointContents` for this checkpoint.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.CheckpointContents contents = 5\n\t */\n\tcontents?: CheckpointContents;\n\t/**\n\t * List of transactions included in this checkpoint.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.ExecutedTransaction transactions = 6\n\t */\n\ttransactions: ExecutedTransaction[];\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Checkpoint$Type extends MessageType<Checkpoint> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.Checkpoint', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'sequence_number',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 2, name: 'digest', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 3, name: 'summary', kind: 'message', T: () => CheckpointSummary },\n\t\t\t{ no: 4, name: 'signature', kind: 'message', T: () => ValidatorAggregatedSignature },\n\t\t\t{ no: 5, name: 'contents', kind: 'message', T: () => CheckpointContents },\n\t\t\t{\n\t\t\t\tno: 6,\n\t\t\t\tname: 'transactions',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => ExecutedTransaction,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<Checkpoint>): Checkpoint {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.transactions = [];\n\t\tif (value !== undefined) reflectionMergePartial<Checkpoint>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: Checkpoint,\n\t): Checkpoint {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional uint64 sequence_number */ 1:\n\t\t\t\t\tmessage.sequenceNumber = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string digest */ 2:\n\t\t\t\t\tmessage.digest = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.CheckpointSummary summary */ 3:\n\t\t\t\t\tmessage.summary = CheckpointSummary.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.summary,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.ValidatorAggregatedSignature signature */ 4:\n\t\t\t\t\tmessage.signature = ValidatorAggregatedSignature.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.signature,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.CheckpointContents contents */ 5:\n\t\t\t\t\tmessage.contents = CheckpointContents.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.contents,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.ExecutedTransaction transactions */ 6:\n\t\t\t\t\tmessage.transactions.push(\n\t\t\t\t\t\tExecutedTransaction.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: Checkpoint,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional uint64 sequence_number = 1; */\n\t\tif (message.sequenceNumber !== undefined)\n\t\t\twriter.tag(1, WireType.Varint).uint64(message.sequenceNumber);\n\t\t/* optional string digest = 2; */\n\t\tif (message.digest !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.digest);\n\t\t/* optional sui.rpc.v2beta2.CheckpointSummary summary = 3; */\n\t\tif (message.summary)\n\t\t\tCheckpointSummary.internalBinaryWrite(\n\t\t\t\tmessage.summary,\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.ValidatorAggregatedSignature signature = 4; */\n\t\tif (message.signature)\n\t\t\tValidatorAggregatedSignature.internalBinaryWrite(\n\t\t\t\tmessage.signature,\n\t\t\t\twriter.tag(4, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.CheckpointContents contents = 5; */\n\t\tif (message.contents)\n\t\t\tCheckpointContents.internalBinaryWrite(\n\t\t\t\tmessage.contents,\n\t\t\t\twriter.tag(5, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* repeated sui.rpc.v2beta2.ExecutedTransaction transactions = 6; */\n\t\tfor (let i = 0; i < message.transactions.length; i++)\n\t\t\tExecutedTransaction.internalBinaryWrite(\n\t\t\t\tmessage.transactions[i],\n\t\t\t\twriter.tag(6, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.Checkpoint\n */\nexport const Checkpoint = new Checkpoint$Type();\n"],
  "mappings": "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",
  "names": ["import_runtime"]
}
