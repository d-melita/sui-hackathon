"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var signature_verification_service_exports = {};
__export(signature_verification_service_exports, {
  SignatureVerificationService: () => SignatureVerificationService,
  VerifySignatureRequest: () => VerifySignatureRequest,
  VerifySignatureResponse: () => VerifySignatureResponse
});
module.exports = __toCommonJS(signature_verification_service_exports);
var import_runtime_rpc = require("@protobuf-ts/runtime-rpc");
var import_runtime = require("@protobuf-ts/runtime");
var import_runtime2 = require("@protobuf-ts/runtime");
var import_runtime3 = require("@protobuf-ts/runtime");
var import_runtime4 = require("@protobuf-ts/runtime");
var import_transaction = require("./transaction.js");
var import_signature = require("./signature.js");
var import_bcs = require("./bcs.js");
class VerifySignatureRequest$Type extends import_runtime4.MessageType {
  constructor() {
    super("sui.rpc.v2beta2.VerifySignatureRequest", [
      { no: 1, name: "message", kind: "message", T: () => import_bcs.Bcs },
      { no: 2, name: "signature", kind: "message", T: () => import_signature.UserSignature },
      {
        no: 3,
        name: "address",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 4,
        name: "jwks",
        kind: "message",
        repeat: 2,
        T: () => import_transaction.ActiveJwk
      }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    message.jwks = [];
    if (value !== void 0) (0, import_runtime3.reflectionMergePartial)(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional sui.rpc.v2beta2.Bcs message */
        1:
          message.message = import_bcs.Bcs.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.message
          );
          break;
        case /* optional sui.rpc.v2beta2.UserSignature signature */
        2:
          message.signature = import_signature.UserSignature.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.signature
          );
          break;
        case /* optional string address */
        3:
          message.address = reader.string();
          break;
        case /* repeated sui.rpc.v2beta2.ActiveJwk jwks */
        4:
          message.jwks.push(import_transaction.ActiveJwk.internalBinaryRead(reader, reader.uint32(), options));
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? import_runtime2.UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.message)
      import_bcs.Bcs.internalBinaryWrite(
        message.message,
        writer.tag(1, import_runtime.WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.signature)
      import_signature.UserSignature.internalBinaryWrite(
        message.signature,
        writer.tag(2, import_runtime.WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.address !== void 0)
      writer.tag(3, import_runtime.WireType.LengthDelimited).string(message.address);
    for (let i = 0; i < message.jwks.length; i++)
      import_transaction.ActiveJwk.internalBinaryWrite(
        message.jwks[i],
        writer.tag(4, import_runtime.WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? import_runtime2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const VerifySignatureRequest = new VerifySignatureRequest$Type();
class VerifySignatureResponse$Type extends import_runtime4.MessageType {
  constructor() {
    super("sui.rpc.v2beta2.VerifySignatureResponse", [
      {
        no: 1,
        name: "is_valid",
        kind: "scalar",
        opt: true,
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 2,
        name: "reason",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0) (0, import_runtime3.reflectionMergePartial)(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bool is_valid */
        1:
          message.isValid = reader.bool();
          break;
        case /* optional string reason */
        2:
          message.reason = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? import_runtime2.UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.isValid !== void 0) writer.tag(1, import_runtime.WireType.Varint).bool(message.isValid);
    if (message.reason !== void 0)
      writer.tag(2, import_runtime.WireType.LengthDelimited).string(message.reason);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? import_runtime2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const VerifySignatureResponse = new VerifySignatureResponse$Type();
const SignatureVerificationService = new import_runtime_rpc.ServiceType(
  "sui.rpc.v2beta2.SignatureVerificationService",
  [{ name: "VerifySignature", options: {}, I: VerifySignatureRequest, O: VerifySignatureResponse }]
);
//# sourceMappingURL=signature_verification_service.js.map
