"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var move_package_service_exports = {};
__export(move_package_service_exports, {
  GetDatatypeRequest: () => GetDatatypeRequest,
  GetDatatypeResponse: () => GetDatatypeResponse,
  GetFunctionRequest: () => GetFunctionRequest,
  GetFunctionResponse: () => GetFunctionResponse,
  GetPackageRequest: () => GetPackageRequest,
  GetPackageResponse: () => GetPackageResponse,
  ListPackageVersionsRequest: () => ListPackageVersionsRequest,
  ListPackageVersionsResponse: () => ListPackageVersionsResponse,
  MovePackageService: () => MovePackageService,
  PackageVersion: () => PackageVersion
});
module.exports = __toCommonJS(move_package_service_exports);
var import_runtime_rpc = require("@protobuf-ts/runtime-rpc");
var import_runtime = require("@protobuf-ts/runtime");
var import_runtime2 = require("@protobuf-ts/runtime");
var import_runtime3 = require("@protobuf-ts/runtime");
var import_runtime4 = require("@protobuf-ts/runtime");
var import_move_package = require("./move_package.js");
var import_move_package2 = require("./move_package.js");
var import_move_package3 = require("./move_package.js");
class GetPackageRequest$Type extends import_runtime4.MessageType {
  constructor() {
    super("sui.rpc.v2beta2.GetPackageRequest", [
      {
        no: 1,
        name: "package_id",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0) (0, import_runtime3.reflectionMergePartial)(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string package_id */
        1:
          message.packageId = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? import_runtime2.UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.packageId !== void 0)
      writer.tag(1, import_runtime.WireType.LengthDelimited).string(message.packageId);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? import_runtime2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const GetPackageRequest = new GetPackageRequest$Type();
class GetPackageResponse$Type extends import_runtime4.MessageType {
  constructor() {
    super("sui.rpc.v2beta2.GetPackageResponse", [
      { no: 1, name: "package", kind: "message", T: () => import_move_package3.Package }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0) (0, import_runtime3.reflectionMergePartial)(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional sui.rpc.v2beta2.Package package */
        1:
          message.package = import_move_package3.Package.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.package
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? import_runtime2.UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.package)
      import_move_package3.Package.internalBinaryWrite(
        message.package,
        writer.tag(1, import_runtime.WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? import_runtime2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const GetPackageResponse = new GetPackageResponse$Type();
class GetDatatypeRequest$Type extends import_runtime4.MessageType {
  constructor() {
    super("sui.rpc.v2beta2.GetDatatypeRequest", [
      {
        no: 1,
        name: "package_id",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "module_name",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "name",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0) (0, import_runtime3.reflectionMergePartial)(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string package_id */
        1:
          message.packageId = reader.string();
          break;
        case /* optional string module_name */
        2:
          message.moduleName = reader.string();
          break;
        case /* optional string name */
        3:
          message.name = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? import_runtime2.UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.packageId !== void 0)
      writer.tag(1, import_runtime.WireType.LengthDelimited).string(message.packageId);
    if (message.moduleName !== void 0)
      writer.tag(2, import_runtime.WireType.LengthDelimited).string(message.moduleName);
    if (message.name !== void 0) writer.tag(3, import_runtime.WireType.LengthDelimited).string(message.name);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? import_runtime2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const GetDatatypeRequest = new GetDatatypeRequest$Type();
class GetDatatypeResponse$Type extends import_runtime4.MessageType {
  constructor() {
    super("sui.rpc.v2beta2.GetDatatypeResponse", [
      { no: 1, name: "datatype", kind: "message", T: () => import_move_package2.DatatypeDescriptor }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0) (0, import_runtime3.reflectionMergePartial)(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional sui.rpc.v2beta2.DatatypeDescriptor datatype */
        1:
          message.datatype = import_move_package2.DatatypeDescriptor.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.datatype
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? import_runtime2.UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.datatype)
      import_move_package2.DatatypeDescriptor.internalBinaryWrite(
        message.datatype,
        writer.tag(1, import_runtime.WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? import_runtime2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const GetDatatypeResponse = new GetDatatypeResponse$Type();
class GetFunctionRequest$Type extends import_runtime4.MessageType {
  constructor() {
    super("sui.rpc.v2beta2.GetFunctionRequest", [
      {
        no: 1,
        name: "package_id",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "module_name",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "name",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0) (0, import_runtime3.reflectionMergePartial)(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string package_id */
        1:
          message.packageId = reader.string();
          break;
        case /* optional string module_name */
        2:
          message.moduleName = reader.string();
          break;
        case /* optional string name */
        3:
          message.name = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? import_runtime2.UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.packageId !== void 0)
      writer.tag(1, import_runtime.WireType.LengthDelimited).string(message.packageId);
    if (message.moduleName !== void 0)
      writer.tag(2, import_runtime.WireType.LengthDelimited).string(message.moduleName);
    if (message.name !== void 0) writer.tag(3, import_runtime.WireType.LengthDelimited).string(message.name);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? import_runtime2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const GetFunctionRequest = new GetFunctionRequest$Type();
class GetFunctionResponse$Type extends import_runtime4.MessageType {
  constructor() {
    super("sui.rpc.v2beta2.GetFunctionResponse", [
      { no: 1, name: "function", kind: "message", T: () => import_move_package.FunctionDescriptor }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0) (0, import_runtime3.reflectionMergePartial)(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional sui.rpc.v2beta2.FunctionDescriptor function */
        1:
          message.function = import_move_package.FunctionDescriptor.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.function
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? import_runtime2.UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.function)
      import_move_package.FunctionDescriptor.internalBinaryWrite(
        message.function,
        writer.tag(1, import_runtime.WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? import_runtime2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const GetFunctionResponse = new GetFunctionResponse$Type();
class ListPackageVersionsRequest$Type extends import_runtime4.MessageType {
  constructor() {
    super("sui.rpc.v2beta2.ListPackageVersionsRequest", [
      {
        no: 1,
        name: "package_id",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "page_size",
        kind: "scalar",
        opt: true,
        T: 13
        /*ScalarType.UINT32*/
      },
      {
        no: 3,
        name: "page_token",
        kind: "scalar",
        opt: true,
        T: 12
        /*ScalarType.BYTES*/
      }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0)
      (0, import_runtime3.reflectionMergePartial)(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string package_id */
        1:
          message.packageId = reader.string();
          break;
        case /* optional uint32 page_size */
        2:
          message.pageSize = reader.uint32();
          break;
        case /* optional bytes page_token */
        3:
          message.pageToken = reader.bytes();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? import_runtime2.UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.packageId !== void 0)
      writer.tag(1, import_runtime.WireType.LengthDelimited).string(message.packageId);
    if (message.pageSize !== void 0) writer.tag(2, import_runtime.WireType.Varint).uint32(message.pageSize);
    if (message.pageToken !== void 0)
      writer.tag(3, import_runtime.WireType.LengthDelimited).bytes(message.pageToken);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? import_runtime2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const ListPackageVersionsRequest = new ListPackageVersionsRequest$Type();
class ListPackageVersionsResponse$Type extends import_runtime4.MessageType {
  constructor() {
    super("sui.rpc.v2beta2.ListPackageVersionsResponse", [
      {
        no: 1,
        name: "versions",
        kind: "message",
        repeat: 2,
        T: () => PackageVersion
      },
      {
        no: 2,
        name: "next_page_token",
        kind: "scalar",
        opt: true,
        T: 12
        /*ScalarType.BYTES*/
      }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    message.versions = [];
    if (value !== void 0)
      (0, import_runtime3.reflectionMergePartial)(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated sui.rpc.v2beta2.PackageVersion versions */
        1:
          message.versions.push(
            PackageVersion.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        case /* optional bytes next_page_token */
        2:
          message.nextPageToken = reader.bytes();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? import_runtime2.UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    for (let i = 0; i < message.versions.length; i++)
      PackageVersion.internalBinaryWrite(
        message.versions[i],
        writer.tag(1, import_runtime.WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.nextPageToken !== void 0)
      writer.tag(2, import_runtime.WireType.LengthDelimited).bytes(message.nextPageToken);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? import_runtime2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const ListPackageVersionsResponse = new ListPackageVersionsResponse$Type();
class PackageVersion$Type extends import_runtime4.MessageType {
  constructor() {
    super("sui.rpc.v2beta2.PackageVersion", [
      {
        no: 1,
        name: "package_id",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "version",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0) (0, import_runtime3.reflectionMergePartial)(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string package_id */
        1:
          message.packageId = reader.string();
          break;
        case /* optional uint64 version */
        2:
          message.version = reader.uint64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? import_runtime2.UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.packageId !== void 0)
      writer.tag(1, import_runtime.WireType.LengthDelimited).string(message.packageId);
    if (message.version !== void 0) writer.tag(2, import_runtime.WireType.Varint).uint64(message.version);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? import_runtime2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const PackageVersion = new PackageVersion$Type();
const MovePackageService = new import_runtime_rpc.ServiceType("sui.rpc.v2beta2.MovePackageService", [
  { name: "GetPackage", options: {}, I: GetPackageRequest, O: GetPackageResponse },
  { name: "GetDatatype", options: {}, I: GetDatatypeRequest, O: GetDatatypeResponse },
  { name: "GetFunction", options: {}, I: GetFunctionRequest, O: GetFunctionResponse },
  {
    name: "ListPackageVersions",
    options: {},
    I: ListPackageVersionsRequest,
    O: ListPackageVersionsResponse
  }
]);
//# sourceMappingURL=move_package_service.js.map
