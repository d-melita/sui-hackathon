"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var epoch_exports = {};
__export(epoch_exports, {
  Epoch: () => Epoch
});
module.exports = __toCommonJS(epoch_exports);
var import_runtime = require("@protobuf-ts/runtime");
var import_runtime2 = require("@protobuf-ts/runtime");
var import_runtime3 = require("@protobuf-ts/runtime");
var import_runtime4 = require("@protobuf-ts/runtime");
var import_protocol_config = require("./protocol_config.js");
var import_timestamp = require("../../../google/protobuf/timestamp.js");
var import_system_state = require("./system_state.js");
var import_signature = require("./signature.js");
class Epoch$Type extends import_runtime4.MessageType {
  constructor() {
    super("sui.rpc.v2beta2.Epoch", [
      {
        no: 1,
        name: "epoch",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      { no: 2, name: "committee", kind: "message", T: () => import_signature.ValidatorCommittee },
      { no: 3, name: "system_state", kind: "message", T: () => import_system_state.SystemState },
      {
        no: 4,
        name: "first_checkpoint",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      {
        no: 5,
        name: "last_checkpoint",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      { no: 6, name: "start", kind: "message", T: () => import_timestamp.Timestamp },
      { no: 7, name: "end", kind: "message", T: () => import_timestamp.Timestamp },
      {
        no: 8,
        name: "reference_gas_price",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      { no: 9, name: "protocol_config", kind: "message", T: () => import_protocol_config.ProtocolConfig }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0) (0, import_runtime3.reflectionMergePartial)(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 epoch */
        1:
          message.epoch = reader.uint64().toBigInt();
          break;
        case /* optional sui.rpc.v2beta2.ValidatorCommittee committee */
        2:
          message.committee = import_signature.ValidatorCommittee.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.committee
          );
          break;
        case /* optional sui.rpc.v2beta2.SystemState system_state */
        3:
          message.systemState = import_system_state.SystemState.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.systemState
          );
          break;
        case /* optional uint64 first_checkpoint */
        4:
          message.firstCheckpoint = reader.uint64().toBigInt();
          break;
        case /* optional uint64 last_checkpoint */
        5:
          message.lastCheckpoint = reader.uint64().toBigInt();
          break;
        case /* optional google.protobuf.Timestamp start */
        6:
          message.start = import_timestamp.Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.start
          );
          break;
        case /* optional google.protobuf.Timestamp end */
        7:
          message.end = import_timestamp.Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.end);
          break;
        case /* optional uint64 reference_gas_price */
        8:
          message.referenceGasPrice = reader.uint64().toBigInt();
          break;
        case /* optional sui.rpc.v2beta2.ProtocolConfig protocol_config */
        9:
          message.protocolConfig = import_protocol_config.ProtocolConfig.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.protocolConfig
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? import_runtime2.UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.epoch !== void 0) writer.tag(1, import_runtime.WireType.Varint).uint64(message.epoch);
    if (message.committee)
      import_signature.ValidatorCommittee.internalBinaryWrite(
        message.committee,
        writer.tag(2, import_runtime.WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.systemState)
      import_system_state.SystemState.internalBinaryWrite(
        message.systemState,
        writer.tag(3, import_runtime.WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.firstCheckpoint !== void 0)
      writer.tag(4, import_runtime.WireType.Varint).uint64(message.firstCheckpoint);
    if (message.lastCheckpoint !== void 0)
      writer.tag(5, import_runtime.WireType.Varint).uint64(message.lastCheckpoint);
    if (message.start)
      import_timestamp.Timestamp.internalBinaryWrite(
        message.start,
        writer.tag(6, import_runtime.WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.end)
      import_timestamp.Timestamp.internalBinaryWrite(
        message.end,
        writer.tag(7, import_runtime.WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.referenceGasPrice !== void 0)
      writer.tag(8, import_runtime.WireType.Varint).uint64(message.referenceGasPrice);
    if (message.protocolConfig)
      import_protocol_config.ProtocolConfig.internalBinaryWrite(
        message.protocolConfig,
        writer.tag(9, import_runtime.WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? import_runtime2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const Epoch = new Epoch$Type();
//# sourceMappingURL=epoch.js.map
