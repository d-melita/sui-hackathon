{
  "version": 3,
  "sources": ["../../../../../../src/proto/sui/rpc/v2beta2/system_state.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport type { BinaryWriteOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryWriter } from '@protobuf-ts/runtime';\nimport { WireType } from '@protobuf-ts/runtime';\nimport type { BinaryReadOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryReader } from '@protobuf-ts/runtime';\nimport { UnknownFieldHandler } from '@protobuf-ts/runtime';\nimport type { PartialMessage } from '@protobuf-ts/runtime';\nimport { reflectionMergePartial } from '@protobuf-ts/runtime';\nimport { MessageType } from '@protobuf-ts/runtime';\n/**\n * @generated from protobuf message sui.rpc.v2beta2.SystemState\n */\nexport interface SystemState {\n\t/**\n\t * The version of the system state data structure type.\n\t *\n\t * @generated from protobuf field: optional uint64 version = 1\n\t */\n\tversion?: bigint;\n\t/**\n\t * The epoch id\n\t *\n\t * @generated from protobuf field: optional uint64 epoch = 2\n\t */\n\tepoch?: bigint;\n\t/**\n\t * The protocol version\n\t *\n\t * @generated from protobuf field: optional uint64 protocol_version = 3\n\t */\n\tprotocolVersion?: bigint;\n\t/**\n\t * Information about the validators\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.ValidatorSet validators = 4\n\t */\n\tvalidators?: ValidatorSet;\n\t/**\n\t * Storage Fund info\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.StorageFund storage_fund = 5\n\t */\n\tstorageFund?: StorageFund;\n\t/**\n\t * Set of system config parameters\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.SystemParameters parameters = 6\n\t */\n\tparameters?: SystemParameters;\n\t/**\n\t * The reference gas price for this epoch\n\t *\n\t * @generated from protobuf field: optional uint64 reference_gas_price = 7\n\t */\n\treferenceGasPrice?: bigint;\n\t/**\n\t * A list of the records of validator reporting each other.\n\t *\n\t * There is an entry in this list for each validator that has been reported\n\t * at least once. Each record contains all the validators that reported\n\t * them. If a validator has never been reported they don't have a record in this list.\n\t * This lists persists across epoch: a peer continues being in a reported state until the\n\t * reporter doesn't explicitly remove their report.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.ValidatorReportRecord validator_report_records = 8\n\t */\n\tvalidatorReportRecords: ValidatorReportRecord[];\n\t/**\n\t * Schedule of stake subsidies given out each epoch.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.StakeSubsidy stake_subsidy = 9\n\t */\n\tstakeSubsidy?: StakeSubsidy;\n\t/**\n\t * Whether the system is running in a downgraded safe mode due to a non-recoverable bug.\n\t * This is set whenever we failed to execute advance_epoch, and ended up executing advance_epoch_safe_mode.\n\t * It can be reset once we are able to successfully execute advance_epoch.\n\t * The rest of the fields starting with `safe_mode_` are accumulated during safe mode\n\t * when advance_epoch_safe_mode is executed. They will eventually be processed once we\n\t * are out of safe mode.\n\t *\n\t * @generated from protobuf field: optional bool safe_mode = 10\n\t */\n\tsafeMode?: boolean;\n\t/**\n\t * Storage rewards accumulated during safe_mode\n\t *\n\t * @generated from protobuf field: optional uint64 safe_mode_storage_rewards = 11\n\t */\n\tsafeModeStorageRewards?: bigint;\n\t/**\n\t * Computation rewards accumulated during safe_mode\n\t *\n\t * @generated from protobuf field: optional uint64 safe_mode_computation_rewards = 12\n\t */\n\tsafeModeComputationRewards?: bigint;\n\t/**\n\t * Storage rebates paid out during safe_mode\n\t *\n\t * @generated from protobuf field: optional uint64 safe_mode_storage_rebates = 13\n\t */\n\tsafeModeStorageRebates?: bigint;\n\t/**\n\t * Nonrefundable storage fees accumulated during safe_mode\n\t *\n\t * @generated from protobuf field: optional uint64 safe_mode_non_refundable_storage_fee = 14\n\t */\n\tsafeModeNonRefundableStorageFee?: bigint;\n\t/**\n\t * Unix timestamp of when this this epoch started\n\t *\n\t * @generated from protobuf field: optional uint64 epoch_start_timestamp_ms = 15\n\t */\n\tepochStartTimestampMs?: bigint;\n\t/**\n\t * Any extra fields that's not defined statically.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.MoveTable extra_fields = 16\n\t */\n\textraFields?: MoveTable;\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.ValidatorReportRecord\n */\nexport interface ValidatorReportRecord {\n\t/**\n\t * The address of the validator being reported\n\t *\n\t * @generated from protobuf field: optional string reported = 1\n\t */\n\treported?: string;\n\t/**\n\t * The list of validator (addresses) that are reporting on the validator specified by `reported`\n\t *\n\t * @generated from protobuf field: repeated string reporters = 2\n\t */\n\treporters: string[];\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.SystemParameters\n */\nexport interface SystemParameters {\n\t/**\n\t * The duration of an epoch, in milliseconds.\n\t *\n\t * @generated from protobuf field: optional uint64 epoch_duration_ms = 1\n\t */\n\tepochDurationMs?: bigint;\n\t/**\n\t * The starting epoch in which stake subsidies start being paid out\n\t *\n\t * @generated from protobuf field: optional uint64 stake_subsidy_start_epoch = 2\n\t */\n\tstakeSubsidyStartEpoch?: bigint;\n\t/**\n\t * Minimum number of active validators at any moment.\n\t *\n\t * @generated from protobuf field: optional uint64 min_validator_count = 3\n\t */\n\tminValidatorCount?: bigint;\n\t/**\n\t * Maximum number of active validators at any moment.\n\t * We do not allow the number of validators in any epoch to go above this.\n\t *\n\t * @generated from protobuf field: optional uint64 max_validator_count = 4\n\t */\n\tmaxValidatorCount?: bigint;\n\t/**\n\t * Deprecated.\n\t * Lower-bound on the amount of stake required to become a validator.\n\t *\n\t * @generated from protobuf field: optional uint64 min_validator_joining_stake = 5\n\t */\n\tminValidatorJoiningStake?: bigint;\n\t/**\n\t * Deprecated.\n\t * Validators with stake amount below `validator_low_stake_threshold` are considered to\n\t * have low stake and will be escorted out of the validator set after being below this\n\t * threshold for more than `validator_low_stake_grace_period` number of epochs.\n\t *\n\t * @generated from protobuf field: optional uint64 validator_low_stake_threshold = 6\n\t */\n\tvalidatorLowStakeThreshold?: bigint;\n\t/**\n\t * Deprecated.\n\t * Validators with stake below `validator_very_low_stake_threshold` will be removed\n\t * immediately at epoch change, no grace period.\n\t *\n\t * @generated from protobuf field: optional uint64 validator_very_low_stake_threshold = 7\n\t */\n\tvalidatorVeryLowStakeThreshold?: bigint;\n\t/**\n\t * A validator can have stake below `validator_low_stake_threshold`\n\t * for this many epochs before being kicked out.\n\t *\n\t * @generated from protobuf field: optional uint64 validator_low_stake_grace_period = 8\n\t */\n\tvalidatorLowStakeGracePeriod?: bigint;\n\t/**\n\t * Any extra fields that are not defined statically.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.MoveTable extra_fields = 9\n\t */\n\textraFields?: MoveTable;\n}\n/**\n * A message that represents a Move `0x2::table::Table` or `0x2::bag::Bag`\n *\n * @generated from protobuf message sui.rpc.v2beta2.MoveTable\n */\nexport interface MoveTable {\n\t/**\n\t * The UID of the table or bag\n\t *\n\t * @generated from protobuf field: optional string id = 1\n\t */\n\tid?: string;\n\t/**\n\t * The size or number of key-value pairs in the table or bag\n\t *\n\t * @generated from protobuf field: optional uint64 size = 2\n\t */\n\tsize?: bigint;\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.StakeSubsidy\n */\nexport interface StakeSubsidy {\n\t/**\n\t * Balance of SUI set aside for stake subsidies that will be drawn down over time.\n\t *\n\t * @generated from protobuf field: optional uint64 balance = 1\n\t */\n\tbalance?: bigint;\n\t/**\n\t * Count of the number of times stake subsidies have been distributed.\n\t *\n\t * @generated from protobuf field: optional uint64 distribution_counter = 2\n\t */\n\tdistributionCounter?: bigint;\n\t/**\n\t * The amount of stake subsidy to be drawn down per distribution.\n\t * This amount decays and decreases over time.\n\t *\n\t * @generated from protobuf field: optional uint64 current_distribution_amount = 3\n\t */\n\tcurrentDistributionAmount?: bigint;\n\t/**\n\t * Number of distributions to occur before the distribution amount decays.\n\t *\n\t * @generated from protobuf field: optional uint64 stake_subsidy_period_length = 4\n\t */\n\tstakeSubsidyPeriodLength?: bigint;\n\t/**\n\t * The rate at which the distribution amount decays at the end of each\n\t * period. Expressed in basis points.\n\t *\n\t * @generated from protobuf field: optional uint32 stake_subsidy_decrease_rate = 5\n\t */\n\tstakeSubsidyDecreaseRate?: number;\n\t/**\n\t * Any extra fields that's not defined statically.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.MoveTable extra_fields = 6\n\t */\n\textraFields?: MoveTable;\n}\n/**\n * Struct representing the onchain storage fund.\n *\n * @generated from protobuf message sui.rpc.v2beta2.StorageFund\n */\nexport interface StorageFund {\n\t/**\n\t * This is the sum of `storage_rebate` of\n\t * all objects currently stored on-chain. To maintain this invariant, the only inflow of this\n\t * balance is storage charges collected from transactions, and the only outflow is storage rebates\n\t * of transactions, including both the portion refunded to the transaction senders as well as\n\t * the non-refundable portion taken out and put into `non_refundable_balance`.\n\t *\n\t * @generated from protobuf field: optional uint64 total_object_storage_rebates = 1\n\t */\n\ttotalObjectStorageRebates?: bigint;\n\t/**\n\t * Represents any remaining inflow of the storage fund that should not\n\t * be taken out of the fund.\n\t *\n\t * @generated from protobuf field: optional uint64 non_refundable_balance = 2\n\t */\n\tnonRefundableBalance?: bigint;\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.ValidatorSet\n */\nexport interface ValidatorSet {\n\t/**\n\t * Total amount of stake from all active validators at the beginning of the epoch.\n\t * Written only once per epoch, in `advance_epoch` function.\n\t *\n\t * @generated from protobuf field: optional uint64 total_stake = 1\n\t */\n\ttotalStake?: bigint;\n\t/**\n\t * The current list of active validators.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.Validator active_validators = 2\n\t */\n\tactiveValidators: Validator[];\n\t/**\n\t * List of new validator candidates added during the current epoch.\n\t * They will be processed at the end of the epoch.\n\t *\n\t * key: u64 (index), value: 0x3::validator::Validator\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.MoveTable pending_active_validators = 3\n\t */\n\tpendingActiveValidators?: MoveTable;\n\t/**\n\t * Removal requests from the validators. Each element is an index\n\t * pointing to `active_validators`.\n\t *\n\t * @generated from protobuf field: repeated uint64 pending_removals = 4\n\t */\n\tpendingRemovals: bigint[];\n\t/**\n\t * Mappings from staking pool's ID to the sui address of a validator.\n\t *\n\t * key: address (staking pool Id), value: address (sui address of the validator)\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.MoveTable staking_pool_mappings = 5\n\t */\n\tstakingPoolMappings?: MoveTable;\n\t/**\n\t * Mapping from a staking pool ID to the inactive validator that has that pool as its staking pool.\n\t * When a validator is deactivated the validator is removed from `active_validators` it\n\t * is added to this table so that stakers can continue to withdraw their stake from it.\n\t *\n\t * key: address (staking pool Id), value: 0x3::validator_wrapper::ValidatorWrapper\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.MoveTable inactive_validators = 6\n\t */\n\tinactiveValidators?: MoveTable;\n\t/**\n\t * Table storing preactive/candidate validators, mapping their addresses to their `Validator ` structs.\n\t * When an address calls `request_add_validator_candidate`, they get added to this table and become a preactive\n\t * validator.\n\t * When the candidate has met the min stake requirement, they can call `request_add_validator` to\n\t * officially add them to the active validator set `active_validators` next epoch.\n\t *\n\t * key: address (sui address of the validator), value: 0x3::validator_wrapper::ValidatorWrapper\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.MoveTable validator_candidates = 7\n\t */\n\tvalidatorCandidates?: MoveTable;\n\t/**\n\t * Table storing the number of epochs during which a validator's stake has been below the low stake threshold.\n\t *\n\t * @generated from protobuf field: map<string, uint64> at_risk_validators = 8\n\t */\n\tatRiskValidators: {\n\t\t[key: string]: bigint;\n\t};\n\t/**\n\t * Any extra fields that's not defined statically.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.MoveTable extra_fields = 9\n\t */\n\textraFields?: MoveTable;\n}\n/**\n * Definition of a Validator in the system contracts\n *\n * Note: fields of ValidatorMetadata are flattened into this type\n *\n * @generated from protobuf message sui.rpc.v2beta2.Validator\n */\nexport interface Validator {\n\t/**\n\t * A unique human-readable name of this validator.\n\t *\n\t * @generated from protobuf field: optional string name = 1\n\t */\n\tname?: string;\n\t/**\n\t * The Sui Address of the validator. This is the sender that created the Validator object,\n\t * and also the address to send validator/coins to during withdraws.\n\t *\n\t * @generated from protobuf field: optional string address = 2\n\t */\n\taddress?: string;\n\t/**\n\t * @generated from protobuf field: optional string description = 3\n\t */\n\tdescription?: string;\n\t/**\n\t * @generated from protobuf field: optional string image_url = 4\n\t */\n\timageUrl?: string;\n\t/**\n\t * @generated from protobuf field: optional string project_url = 5\n\t */\n\tprojectUrl?: string;\n\t/**\n\t * The public key bytes corresponding to the private key that the validator\n\t * holds to sign transactions. For now, this is the same as AuthorityName.\n\t *\n\t * @generated from protobuf field: optional bytes protocol_public_key = 7\n\t */\n\tprotocolPublicKey?: Uint8Array;\n\t/**\n\t * This is a proof that the validator has ownership of the protocol private key\n\t *\n\t * @generated from protobuf field: optional bytes proof_of_possession = 8\n\t */\n\tproofOfPossession?: Uint8Array;\n\t/**\n\t * The public key bytes corresponding to the private key that the validator\n\t * uses to establish TLS connections\n\t *\n\t * @generated from protobuf field: optional bytes network_public_key = 10\n\t */\n\tnetworkPublicKey?: Uint8Array;\n\t/**\n\t * The public key bytes correstponding to the Narwhal Worker\n\t *\n\t * @generated from protobuf field: optional bytes worker_public_key = 12\n\t */\n\tworkerPublicKey?: Uint8Array;\n\t/**\n\t * The network address of the validator (could also contain extra info such as port, DNS and etc.).\n\t *\n\t * @generated from protobuf field: optional string network_address = 13\n\t */\n\tnetworkAddress?: string;\n\t/**\n\t * The address of the validator used for p2p activities such as state sync (could also contain extra info such as port, DNS and etc.).\n\t *\n\t * @generated from protobuf field: optional string p2p_address = 14\n\t */\n\tp2PAddress?: string;\n\t/**\n\t * The address of the narwhal primary\n\t *\n\t * @generated from protobuf field: optional string primary_address = 15\n\t */\n\tprimaryAddress?: string;\n\t/**\n\t * The address of the narwhal worker\n\t *\n\t * @generated from protobuf field: optional string worker_address = 16\n\t */\n\tworkerAddress?: string;\n\t/**\n\t * @generated from protobuf field: optional bytes next_epoch_protocol_public_key = 18\n\t */\n\tnextEpochProtocolPublicKey?: Uint8Array;\n\t/**\n\t * @generated from protobuf field: optional bytes next_epoch_proof_of_possession = 19\n\t */\n\tnextEpochProofOfPossession?: Uint8Array;\n\t/**\n\t * @generated from protobuf field: optional bytes next_epoch_network_public_key = 21\n\t */\n\tnextEpochNetworkPublicKey?: Uint8Array;\n\t/**\n\t * @generated from protobuf field: optional bytes next_epoch_worker_public_key = 23\n\t */\n\tnextEpochWorkerPublicKey?: Uint8Array;\n\t/**\n\t * @generated from protobuf field: optional string next_epoch_network_address = 24\n\t */\n\tnextEpochNetworkAddress?: string;\n\t/**\n\t * @generated from protobuf field: optional string next_epoch_p2p_address = 25\n\t */\n\tnextEpochP2PAddress?: string;\n\t/**\n\t * @generated from protobuf field: optional string next_epoch_primary_address = 26\n\t */\n\tnextEpochPrimaryAddress?: string;\n\t/**\n\t * @generated from protobuf field: optional string next_epoch_worker_address = 27\n\t */\n\tnextEpochWorkerAddress?: string;\n\t/**\n\t * Any extra fields that's not defined statically in the `ValidatorMetadata` struct\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.MoveTable metadata_extra_fields = 28\n\t */\n\tmetadataExtraFields?: MoveTable;\n\t/**\n\t * The voting power of this validator, which might be different from its\n\t * stake amount.\n\t *\n\t * @generated from protobuf field: optional uint64 voting_power = 29\n\t */\n\tvotingPower?: bigint;\n\t/**\n\t * The ID of this validator's current valid `UnverifiedValidatorOperationCap`\n\t *\n\t * @generated from protobuf field: optional string operation_cap_id = 30\n\t */\n\toperationCapId?: string;\n\t/**\n\t * Gas price quote, updated only at end of epoch.\n\t *\n\t * @generated from protobuf field: optional uint64 gas_price = 31\n\t */\n\tgasPrice?: bigint;\n\t/**\n\t * Staking pool for this validator.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.StakingPool staking_pool = 32\n\t */\n\tstakingPool?: StakingPool;\n\t/**\n\t * Commission rate of the validator, in basis point.\n\t *\n\t * @generated from protobuf field: optional uint64 commission_rate = 33\n\t */\n\tcommissionRate?: bigint;\n\t/**\n\t * Total amount of stake that would be active in the next epoch.\n\t *\n\t * @generated from protobuf field: optional uint64 next_epoch_stake = 34\n\t */\n\tnextEpochStake?: bigint;\n\t/**\n\t * This validator's gas price quote for the next epoch.\n\t *\n\t * @generated from protobuf field: optional uint64 next_epoch_gas_price = 35\n\t */\n\tnextEpochGasPrice?: bigint;\n\t/**\n\t * The commission rate of the validator starting the next epoch, in basis point.\n\t *\n\t * @generated from protobuf field: optional uint64 next_epoch_commission_rate = 36\n\t */\n\tnextEpochCommissionRate?: bigint;\n\t/**\n\t * Any extra fields that's not defined statically.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.MoveTable extra_fields = 37\n\t */\n\textraFields?: MoveTable;\n}\n/**\n * A staking pool embedded in each validator struct in the system state object.\n *\n * @generated from protobuf message sui.rpc.v2beta2.StakingPool\n */\nexport interface StakingPool {\n\t/**\n\t * UID of the StakingPool object\n\t *\n\t * @generated from protobuf field: optional string id = 1\n\t */\n\tid?: string;\n\t/**\n\t * The epoch at which this pool became active.\n\t * The value is `None` if the pool is pre-active and `Some(<epoch_number>)` if active or inactive.\n\t *\n\t * @generated from protobuf field: optional uint64 activation_epoch = 2\n\t */\n\tactivationEpoch?: bigint;\n\t/**\n\t * The epoch at which this staking pool ceased to be active. `None` = {pre-active, active},\n\t * `Some(<epoch_number>)` if in-active, and it was de-activated at epoch `<epoch_number>`.\n\t *\n\t * @generated from protobuf field: optional uint64 deactivation_epoch = 3\n\t */\n\tdeactivationEpoch?: bigint;\n\t/**\n\t * The total number of SUI tokens in this pool, including the SUI in the rewards_pool, as well as in all the principal\n\t * in the `StakedSui` object, updated at epoch boundaries.\n\t *\n\t * @generated from protobuf field: optional uint64 sui_balance = 4\n\t */\n\tsuiBalance?: bigint;\n\t/**\n\t * The epoch stake rewards will be added here at the end of each epoch.\n\t *\n\t * @generated from protobuf field: optional uint64 rewards_pool = 5\n\t */\n\trewardsPool?: bigint;\n\t/**\n\t * Total number of pool tokens issued by the pool.\n\t *\n\t * @generated from protobuf field: optional uint64 pool_token_balance = 6\n\t */\n\tpoolTokenBalance?: bigint;\n\t/**\n\t * Exchange rate history of previous epochs.\n\t *\n\t * The entries start from the `activation_epoch` of this pool and contains exchange rates at the beginning of each epoch,\n\t * i.e., right after the rewards for the previous epoch have been deposited into the pool.\n\t *\n\t * key: u64 (epoch number), value: PoolTokenExchangeRate\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.MoveTable exchange_rates = 7\n\t */\n\texchangeRates?: MoveTable;\n\t/**\n\t * Pending stake amount for this epoch, emptied at epoch boundaries.\n\t *\n\t * @generated from protobuf field: optional uint64 pending_stake = 8\n\t */\n\tpendingStake?: bigint;\n\t/**\n\t * Pending stake withdrawn during the current epoch, emptied at epoch boundaries.\n\t * This includes both the principal and rewards SUI withdrawn.\n\t *\n\t * @generated from protobuf field: optional uint64 pending_total_sui_withdraw = 9\n\t */\n\tpendingTotalSuiWithdraw?: bigint;\n\t/**\n\t * Pending pool token withdrawn during the current epoch, emptied at epoch boundaries.\n\t *\n\t * @generated from protobuf field: optional uint64 pending_pool_token_withdraw = 10\n\t */\n\tpendingPoolTokenWithdraw?: bigint;\n\t/**\n\t * Any extra fields that's not defined statically.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.MoveTable extra_fields = 11\n\t */\n\textraFields?: MoveTable;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass SystemState$Type extends MessageType<SystemState> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.SystemState', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'version',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'epoch',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'protocol_version',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 4, name: 'validators', kind: 'message', T: () => ValidatorSet },\n\t\t\t{ no: 5, name: 'storage_fund', kind: 'message', T: () => StorageFund },\n\t\t\t{ no: 6, name: 'parameters', kind: 'message', T: () => SystemParameters },\n\t\t\t{\n\t\t\t\tno: 7,\n\t\t\t\tname: 'reference_gas_price',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 8,\n\t\t\t\tname: 'validator_report_records',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => ValidatorReportRecord,\n\t\t\t},\n\t\t\t{ no: 9, name: 'stake_subsidy', kind: 'message', T: () => StakeSubsidy },\n\t\t\t{ no: 10, name: 'safe_mode', kind: 'scalar', opt: true, T: 8 /*ScalarType.BOOL*/ },\n\t\t\t{\n\t\t\t\tno: 11,\n\t\t\t\tname: 'safe_mode_storage_rewards',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 12,\n\t\t\t\tname: 'safe_mode_computation_rewards',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 13,\n\t\t\t\tname: 'safe_mode_storage_rebates',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 14,\n\t\t\t\tname: 'safe_mode_non_refundable_storage_fee',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 15,\n\t\t\t\tname: 'epoch_start_timestamp_ms',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 16, name: 'extra_fields', kind: 'message', T: () => MoveTable },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<SystemState>): SystemState {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.validatorReportRecords = [];\n\t\tif (value !== undefined) reflectionMergePartial<SystemState>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: SystemState,\n\t): SystemState {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional uint64 version */ 1:\n\t\t\t\t\tmessage.version = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 epoch */ 2:\n\t\t\t\t\tmessage.epoch = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 protocol_version */ 3:\n\t\t\t\t\tmessage.protocolVersion = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.ValidatorSet validators */ 4:\n\t\t\t\t\tmessage.validators = ValidatorSet.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.validators,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.StorageFund storage_fund */ 5:\n\t\t\t\t\tmessage.storageFund = StorageFund.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.storageFund,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.SystemParameters parameters */ 6:\n\t\t\t\t\tmessage.parameters = SystemParameters.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.parameters,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 reference_gas_price */ 7:\n\t\t\t\t\tmessage.referenceGasPrice = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.ValidatorReportRecord validator_report_records */ 8:\n\t\t\t\t\tmessage.validatorReportRecords.push(\n\t\t\t\t\t\tValidatorReportRecord.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.StakeSubsidy stake_subsidy */ 9:\n\t\t\t\t\tmessage.stakeSubsidy = StakeSubsidy.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.stakeSubsidy,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bool safe_mode */ 10:\n\t\t\t\t\tmessage.safeMode = reader.bool();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 safe_mode_storage_rewards */ 11:\n\t\t\t\t\tmessage.safeModeStorageRewards = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 safe_mode_computation_rewards */ 12:\n\t\t\t\t\tmessage.safeModeComputationRewards = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 safe_mode_storage_rebates */ 13:\n\t\t\t\t\tmessage.safeModeStorageRebates = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 safe_mode_non_refundable_storage_fee */ 14:\n\t\t\t\t\tmessage.safeModeNonRefundableStorageFee = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 epoch_start_timestamp_ms */ 15:\n\t\t\t\t\tmessage.epochStartTimestampMs = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.MoveTable extra_fields */ 16:\n\t\t\t\t\tmessage.extraFields = MoveTable.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.extraFields,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: SystemState,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional uint64 version = 1; */\n\t\tif (message.version !== undefined) writer.tag(1, WireType.Varint).uint64(message.version);\n\t\t/* optional uint64 epoch = 2; */\n\t\tif (message.epoch !== undefined) writer.tag(2, WireType.Varint).uint64(message.epoch);\n\t\t/* optional uint64 protocol_version = 3; */\n\t\tif (message.protocolVersion !== undefined)\n\t\t\twriter.tag(3, WireType.Varint).uint64(message.protocolVersion);\n\t\t/* optional sui.rpc.v2beta2.ValidatorSet validators = 4; */\n\t\tif (message.validators)\n\t\t\tValidatorSet.internalBinaryWrite(\n\t\t\t\tmessage.validators,\n\t\t\t\twriter.tag(4, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.StorageFund storage_fund = 5; */\n\t\tif (message.storageFund)\n\t\t\tStorageFund.internalBinaryWrite(\n\t\t\t\tmessage.storageFund,\n\t\t\t\twriter.tag(5, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.SystemParameters parameters = 6; */\n\t\tif (message.parameters)\n\t\t\tSystemParameters.internalBinaryWrite(\n\t\t\t\tmessage.parameters,\n\t\t\t\twriter.tag(6, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional uint64 reference_gas_price = 7; */\n\t\tif (message.referenceGasPrice !== undefined)\n\t\t\twriter.tag(7, WireType.Varint).uint64(message.referenceGasPrice);\n\t\t/* repeated sui.rpc.v2beta2.ValidatorReportRecord validator_report_records = 8; */\n\t\tfor (let i = 0; i < message.validatorReportRecords.length; i++)\n\t\t\tValidatorReportRecord.internalBinaryWrite(\n\t\t\t\tmessage.validatorReportRecords[i],\n\t\t\t\twriter.tag(8, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.StakeSubsidy stake_subsidy = 9; */\n\t\tif (message.stakeSubsidy)\n\t\t\tStakeSubsidy.internalBinaryWrite(\n\t\t\t\tmessage.stakeSubsidy,\n\t\t\t\twriter.tag(9, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional bool safe_mode = 10; */\n\t\tif (message.safeMode !== undefined) writer.tag(10, WireType.Varint).bool(message.safeMode);\n\t\t/* optional uint64 safe_mode_storage_rewards = 11; */\n\t\tif (message.safeModeStorageRewards !== undefined)\n\t\t\twriter.tag(11, WireType.Varint).uint64(message.safeModeStorageRewards);\n\t\t/* optional uint64 safe_mode_computation_rewards = 12; */\n\t\tif (message.safeModeComputationRewards !== undefined)\n\t\t\twriter.tag(12, WireType.Varint).uint64(message.safeModeComputationRewards);\n\t\t/* optional uint64 safe_mode_storage_rebates = 13; */\n\t\tif (message.safeModeStorageRebates !== undefined)\n\t\t\twriter.tag(13, WireType.Varint).uint64(message.safeModeStorageRebates);\n\t\t/* optional uint64 safe_mode_non_refundable_storage_fee = 14; */\n\t\tif (message.safeModeNonRefundableStorageFee !== undefined)\n\t\t\twriter.tag(14, WireType.Varint).uint64(message.safeModeNonRefundableStorageFee);\n\t\t/* optional uint64 epoch_start_timestamp_ms = 15; */\n\t\tif (message.epochStartTimestampMs !== undefined)\n\t\t\twriter.tag(15, WireType.Varint).uint64(message.epochStartTimestampMs);\n\t\t/* optional sui.rpc.v2beta2.MoveTable extra_fields = 16; */\n\t\tif (message.extraFields)\n\t\t\tMoveTable.internalBinaryWrite(\n\t\t\t\tmessage.extraFields,\n\t\t\t\twriter.tag(16, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.SystemState\n */\nexport const SystemState = new SystemState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ValidatorReportRecord$Type extends MessageType<ValidatorReportRecord> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ValidatorReportRecord', [\n\t\t\t{ no: 1, name: 'reported', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'reporters',\n\t\t\t\tkind: 'scalar',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: 9 /*ScalarType.STRING*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ValidatorReportRecord>): ValidatorReportRecord {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.reporters = [];\n\t\tif (value !== undefined) reflectionMergePartial<ValidatorReportRecord>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ValidatorReportRecord,\n\t): ValidatorReportRecord {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string reported */ 1:\n\t\t\t\t\tmessage.reported = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated string reporters */ 2:\n\t\t\t\t\tmessage.reporters.push(reader.string());\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ValidatorReportRecord,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string reported = 1; */\n\t\tif (message.reported !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).string(message.reported);\n\t\t/* repeated string reporters = 2; */\n\t\tfor (let i = 0; i < message.reporters.length; i++)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.reporters[i]);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ValidatorReportRecord\n */\nexport const ValidatorReportRecord = new ValidatorReportRecord$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SystemParameters$Type extends MessageType<SystemParameters> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.SystemParameters', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'epoch_duration_ms',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'stake_subsidy_start_epoch',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'min_validator_count',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 4,\n\t\t\t\tname: 'max_validator_count',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 5,\n\t\t\t\tname: 'min_validator_joining_stake',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 6,\n\t\t\t\tname: 'validator_low_stake_threshold',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 7,\n\t\t\t\tname: 'validator_very_low_stake_threshold',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 8,\n\t\t\t\tname: 'validator_low_stake_grace_period',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 9, name: 'extra_fields', kind: 'message', T: () => MoveTable },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<SystemParameters>): SystemParameters {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<SystemParameters>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: SystemParameters,\n\t): SystemParameters {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional uint64 epoch_duration_ms */ 1:\n\t\t\t\t\tmessage.epochDurationMs = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 stake_subsidy_start_epoch */ 2:\n\t\t\t\t\tmessage.stakeSubsidyStartEpoch = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 min_validator_count */ 3:\n\t\t\t\t\tmessage.minValidatorCount = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 max_validator_count */ 4:\n\t\t\t\t\tmessage.maxValidatorCount = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 min_validator_joining_stake */ 5:\n\t\t\t\t\tmessage.minValidatorJoiningStake = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 validator_low_stake_threshold */ 6:\n\t\t\t\t\tmessage.validatorLowStakeThreshold = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 validator_very_low_stake_threshold */ 7:\n\t\t\t\t\tmessage.validatorVeryLowStakeThreshold = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 validator_low_stake_grace_period */ 8:\n\t\t\t\t\tmessage.validatorLowStakeGracePeriod = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.MoveTable extra_fields */ 9:\n\t\t\t\t\tmessage.extraFields = MoveTable.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.extraFields,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: SystemParameters,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional uint64 epoch_duration_ms = 1; */\n\t\tif (message.epochDurationMs !== undefined)\n\t\t\twriter.tag(1, WireType.Varint).uint64(message.epochDurationMs);\n\t\t/* optional uint64 stake_subsidy_start_epoch = 2; */\n\t\tif (message.stakeSubsidyStartEpoch !== undefined)\n\t\t\twriter.tag(2, WireType.Varint).uint64(message.stakeSubsidyStartEpoch);\n\t\t/* optional uint64 min_validator_count = 3; */\n\t\tif (message.minValidatorCount !== undefined)\n\t\t\twriter.tag(3, WireType.Varint).uint64(message.minValidatorCount);\n\t\t/* optional uint64 max_validator_count = 4; */\n\t\tif (message.maxValidatorCount !== undefined)\n\t\t\twriter.tag(4, WireType.Varint).uint64(message.maxValidatorCount);\n\t\t/* optional uint64 min_validator_joining_stake = 5; */\n\t\tif (message.minValidatorJoiningStake !== undefined)\n\t\t\twriter.tag(5, WireType.Varint).uint64(message.minValidatorJoiningStake);\n\t\t/* optional uint64 validator_low_stake_threshold = 6; */\n\t\tif (message.validatorLowStakeThreshold !== undefined)\n\t\t\twriter.tag(6, WireType.Varint).uint64(message.validatorLowStakeThreshold);\n\t\t/* optional uint64 validator_very_low_stake_threshold = 7; */\n\t\tif (message.validatorVeryLowStakeThreshold !== undefined)\n\t\t\twriter.tag(7, WireType.Varint).uint64(message.validatorVeryLowStakeThreshold);\n\t\t/* optional uint64 validator_low_stake_grace_period = 8; */\n\t\tif (message.validatorLowStakeGracePeriod !== undefined)\n\t\t\twriter.tag(8, WireType.Varint).uint64(message.validatorLowStakeGracePeriod);\n\t\t/* optional sui.rpc.v2beta2.MoveTable extra_fields = 9; */\n\t\tif (message.extraFields)\n\t\t\tMoveTable.internalBinaryWrite(\n\t\t\t\tmessage.extraFields,\n\t\t\t\twriter.tag(9, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.SystemParameters\n */\nexport const SystemParameters = new SystemParameters$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MoveTable$Type extends MessageType<MoveTable> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.MoveTable', [\n\t\t\t{ no: 1, name: 'id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'size',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<MoveTable>): MoveTable {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<MoveTable>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: MoveTable,\n\t): MoveTable {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string id */ 1:\n\t\t\t\t\tmessage.id = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 size */ 2:\n\t\t\t\t\tmessage.size = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: MoveTable,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string id = 1; */\n\t\tif (message.id !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.id);\n\t\t/* optional uint64 size = 2; */\n\t\tif (message.size !== undefined) writer.tag(2, WireType.Varint).uint64(message.size);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.MoveTable\n */\nexport const MoveTable = new MoveTable$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StakeSubsidy$Type extends MessageType<StakeSubsidy> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.StakeSubsidy', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'balance',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'distribution_counter',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'current_distribution_amount',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 4,\n\t\t\t\tname: 'stake_subsidy_period_length',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 5,\n\t\t\t\tname: 'stake_subsidy_decrease_rate',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 13 /*ScalarType.UINT32*/,\n\t\t\t},\n\t\t\t{ no: 6, name: 'extra_fields', kind: 'message', T: () => MoveTable },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<StakeSubsidy>): StakeSubsidy {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<StakeSubsidy>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: StakeSubsidy,\n\t): StakeSubsidy {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional uint64 balance */ 1:\n\t\t\t\t\tmessage.balance = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 distribution_counter */ 2:\n\t\t\t\t\tmessage.distributionCounter = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 current_distribution_amount */ 3:\n\t\t\t\t\tmessage.currentDistributionAmount = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 stake_subsidy_period_length */ 4:\n\t\t\t\t\tmessage.stakeSubsidyPeriodLength = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint32 stake_subsidy_decrease_rate */ 5:\n\t\t\t\t\tmessage.stakeSubsidyDecreaseRate = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.MoveTable extra_fields */ 6:\n\t\t\t\t\tmessage.extraFields = MoveTable.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.extraFields,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: StakeSubsidy,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional uint64 balance = 1; */\n\t\tif (message.balance !== undefined) writer.tag(1, WireType.Varint).uint64(message.balance);\n\t\t/* optional uint64 distribution_counter = 2; */\n\t\tif (message.distributionCounter !== undefined)\n\t\t\twriter.tag(2, WireType.Varint).uint64(message.distributionCounter);\n\t\t/* optional uint64 current_distribution_amount = 3; */\n\t\tif (message.currentDistributionAmount !== undefined)\n\t\t\twriter.tag(3, WireType.Varint).uint64(message.currentDistributionAmount);\n\t\t/* optional uint64 stake_subsidy_period_length = 4; */\n\t\tif (message.stakeSubsidyPeriodLength !== undefined)\n\t\t\twriter.tag(4, WireType.Varint).uint64(message.stakeSubsidyPeriodLength);\n\t\t/* optional uint32 stake_subsidy_decrease_rate = 5; */\n\t\tif (message.stakeSubsidyDecreaseRate !== undefined)\n\t\t\twriter.tag(5, WireType.Varint).uint32(message.stakeSubsidyDecreaseRate);\n\t\t/* optional sui.rpc.v2beta2.MoveTable extra_fields = 6; */\n\t\tif (message.extraFields)\n\t\t\tMoveTable.internalBinaryWrite(\n\t\t\t\tmessage.extraFields,\n\t\t\t\twriter.tag(6, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.StakeSubsidy\n */\nexport const StakeSubsidy = new StakeSubsidy$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StorageFund$Type extends MessageType<StorageFund> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.StorageFund', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'total_object_storage_rebates',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'non_refundable_balance',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<StorageFund>): StorageFund {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<StorageFund>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: StorageFund,\n\t): StorageFund {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional uint64 total_object_storage_rebates */ 1:\n\t\t\t\t\tmessage.totalObjectStorageRebates = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 non_refundable_balance */ 2:\n\t\t\t\t\tmessage.nonRefundableBalance = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: StorageFund,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional uint64 total_object_storage_rebates = 1; */\n\t\tif (message.totalObjectStorageRebates !== undefined)\n\t\t\twriter.tag(1, WireType.Varint).uint64(message.totalObjectStorageRebates);\n\t\t/* optional uint64 non_refundable_balance = 2; */\n\t\tif (message.nonRefundableBalance !== undefined)\n\t\t\twriter.tag(2, WireType.Varint).uint64(message.nonRefundableBalance);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.StorageFund\n */\nexport const StorageFund = new StorageFund$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ValidatorSet$Type extends MessageType<ValidatorSet> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ValidatorSet', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'total_stake',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'active_validators',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => Validator,\n\t\t\t},\n\t\t\t{ no: 3, name: 'pending_active_validators', kind: 'message', T: () => MoveTable },\n\t\t\t{\n\t\t\t\tno: 4,\n\t\t\t\tname: 'pending_removals',\n\t\t\t\tkind: 'scalar',\n\t\t\t\trepeat: 1 /*RepeatType.PACKED*/,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 5, name: 'staking_pool_mappings', kind: 'message', T: () => MoveTable },\n\t\t\t{ no: 6, name: 'inactive_validators', kind: 'message', T: () => MoveTable },\n\t\t\t{ no: 7, name: 'validator_candidates', kind: 'message', T: () => MoveTable },\n\t\t\t{\n\t\t\t\tno: 8,\n\t\t\t\tname: 'at_risk_validators',\n\t\t\t\tkind: 'map',\n\t\t\t\tK: 9 /*ScalarType.STRING*/,\n\t\t\t\tV: { kind: 'scalar', T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n\t\t\t},\n\t\t\t{ no: 9, name: 'extra_fields', kind: 'message', T: () => MoveTable },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ValidatorSet>): ValidatorSet {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.activeValidators = [];\n\t\tmessage.pendingRemovals = [];\n\t\tmessage.atRiskValidators = {};\n\t\tif (value !== undefined) reflectionMergePartial<ValidatorSet>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ValidatorSet,\n\t): ValidatorSet {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional uint64 total_stake */ 1:\n\t\t\t\t\tmessage.totalStake = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.Validator active_validators */ 2:\n\t\t\t\t\tmessage.activeValidators.push(\n\t\t\t\t\t\tValidator.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.MoveTable pending_active_validators */ 3:\n\t\t\t\t\tmessage.pendingActiveValidators = MoveTable.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.pendingActiveValidators,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated uint64 pending_removals */ 4:\n\t\t\t\t\tif (wireType === WireType.LengthDelimited)\n\t\t\t\t\t\tfor (let e = reader.int32() + reader.pos; reader.pos < e; )\n\t\t\t\t\t\t\tmessage.pendingRemovals.push(reader.uint64().toBigInt());\n\t\t\t\t\telse message.pendingRemovals.push(reader.uint64().toBigInt());\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.MoveTable staking_pool_mappings */ 5:\n\t\t\t\t\tmessage.stakingPoolMappings = MoveTable.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.stakingPoolMappings,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.MoveTable inactive_validators */ 6:\n\t\t\t\t\tmessage.inactiveValidators = MoveTable.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.inactiveValidators,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.MoveTable validator_candidates */ 7:\n\t\t\t\t\tmessage.validatorCandidates = MoveTable.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.validatorCandidates,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* map<string, uint64> at_risk_validators */ 8:\n\t\t\t\t\tthis.binaryReadMap8(message.atRiskValidators, reader, options);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.MoveTable extra_fields */ 9:\n\t\t\t\t\tmessage.extraFields = MoveTable.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.extraFields,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tprivate binaryReadMap8(\n\t\tmap: ValidatorSet['atRiskValidators'],\n\t\treader: IBinaryReader,\n\t\toptions: BinaryReadOptions,\n\t): void {\n\t\tlet len = reader.uint32(),\n\t\t\tend = reader.pos + len,\n\t\t\tkey: keyof ValidatorSet['atRiskValidators'] | undefined,\n\t\t\tval: ValidatorSet['atRiskValidators'][any] | undefined;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase 1:\n\t\t\t\t\tkey = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tval = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t'unknown map entry field for sui.rpc.v2beta2.ValidatorSet.at_risk_validators',\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tmap[key ?? ''] = val ?? 0n;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ValidatorSet,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional uint64 total_stake = 1; */\n\t\tif (message.totalStake !== undefined) writer.tag(1, WireType.Varint).uint64(message.totalStake);\n\t\t/* repeated sui.rpc.v2beta2.Validator active_validators = 2; */\n\t\tfor (let i = 0; i < message.activeValidators.length; i++)\n\t\t\tValidator.internalBinaryWrite(\n\t\t\t\tmessage.activeValidators[i],\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.MoveTable pending_active_validators = 3; */\n\t\tif (message.pendingActiveValidators)\n\t\t\tMoveTable.internalBinaryWrite(\n\t\t\t\tmessage.pendingActiveValidators,\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* repeated uint64 pending_removals = 4; */\n\t\tif (message.pendingRemovals.length) {\n\t\t\twriter.tag(4, WireType.LengthDelimited).fork();\n\t\t\tfor (let i = 0; i < message.pendingRemovals.length; i++)\n\t\t\t\twriter.uint64(message.pendingRemovals[i]);\n\t\t\twriter.join();\n\t\t}\n\t\t/* optional sui.rpc.v2beta2.MoveTable staking_pool_mappings = 5; */\n\t\tif (message.stakingPoolMappings)\n\t\t\tMoveTable.internalBinaryWrite(\n\t\t\t\tmessage.stakingPoolMappings,\n\t\t\t\twriter.tag(5, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.MoveTable inactive_validators = 6; */\n\t\tif (message.inactiveValidators)\n\t\t\tMoveTable.internalBinaryWrite(\n\t\t\t\tmessage.inactiveValidators,\n\t\t\t\twriter.tag(6, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.MoveTable validator_candidates = 7; */\n\t\tif (message.validatorCandidates)\n\t\t\tMoveTable.internalBinaryWrite(\n\t\t\t\tmessage.validatorCandidates,\n\t\t\t\twriter.tag(7, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* map<string, uint64> at_risk_validators = 8; */\n\t\tfor (let k of globalThis.Object.keys(message.atRiskValidators))\n\t\t\twriter\n\t\t\t\t.tag(8, WireType.LengthDelimited)\n\t\t\t\t.fork()\n\t\t\t\t.tag(1, WireType.LengthDelimited)\n\t\t\t\t.string(k)\n\t\t\t\t.tag(2, WireType.Varint)\n\t\t\t\t.uint64(message.atRiskValidators[k])\n\t\t\t\t.join();\n\t\t/* optional sui.rpc.v2beta2.MoveTable extra_fields = 9; */\n\t\tif (message.extraFields)\n\t\t\tMoveTable.internalBinaryWrite(\n\t\t\t\tmessage.extraFields,\n\t\t\t\twriter.tag(9, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ValidatorSet\n */\nexport const ValidatorSet = new ValidatorSet$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Validator$Type extends MessageType<Validator> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.Validator', [\n\t\t\t{ no: 1, name: 'name', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'address', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 3, name: 'description', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 4, name: 'image_url', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 5, name: 'project_url', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 7, name: 'protocol_public_key', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{ no: 8, name: 'proof_of_possession', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{ no: 10, name: 'network_public_key', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{ no: 12, name: 'worker_public_key', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{ no: 13, name: 'network_address', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 14,\n\t\t\t\tname: 'p2p_address',\n\t\t\t\tkind: 'scalar',\n\t\t\t\tjsonName: 'p2pAddress',\n\t\t\t\topt: true,\n\t\t\t\tT: 9 /*ScalarType.STRING*/,\n\t\t\t},\n\t\t\t{ no: 15, name: 'primary_address', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 16, name: 'worker_address', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 18,\n\t\t\t\tname: 'next_epoch_protocol_public_key',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 12 /*ScalarType.BYTES*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 19,\n\t\t\t\tname: 'next_epoch_proof_of_possession',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 12 /*ScalarType.BYTES*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 21,\n\t\t\t\tname: 'next_epoch_network_public_key',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 12 /*ScalarType.BYTES*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 23,\n\t\t\t\tname: 'next_epoch_worker_public_key',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 12 /*ScalarType.BYTES*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 24,\n\t\t\t\tname: 'next_epoch_network_address',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 9 /*ScalarType.STRING*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 25,\n\t\t\t\tname: 'next_epoch_p2p_address',\n\t\t\t\tkind: 'scalar',\n\t\t\t\tjsonName: 'nextEpochP2pAddress',\n\t\t\t\topt: true,\n\t\t\t\tT: 9 /*ScalarType.STRING*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 26,\n\t\t\t\tname: 'next_epoch_primary_address',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 9 /*ScalarType.STRING*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 27,\n\t\t\t\tname: 'next_epoch_worker_address',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 9 /*ScalarType.STRING*/,\n\t\t\t},\n\t\t\t{ no: 28, name: 'metadata_extra_fields', kind: 'message', T: () => MoveTable },\n\t\t\t{\n\t\t\t\tno: 29,\n\t\t\t\tname: 'voting_power',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 30, name: 'operation_cap_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 31,\n\t\t\t\tname: 'gas_price',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 32, name: 'staking_pool', kind: 'message', T: () => StakingPool },\n\t\t\t{\n\t\t\t\tno: 33,\n\t\t\t\tname: 'commission_rate',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 34,\n\t\t\t\tname: 'next_epoch_stake',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 35,\n\t\t\t\tname: 'next_epoch_gas_price',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 36,\n\t\t\t\tname: 'next_epoch_commission_rate',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 37, name: 'extra_fields', kind: 'message', T: () => MoveTable },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<Validator>): Validator {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<Validator>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: Validator,\n\t): Validator {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string name */ 1:\n\t\t\t\t\tmessage.name = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string address */ 2:\n\t\t\t\t\tmessage.address = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string description */ 3:\n\t\t\t\t\tmessage.description = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string image_url */ 4:\n\t\t\t\t\tmessage.imageUrl = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string project_url */ 5:\n\t\t\t\t\tmessage.projectUrl = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes protocol_public_key */ 7:\n\t\t\t\t\tmessage.protocolPublicKey = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes proof_of_possession */ 8:\n\t\t\t\t\tmessage.proofOfPossession = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes network_public_key */ 10:\n\t\t\t\t\tmessage.networkPublicKey = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes worker_public_key */ 12:\n\t\t\t\t\tmessage.workerPublicKey = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string network_address */ 13:\n\t\t\t\t\tmessage.networkAddress = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string p2p_address */ 14:\n\t\t\t\t\tmessage.p2PAddress = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string primary_address */ 15:\n\t\t\t\t\tmessage.primaryAddress = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string worker_address */ 16:\n\t\t\t\t\tmessage.workerAddress = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes next_epoch_protocol_public_key */ 18:\n\t\t\t\t\tmessage.nextEpochProtocolPublicKey = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes next_epoch_proof_of_possession */ 19:\n\t\t\t\t\tmessage.nextEpochProofOfPossession = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes next_epoch_network_public_key */ 21:\n\t\t\t\t\tmessage.nextEpochNetworkPublicKey = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes next_epoch_worker_public_key */ 23:\n\t\t\t\t\tmessage.nextEpochWorkerPublicKey = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string next_epoch_network_address */ 24:\n\t\t\t\t\tmessage.nextEpochNetworkAddress = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string next_epoch_p2p_address */ 25:\n\t\t\t\t\tmessage.nextEpochP2PAddress = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string next_epoch_primary_address */ 26:\n\t\t\t\t\tmessage.nextEpochPrimaryAddress = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string next_epoch_worker_address */ 27:\n\t\t\t\t\tmessage.nextEpochWorkerAddress = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.MoveTable metadata_extra_fields */ 28:\n\t\t\t\t\tmessage.metadataExtraFields = MoveTable.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.metadataExtraFields,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 voting_power */ 29:\n\t\t\t\t\tmessage.votingPower = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string operation_cap_id */ 30:\n\t\t\t\t\tmessage.operationCapId = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 gas_price */ 31:\n\t\t\t\t\tmessage.gasPrice = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.StakingPool staking_pool */ 32:\n\t\t\t\t\tmessage.stakingPool = StakingPool.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.stakingPool,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 commission_rate */ 33:\n\t\t\t\t\tmessage.commissionRate = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 next_epoch_stake */ 34:\n\t\t\t\t\tmessage.nextEpochStake = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 next_epoch_gas_price */ 35:\n\t\t\t\t\tmessage.nextEpochGasPrice = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 next_epoch_commission_rate */ 36:\n\t\t\t\t\tmessage.nextEpochCommissionRate = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.MoveTable extra_fields */ 37:\n\t\t\t\t\tmessage.extraFields = MoveTable.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.extraFields,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: Validator,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string name = 1; */\n\t\tif (message.name !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.name);\n\t\t/* optional string address = 2; */\n\t\tif (message.address !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.address);\n\t\t/* optional string description = 3; */\n\t\tif (message.description !== undefined)\n\t\t\twriter.tag(3, WireType.LengthDelimited).string(message.description);\n\t\t/* optional string image_url = 4; */\n\t\tif (message.imageUrl !== undefined)\n\t\t\twriter.tag(4, WireType.LengthDelimited).string(message.imageUrl);\n\t\t/* optional string project_url = 5; */\n\t\tif (message.projectUrl !== undefined)\n\t\t\twriter.tag(5, WireType.LengthDelimited).string(message.projectUrl);\n\t\t/* optional bytes protocol_public_key = 7; */\n\t\tif (message.protocolPublicKey !== undefined)\n\t\t\twriter.tag(7, WireType.LengthDelimited).bytes(message.protocolPublicKey);\n\t\t/* optional bytes proof_of_possession = 8; */\n\t\tif (message.proofOfPossession !== undefined)\n\t\t\twriter.tag(8, WireType.LengthDelimited).bytes(message.proofOfPossession);\n\t\t/* optional bytes network_public_key = 10; */\n\t\tif (message.networkPublicKey !== undefined)\n\t\t\twriter.tag(10, WireType.LengthDelimited).bytes(message.networkPublicKey);\n\t\t/* optional bytes worker_public_key = 12; */\n\t\tif (message.workerPublicKey !== undefined)\n\t\t\twriter.tag(12, WireType.LengthDelimited).bytes(message.workerPublicKey);\n\t\t/* optional string network_address = 13; */\n\t\tif (message.networkAddress !== undefined)\n\t\t\twriter.tag(13, WireType.LengthDelimited).string(message.networkAddress);\n\t\t/* optional string p2p_address = 14; */\n\t\tif (message.p2PAddress !== undefined)\n\t\t\twriter.tag(14, WireType.LengthDelimited).string(message.p2PAddress);\n\t\t/* optional string primary_address = 15; */\n\t\tif (message.primaryAddress !== undefined)\n\t\t\twriter.tag(15, WireType.LengthDelimited).string(message.primaryAddress);\n\t\t/* optional string worker_address = 16; */\n\t\tif (message.workerAddress !== undefined)\n\t\t\twriter.tag(16, WireType.LengthDelimited).string(message.workerAddress);\n\t\t/* optional bytes next_epoch_protocol_public_key = 18; */\n\t\tif (message.nextEpochProtocolPublicKey !== undefined)\n\t\t\twriter.tag(18, WireType.LengthDelimited).bytes(message.nextEpochProtocolPublicKey);\n\t\t/* optional bytes next_epoch_proof_of_possession = 19; */\n\t\tif (message.nextEpochProofOfPossession !== undefined)\n\t\t\twriter.tag(19, WireType.LengthDelimited).bytes(message.nextEpochProofOfPossession);\n\t\t/* optional bytes next_epoch_network_public_key = 21; */\n\t\tif (message.nextEpochNetworkPublicKey !== undefined)\n\t\t\twriter.tag(21, WireType.LengthDelimited).bytes(message.nextEpochNetworkPublicKey);\n\t\t/* optional bytes next_epoch_worker_public_key = 23; */\n\t\tif (message.nextEpochWorkerPublicKey !== undefined)\n\t\t\twriter.tag(23, WireType.LengthDelimited).bytes(message.nextEpochWorkerPublicKey);\n\t\t/* optional string next_epoch_network_address = 24; */\n\t\tif (message.nextEpochNetworkAddress !== undefined)\n\t\t\twriter.tag(24, WireType.LengthDelimited).string(message.nextEpochNetworkAddress);\n\t\t/* optional string next_epoch_p2p_address = 25; */\n\t\tif (message.nextEpochP2PAddress !== undefined)\n\t\t\twriter.tag(25, WireType.LengthDelimited).string(message.nextEpochP2PAddress);\n\t\t/* optional string next_epoch_primary_address = 26; */\n\t\tif (message.nextEpochPrimaryAddress !== undefined)\n\t\t\twriter.tag(26, WireType.LengthDelimited).string(message.nextEpochPrimaryAddress);\n\t\t/* optional string next_epoch_worker_address = 27; */\n\t\tif (message.nextEpochWorkerAddress !== undefined)\n\t\t\twriter.tag(27, WireType.LengthDelimited).string(message.nextEpochWorkerAddress);\n\t\t/* optional sui.rpc.v2beta2.MoveTable metadata_extra_fields = 28; */\n\t\tif (message.metadataExtraFields)\n\t\t\tMoveTable.internalBinaryWrite(\n\t\t\t\tmessage.metadataExtraFields,\n\t\t\t\twriter.tag(28, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional uint64 voting_power = 29; */\n\t\tif (message.votingPower !== undefined)\n\t\t\twriter.tag(29, WireType.Varint).uint64(message.votingPower);\n\t\t/* optional string operation_cap_id = 30; */\n\t\tif (message.operationCapId !== undefined)\n\t\t\twriter.tag(30, WireType.LengthDelimited).string(message.operationCapId);\n\t\t/* optional uint64 gas_price = 31; */\n\t\tif (message.gasPrice !== undefined) writer.tag(31, WireType.Varint).uint64(message.gasPrice);\n\t\t/* optional sui.rpc.v2beta2.StakingPool staking_pool = 32; */\n\t\tif (message.stakingPool)\n\t\t\tStakingPool.internalBinaryWrite(\n\t\t\t\tmessage.stakingPool,\n\t\t\t\twriter.tag(32, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional uint64 commission_rate = 33; */\n\t\tif (message.commissionRate !== undefined)\n\t\t\twriter.tag(33, WireType.Varint).uint64(message.commissionRate);\n\t\t/* optional uint64 next_epoch_stake = 34; */\n\t\tif (message.nextEpochStake !== undefined)\n\t\t\twriter.tag(34, WireType.Varint).uint64(message.nextEpochStake);\n\t\t/* optional uint64 next_epoch_gas_price = 35; */\n\t\tif (message.nextEpochGasPrice !== undefined)\n\t\t\twriter.tag(35, WireType.Varint).uint64(message.nextEpochGasPrice);\n\t\t/* optional uint64 next_epoch_commission_rate = 36; */\n\t\tif (message.nextEpochCommissionRate !== undefined)\n\t\t\twriter.tag(36, WireType.Varint).uint64(message.nextEpochCommissionRate);\n\t\t/* optional sui.rpc.v2beta2.MoveTable extra_fields = 37; */\n\t\tif (message.extraFields)\n\t\t\tMoveTable.internalBinaryWrite(\n\t\t\t\tmessage.extraFields,\n\t\t\t\twriter.tag(37, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.Validator\n */\nexport const Validator = new Validator$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StakingPool$Type extends MessageType<StakingPool> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.StakingPool', [\n\t\t\t{ no: 1, name: 'id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'activation_epoch',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'deactivation_epoch',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 4,\n\t\t\t\tname: 'sui_balance',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 5,\n\t\t\t\tname: 'rewards_pool',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 6,\n\t\t\t\tname: 'pool_token_balance',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 7, name: 'exchange_rates', kind: 'message', T: () => MoveTable },\n\t\t\t{\n\t\t\t\tno: 8,\n\t\t\t\tname: 'pending_stake',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 9,\n\t\t\t\tname: 'pending_total_sui_withdraw',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 10,\n\t\t\t\tname: 'pending_pool_token_withdraw',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 11, name: 'extra_fields', kind: 'message', T: () => MoveTable },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<StakingPool>): StakingPool {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<StakingPool>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: StakingPool,\n\t): StakingPool {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string id */ 1:\n\t\t\t\t\tmessage.id = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 activation_epoch */ 2:\n\t\t\t\t\tmessage.activationEpoch = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 deactivation_epoch */ 3:\n\t\t\t\t\tmessage.deactivationEpoch = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 sui_balance */ 4:\n\t\t\t\t\tmessage.suiBalance = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 rewards_pool */ 5:\n\t\t\t\t\tmessage.rewardsPool = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 pool_token_balance */ 6:\n\t\t\t\t\tmessage.poolTokenBalance = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.MoveTable exchange_rates */ 7:\n\t\t\t\t\tmessage.exchangeRates = MoveTable.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.exchangeRates,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 pending_stake */ 8:\n\t\t\t\t\tmessage.pendingStake = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 pending_total_sui_withdraw */ 9:\n\t\t\t\t\tmessage.pendingTotalSuiWithdraw = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 pending_pool_token_withdraw */ 10:\n\t\t\t\t\tmessage.pendingPoolTokenWithdraw = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.MoveTable extra_fields */ 11:\n\t\t\t\t\tmessage.extraFields = MoveTable.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.extraFields,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: StakingPool,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string id = 1; */\n\t\tif (message.id !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.id);\n\t\t/* optional uint64 activation_epoch = 2; */\n\t\tif (message.activationEpoch !== undefined)\n\t\t\twriter.tag(2, WireType.Varint).uint64(message.activationEpoch);\n\t\t/* optional uint64 deactivation_epoch = 3; */\n\t\tif (message.deactivationEpoch !== undefined)\n\t\t\twriter.tag(3, WireType.Varint).uint64(message.deactivationEpoch);\n\t\t/* optional uint64 sui_balance = 4; */\n\t\tif (message.suiBalance !== undefined) writer.tag(4, WireType.Varint).uint64(message.suiBalance);\n\t\t/* optional uint64 rewards_pool = 5; */\n\t\tif (message.rewardsPool !== undefined)\n\t\t\twriter.tag(5, WireType.Varint).uint64(message.rewardsPool);\n\t\t/* optional uint64 pool_token_balance = 6; */\n\t\tif (message.poolTokenBalance !== undefined)\n\t\t\twriter.tag(6, WireType.Varint).uint64(message.poolTokenBalance);\n\t\t/* optional sui.rpc.v2beta2.MoveTable exchange_rates = 7; */\n\t\tif (message.exchangeRates)\n\t\t\tMoveTable.internalBinaryWrite(\n\t\t\t\tmessage.exchangeRates,\n\t\t\t\twriter.tag(7, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional uint64 pending_stake = 8; */\n\t\tif (message.pendingStake !== undefined)\n\t\t\twriter.tag(8, WireType.Varint).uint64(message.pendingStake);\n\t\t/* optional uint64 pending_total_sui_withdraw = 9; */\n\t\tif (message.pendingTotalSuiWithdraw !== undefined)\n\t\t\twriter.tag(9, WireType.Varint).uint64(message.pendingTotalSuiWithdraw);\n\t\t/* optional uint64 pending_pool_token_withdraw = 10; */\n\t\tif (message.pendingPoolTokenWithdraw !== undefined)\n\t\t\twriter.tag(10, WireType.Varint).uint64(message.pendingPoolTokenWithdraw);\n\t\t/* optional sui.rpc.v2beta2.MoveTable extra_fields = 11; */\n\t\tif (message.extraFields)\n\t\t\tMoveTable.internalBinaryWrite(\n\t\t\t\tmessage.extraFields,\n\t\t\t\twriter.tag(11, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.StakingPool\n */\nexport const StakingPool = new StakingPool$Type();\n"],
  "mappings": "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",
  "names": ["import_runtime"]
}
