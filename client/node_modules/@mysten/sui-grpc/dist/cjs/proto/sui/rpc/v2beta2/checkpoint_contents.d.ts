import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
import { UserSignature } from './signature.js';
import { Bcs } from './bcs.js';
/**
 * The committed to contents of a checkpoint.
 *
 * @generated from protobuf message sui.rpc.v2beta2.CheckpointContents
 */
export interface CheckpointContents {
    /**
     * This CheckpointContents serialized as BCS.
     *
     * @generated from protobuf field: optional sui.rpc.v2beta2.Bcs bcs = 1
     */
    bcs?: Bcs;
    /**
     * The digest of this CheckpointContents.
     *
     * @generated from protobuf field: optional string digest = 2
     */
    digest?: string;
    /**
     * Version of this CheckpointContents
     *
     * @generated from protobuf field: optional int32 version = 3
     */
    version?: number;
    /**
     * Set of transactions committed to in this checkpoint.
     *
     * @generated from protobuf field: repeated sui.rpc.v2beta2.CheckpointedTransactionInfo transactions = 4
     */
    transactions: CheckpointedTransactionInfo[];
}
/**
 * Transaction information committed to in a checkpoint.
 *
 * @generated from protobuf message sui.rpc.v2beta2.CheckpointedTransactionInfo
 */
export interface CheckpointedTransactionInfo {
    /**
     * Digest of the transaction.
     *
     * @generated from protobuf field: optional string transaction = 1
     */
    transaction?: string;
    /**
     * Digest of the effects.
     *
     * @generated from protobuf field: optional string effects = 2
     */
    effects?: string;
    /**
     * Set of user signatures that authorized the transaction.
     *
     * @generated from protobuf field: repeated sui.rpc.v2beta2.UserSignature signatures = 3
     */
    signatures: UserSignature[];
}
declare class CheckpointContents$Type extends MessageType<CheckpointContents> {
    constructor();
    create(value?: PartialMessage<CheckpointContents>): CheckpointContents;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckpointContents): CheckpointContents;
    internalBinaryWrite(message: CheckpointContents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message sui.rpc.v2beta2.CheckpointContents
 */
export declare const CheckpointContents: CheckpointContents$Type;
declare class CheckpointedTransactionInfo$Type extends MessageType<CheckpointedTransactionInfo> {
    constructor();
    create(value?: PartialMessage<CheckpointedTransactionInfo>): CheckpointedTransactionInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckpointedTransactionInfo): CheckpointedTransactionInfo;
    internalBinaryWrite(message: CheckpointedTransactionInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message sui.rpc.v2beta2.CheckpointedTransactionInfo
 */
export declare const CheckpointedTransactionInfo: CheckpointedTransactionInfo$Type;
export {};
