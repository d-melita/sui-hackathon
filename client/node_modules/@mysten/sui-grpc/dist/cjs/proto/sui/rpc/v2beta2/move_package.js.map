{
  "version": 3,
  "sources": ["../../../../../../src/proto/sui/rpc/v2beta2/move_package.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport type { BinaryWriteOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryWriter } from '@protobuf-ts/runtime';\nimport { WireType } from '@protobuf-ts/runtime';\nimport type { BinaryReadOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryReader } from '@protobuf-ts/runtime';\nimport { UnknownFieldHandler } from '@protobuf-ts/runtime';\nimport type { PartialMessage } from '@protobuf-ts/runtime';\nimport { reflectionMergePartial } from '@protobuf-ts/runtime';\nimport { MessageType } from '@protobuf-ts/runtime';\n/**\n * A Move Package\n *\n * @generated from protobuf message sui.rpc.v2beta2.Package\n */\nexport interface Package {\n\t/**\n\t * The PackageId of this package\n\t *\n\t * A package's `storage_id` is the Sui ObjectId of the package on-chain.\n\t * Outside of system packages the `storage_id` for every package version is\n\t * different.\n\t *\n\t * @generated from protobuf field: optional string storage_id = 1\n\t */\n\tstorageId?: string;\n\t/**\n\t * The PackageId of the first published version of this package.\n\t *\n\t * A package's `original_id` (sometimes also called its `runtime_id`) is the\n\t * `storage_id` of the first version of this package that has been published.\n\t * The `original_id`/`runtime_id` is stable across all versions of the\n\t * package and does not ever change.\n\t *\n\t * @generated from protobuf field: optional string original_id = 2\n\t */\n\toriginalId?: string;\n\t/**\n\t * The version of this package\n\t *\n\t * @generated from protobuf field: optional uint64 version = 3\n\t */\n\tversion?: bigint;\n\t/**\n\t * The modules defined by this package\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.Module modules = 4\n\t */\n\tmodules: Module[];\n\t/**\n\t * List of datatype origins for mapping datatypes to a package version where\n\t * it was first defined\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.TypeOrigin type_origins = 5\n\t */\n\ttypeOrigins: TypeOrigin[];\n\t/**\n\t * The package's transitive dependencies as a mapping from the package's\n\t * runtime Id (the Id it is referred to by in other packages) to its\n\t * storage Id (the Id it is loaded from on chain).\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.Linkage linkage = 6\n\t */\n\tlinkage: Linkage[];\n}\n/**\n * A Move Module.\n *\n * @generated from protobuf message sui.rpc.v2beta2.Module\n */\nexport interface Module {\n\t/**\n\t * Name of this module.\n\t *\n\t * @generated from protobuf field: optional string name = 1\n\t */\n\tname?: string;\n\t/**\n\t * Serialized bytecode of the module.\n\t *\n\t * @generated from protobuf field: optional bytes contents = 2\n\t */\n\tcontents?: Uint8Array;\n\t/**\n\t * List of DataTypes defined by this module.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.DatatypeDescriptor datatypes = 3\n\t */\n\tdatatypes: DatatypeDescriptor[];\n\t/**\n\t * List of Functions defined by this module.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.FunctionDescriptor functions = 4\n\t */\n\tfunctions: FunctionDescriptor[];\n}\n/**\n * Describes a Move Datatype.\n *\n * @generated from protobuf message sui.rpc.v2beta2.DatatypeDescriptor\n */\nexport interface DatatypeDescriptor {\n\t/**\n\t * Fully qualified name of this Datatype.\n\t *\n\t * This is `<defining_id>::<module>::<name>`\n\t *\n\t * @generated from protobuf field: optional string type_name = 1\n\t */\n\ttypeName?: string;\n\t/**\n\t * PackageId of the package where this Datatype is defined.\n\t *\n\t * A type's `defining_id` is the `storage_id` of the package version that first introduced or added that type.\n\t *\n\t * @generated from protobuf field: optional string defining_id = 2\n\t */\n\tdefiningId?: string;\n\t/**\n\t * Name of the module where this Datatype is defined\n\t *\n\t * @generated from protobuf field: optional string module = 3\n\t */\n\tmodule?: string;\n\t/**\n\t * Name of this Datatype\n\t *\n\t * @generated from protobuf field: optional string name = 4\n\t */\n\tname?: string;\n\t/**\n\t * This type's abilities\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.Ability abilities = 5\n\t */\n\tabilities: Ability[];\n\t/**\n\t * Ability constraints and phantom status for this type's generic type parameters\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.TypeParameter type_parameters = 6\n\t */\n\ttypeParameters: TypeParameter[];\n\t/**\n\t * Indicates whether this datatype is a 'STRUCT' or an 'ENUM'\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.DatatypeDescriptor.DatatypeKind kind = 7\n\t */\n\tkind?: DatatypeDescriptor_DatatypeKind;\n\t/**\n\t * Set of fields if this Datatype is a struct.\n\t *\n\t * The order of the entries is the order of how the fields are defined.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.FieldDescriptor fields = 8\n\t */\n\tfields: FieldDescriptor[];\n\t/**\n\t * Set of variants if this Datatype is an enum.\n\t *\n\t * The order of the entries is the order of how the variants are defined.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.VariantDescriptor variants = 9\n\t */\n\tvariants: VariantDescriptor[];\n}\n/**\n * @generated from protobuf enum sui.rpc.v2beta2.DatatypeDescriptor.DatatypeKind\n */\nexport enum DatatypeDescriptor_DatatypeKind {\n\t/**\n\t * @generated from protobuf enum value: DATATYPE_KIND_UNKNOWN = 0;\n\t */\n\tDATATYPE_KIND_UNKNOWN = 0,\n\t/**\n\t * @generated from protobuf enum value: STRUCT = 1;\n\t */\n\tSTRUCT = 1,\n\t/**\n\t * @generated from protobuf enum value: ENUM = 2;\n\t */\n\tENUM = 2,\n}\n/**\n * A generic type parameter used in the declaration of a struct or enum.\n *\n * @generated from protobuf message sui.rpc.v2beta2.TypeParameter\n */\nexport interface TypeParameter {\n\t/**\n\t * The type parameter constraints\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.Ability constraints = 1\n\t */\n\tconstraints: Ability[];\n\t/**\n\t * Whether the parameter is declared as phantom\n\t *\n\t * @generated from protobuf field: optional bool is_phantom = 2\n\t */\n\tisPhantom?: boolean;\n}\n/**\n * Descriptor of a field that belongs to a struct or enum variant\n *\n * @generated from protobuf message sui.rpc.v2beta2.FieldDescriptor\n */\nexport interface FieldDescriptor {\n\t/**\n\t * Name of the field\n\t *\n\t * @generated from protobuf field: optional string name = 1\n\t */\n\tname?: string;\n\t/**\n\t * Order or position of the field in the struct or enum variant definition.\n\t *\n\t * @generated from protobuf field: optional uint32 position = 2\n\t */\n\tposition?: number;\n\t/**\n\t * The type of the field\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.OpenSignatureBody type = 3\n\t */\n\ttype?: OpenSignatureBody;\n}\n/**\n * Descriptor of an enum variant\n *\n * @generated from protobuf message sui.rpc.v2beta2.VariantDescriptor\n */\nexport interface VariantDescriptor {\n\t/**\n\t * Name of the variant\n\t *\n\t * @generated from protobuf field: optional string name = 1\n\t */\n\tname?: string;\n\t/**\n\t * Order or position of the variant in the enum definition.\n\t *\n\t * @generated from protobuf field: optional uint32 position = 2\n\t */\n\tposition?: number;\n\t/**\n\t * Set of fields defined by this variant.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.FieldDescriptor fields = 3\n\t */\n\tfields: FieldDescriptor[];\n}\n/**\n * Representation of a type signature that could appear as a field type for a struct or enum\n *\n * @generated from protobuf message sui.rpc.v2beta2.OpenSignatureBody\n */\nexport interface OpenSignatureBody {\n\t/**\n\t * Type of this signature\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.OpenSignatureBody.Type type = 1\n\t */\n\ttype?: OpenSignatureBody_Type;\n\t/**\n\t * Fully qualified name of the datatype when `type` is `DATATYPE`\n\t *\n\t * @generated from protobuf field: optional string type_name = 2\n\t */\n\ttypeName?: string;\n\t/**\n\t * Set when `type` is `VECTOR` or `DATATYPE`\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.OpenSignatureBody type_parameter_instantiation = 3\n\t */\n\ttypeParameterInstantiation: OpenSignatureBody[];\n\t/**\n\t * Position of the type parameter as defined in the containing data type descriptor when `type` is `TYPE_PARAMETER`\n\t *\n\t * @generated from protobuf field: optional uint32 type_parameter = 4\n\t */\n\ttypeParameter?: number;\n}\n/**\n * @generated from protobuf enum sui.rpc.v2beta2.OpenSignatureBody.Type\n */\nexport enum OpenSignatureBody_Type {\n\t/**\n\t * @generated from protobuf enum value: TYPE_UNKNOWN = 0;\n\t */\n\tTYPE_UNKNOWN = 0,\n\t/**\n\t * @generated from protobuf enum value: ADDRESS = 1;\n\t */\n\tADDRESS = 1,\n\t/**\n\t * @generated from protobuf enum value: BOOL = 2;\n\t */\n\tBOOL = 2,\n\t/**\n\t * @generated from protobuf enum value: U8 = 3;\n\t */\n\tU8 = 3,\n\t/**\n\t * @generated from protobuf enum value: U16 = 4;\n\t */\n\tU16 = 4,\n\t/**\n\t * @generated from protobuf enum value: U32 = 5;\n\t */\n\tU32 = 5,\n\t/**\n\t * @generated from protobuf enum value: U64 = 6;\n\t */\n\tU64 = 6,\n\t/**\n\t * @generated from protobuf enum value: U128 = 7;\n\t */\n\tU128 = 7,\n\t/**\n\t * @generated from protobuf enum value: U256 = 8;\n\t */\n\tU256 = 8,\n\t/**\n\t * @generated from protobuf enum value: VECTOR = 9;\n\t */\n\tVECTOR = 9,\n\t/**\n\t * @generated from protobuf enum value: DATATYPE = 10;\n\t */\n\tDATATYPE = 10,\n\t/**\n\t * @generated from protobuf enum value: TYPE_PARAMETER = 11;\n\t */\n\tTYPE_PARAMETER = 11,\n}\n/**\n * Descriptor of a Move function\n *\n * @generated from protobuf message sui.rpc.v2beta2.FunctionDescriptor\n */\nexport interface FunctionDescriptor {\n\t/**\n\t * Name of the function\n\t *\n\t * @generated from protobuf field: optional string name = 1\n\t */\n\tname?: string;\n\t/**\n\t * Whether the function is `public`, `private` or `public(friend)`\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.FunctionDescriptor.Visibility visibility = 5\n\t */\n\tvisibility?: FunctionDescriptor_Visibility;\n\t/**\n\t * Whether the function is marked `entry` or not.\n\t *\n\t * @generated from protobuf field: optional bool is_entry = 6\n\t */\n\tisEntry?: boolean;\n\t/**\n\t * Ability constraints for type parameters\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.TypeParameter type_parameters = 7\n\t */\n\ttypeParameters: TypeParameter[];\n\t/**\n\t * Formal parameter types.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.OpenSignature parameters = 8\n\t */\n\tparameters: OpenSignature[];\n\t/**\n\t * Return types.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.OpenSignature returns = 9\n\t */\n\treturns: OpenSignature[];\n}\n/**\n * @generated from protobuf enum sui.rpc.v2beta2.FunctionDescriptor.Visibility\n */\nexport enum FunctionDescriptor_Visibility {\n\t/**\n\t * @generated from protobuf enum value: VISIBILITY_UNKNOWN = 0;\n\t */\n\tVISIBILITY_UNKNOWN = 0,\n\t/**\n\t * @generated from protobuf enum value: PRIVATE = 1;\n\t */\n\tPRIVATE = 1,\n\t/**\n\t * @generated from protobuf enum value: PUBLIC = 2;\n\t */\n\tPUBLIC = 2,\n\t/**\n\t * @generated from protobuf enum value: FRIEND = 3;\n\t */\n\tFRIEND = 3,\n}\n/**\n * Representation of a type signature that could appear as a function parameter or return value.\n *\n * @generated from protobuf message sui.rpc.v2beta2.OpenSignature\n */\nexport interface OpenSignature {\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.OpenSignature.Reference reference = 1\n\t */\n\treference?: OpenSignature_Reference;\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.OpenSignatureBody body = 2\n\t */\n\tbody?: OpenSignatureBody;\n}\n/**\n * @generated from protobuf enum sui.rpc.v2beta2.OpenSignature.Reference\n */\nexport enum OpenSignature_Reference {\n\t/**\n\t * @generated from protobuf enum value: REFERENCE_UNKNOWN = 0;\n\t */\n\tREFERENCE_UNKNOWN = 0,\n\t/**\n\t * @generated from protobuf enum value: IMMUTABLE = 1;\n\t */\n\tIMMUTABLE = 1,\n\t/**\n\t * @generated from protobuf enum value: MUTABLE = 2;\n\t */\n\tMUTABLE = 2,\n}\n/**\n * Identifies a struct and the module it was defined in.\n *\n * @generated from protobuf message sui.rpc.v2beta2.TypeOrigin\n */\nexport interface TypeOrigin {\n\t/**\n\t * @generated from protobuf field: optional string module_name = 1\n\t */\n\tmoduleName?: string;\n\t/**\n\t * @generated from protobuf field: optional string datatype_name = 2\n\t */\n\tdatatypeName?: string;\n\t/**\n\t * @generated from protobuf field: optional string package_id = 3\n\t */\n\tpackageId?: string;\n}\n/**\n * Upgraded package info for the linkage table.\n *\n * @generated from protobuf message sui.rpc.v2beta2.Linkage\n */\nexport interface Linkage {\n\t/**\n\t * Id of the original package.\n\t *\n\t * @generated from protobuf field: optional string original_id = 1\n\t */\n\toriginalId?: string;\n\t/**\n\t * Id of the upgraded package.\n\t *\n\t * @generated from protobuf field: optional string upgraded_id = 2\n\t */\n\tupgradedId?: string;\n\t/**\n\t * Version of the upgraded package.\n\t *\n\t * @generated from protobuf field: optional uint64 upgraded_version = 3\n\t */\n\tupgradedVersion?: bigint;\n}\n/**\n * An `Ability` classifies what operations are permitted for a given type\n *\n * @generated from protobuf enum sui.rpc.v2beta2.Ability\n */\nexport enum Ability {\n\t/**\n\t * @generated from protobuf enum value: ABILITY_UNKNOWN = 0;\n\t */\n\tABILITY_UNKNOWN = 0,\n\t/**\n\t * Allows values of types with this ability to be copied\n\t *\n\t * @generated from protobuf enum value: COPY = 1;\n\t */\n\tCOPY = 1,\n\t/**\n\t * Allows values of types with this ability to be dropped.\n\t *\n\t * @generated from protobuf enum value: DROP = 2;\n\t */\n\tDROP = 2,\n\t/**\n\t * Allows values of types with this ability to exist inside a struct in global storage\n\t *\n\t * @generated from protobuf enum value: STORE = 3;\n\t */\n\tSTORE = 3,\n\t/**\n\t * Allows the type to serve as a key for global storage operations\n\t *\n\t * @generated from protobuf enum value: KEY = 4;\n\t */\n\tKEY = 4,\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Package$Type extends MessageType<Package> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.Package', [\n\t\t\t{ no: 1, name: 'storage_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'original_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'version',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 4,\n\t\t\t\tname: 'modules',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => Module,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 5,\n\t\t\t\tname: 'type_origins',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => TypeOrigin,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 6,\n\t\t\t\tname: 'linkage',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => Linkage,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<Package>): Package {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.modules = [];\n\t\tmessage.typeOrigins = [];\n\t\tmessage.linkage = [];\n\t\tif (value !== undefined) reflectionMergePartial<Package>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: Package,\n\t): Package {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string storage_id */ 1:\n\t\t\t\t\tmessage.storageId = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string original_id */ 2:\n\t\t\t\t\tmessage.originalId = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 version */ 3:\n\t\t\t\t\tmessage.version = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.Module modules */ 4:\n\t\t\t\t\tmessage.modules.push(Module.internalBinaryRead(reader, reader.uint32(), options));\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.TypeOrigin type_origins */ 5:\n\t\t\t\t\tmessage.typeOrigins.push(TypeOrigin.internalBinaryRead(reader, reader.uint32(), options));\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.Linkage linkage */ 6:\n\t\t\t\t\tmessage.linkage.push(Linkage.internalBinaryRead(reader, reader.uint32(), options));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: Package,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string storage_id = 1; */\n\t\tif (message.storageId !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).string(message.storageId);\n\t\t/* optional string original_id = 2; */\n\t\tif (message.originalId !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.originalId);\n\t\t/* optional uint64 version = 3; */\n\t\tif (message.version !== undefined) writer.tag(3, WireType.Varint).uint64(message.version);\n\t\t/* repeated sui.rpc.v2beta2.Module modules = 4; */\n\t\tfor (let i = 0; i < message.modules.length; i++)\n\t\t\tModule.internalBinaryWrite(\n\t\t\t\tmessage.modules[i],\n\t\t\t\twriter.tag(4, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* repeated sui.rpc.v2beta2.TypeOrigin type_origins = 5; */\n\t\tfor (let i = 0; i < message.typeOrigins.length; i++)\n\t\t\tTypeOrigin.internalBinaryWrite(\n\t\t\t\tmessage.typeOrigins[i],\n\t\t\t\twriter.tag(5, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* repeated sui.rpc.v2beta2.Linkage linkage = 6; */\n\t\tfor (let i = 0; i < message.linkage.length; i++)\n\t\t\tLinkage.internalBinaryWrite(\n\t\t\t\tmessage.linkage[i],\n\t\t\t\twriter.tag(6, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.Package\n */\nexport const Package = new Package$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Module$Type extends MessageType<Module> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.Module', [\n\t\t\t{ no: 1, name: 'name', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'contents', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'datatypes',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => DatatypeDescriptor,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 4,\n\t\t\t\tname: 'functions',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => FunctionDescriptor,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<Module>): Module {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.datatypes = [];\n\t\tmessage.functions = [];\n\t\tif (value !== undefined) reflectionMergePartial<Module>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: Module,\n\t): Module {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string name */ 1:\n\t\t\t\t\tmessage.name = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes contents */ 2:\n\t\t\t\t\tmessage.contents = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.DatatypeDescriptor datatypes */ 3:\n\t\t\t\t\tmessage.datatypes.push(\n\t\t\t\t\t\tDatatypeDescriptor.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.FunctionDescriptor functions */ 4:\n\t\t\t\t\tmessage.functions.push(\n\t\t\t\t\t\tFunctionDescriptor.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: Module,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string name = 1; */\n\t\tif (message.name !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.name);\n\t\t/* optional bytes contents = 2; */\n\t\tif (message.contents !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).bytes(message.contents);\n\t\t/* repeated sui.rpc.v2beta2.DatatypeDescriptor datatypes = 3; */\n\t\tfor (let i = 0; i < message.datatypes.length; i++)\n\t\t\tDatatypeDescriptor.internalBinaryWrite(\n\t\t\t\tmessage.datatypes[i],\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* repeated sui.rpc.v2beta2.FunctionDescriptor functions = 4; */\n\t\tfor (let i = 0; i < message.functions.length; i++)\n\t\t\tFunctionDescriptor.internalBinaryWrite(\n\t\t\t\tmessage.functions[i],\n\t\t\t\twriter.tag(4, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.Module\n */\nexport const Module = new Module$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DatatypeDescriptor$Type extends MessageType<DatatypeDescriptor> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.DatatypeDescriptor', [\n\t\t\t{ no: 1, name: 'type_name', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'defining_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 3, name: 'module', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 4, name: 'name', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 5,\n\t\t\t\tname: 'abilities',\n\t\t\t\tkind: 'enum',\n\t\t\t\trepeat: 1 /*RepeatType.PACKED*/,\n\t\t\t\tT: () => ['sui.rpc.v2beta2.Ability', Ability],\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 6,\n\t\t\t\tname: 'type_parameters',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => TypeParameter,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 7,\n\t\t\t\tname: 'kind',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => [\n\t\t\t\t\t'sui.rpc.v2beta2.DatatypeDescriptor.DatatypeKind',\n\t\t\t\t\tDatatypeDescriptor_DatatypeKind,\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 8,\n\t\t\t\tname: 'fields',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => FieldDescriptor,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 9,\n\t\t\t\tname: 'variants',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => VariantDescriptor,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<DatatypeDescriptor>): DatatypeDescriptor {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.abilities = [];\n\t\tmessage.typeParameters = [];\n\t\tmessage.fields = [];\n\t\tmessage.variants = [];\n\t\tif (value !== undefined) reflectionMergePartial<DatatypeDescriptor>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: DatatypeDescriptor,\n\t): DatatypeDescriptor {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string type_name */ 1:\n\t\t\t\t\tmessage.typeName = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string defining_id */ 2:\n\t\t\t\t\tmessage.definingId = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string module */ 3:\n\t\t\t\t\tmessage.module = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string name */ 4:\n\t\t\t\t\tmessage.name = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.Ability abilities */ 5:\n\t\t\t\t\tif (wireType === WireType.LengthDelimited)\n\t\t\t\t\t\tfor (let e = reader.int32() + reader.pos; reader.pos < e; )\n\t\t\t\t\t\t\tmessage.abilities.push(reader.int32());\n\t\t\t\t\telse message.abilities.push(reader.int32());\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.TypeParameter type_parameters */ 6:\n\t\t\t\t\tmessage.typeParameters.push(\n\t\t\t\t\t\tTypeParameter.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.DatatypeDescriptor.DatatypeKind kind */ 7:\n\t\t\t\t\tmessage.kind = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.FieldDescriptor fields */ 8:\n\t\t\t\t\tmessage.fields.push(FieldDescriptor.internalBinaryRead(reader, reader.uint32(), options));\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.VariantDescriptor variants */ 9:\n\t\t\t\t\tmessage.variants.push(\n\t\t\t\t\t\tVariantDescriptor.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: DatatypeDescriptor,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string type_name = 1; */\n\t\tif (message.typeName !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).string(message.typeName);\n\t\t/* optional string defining_id = 2; */\n\t\tif (message.definingId !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.definingId);\n\t\t/* optional string module = 3; */\n\t\tif (message.module !== undefined)\n\t\t\twriter.tag(3, WireType.LengthDelimited).string(message.module);\n\t\t/* optional string name = 4; */\n\t\tif (message.name !== undefined) writer.tag(4, WireType.LengthDelimited).string(message.name);\n\t\t/* repeated sui.rpc.v2beta2.Ability abilities = 5; */\n\t\tif (message.abilities.length) {\n\t\t\twriter.tag(5, WireType.LengthDelimited).fork();\n\t\t\tfor (let i = 0; i < message.abilities.length; i++) writer.int32(message.abilities[i]);\n\t\t\twriter.join();\n\t\t}\n\t\t/* repeated sui.rpc.v2beta2.TypeParameter type_parameters = 6; */\n\t\tfor (let i = 0; i < message.typeParameters.length; i++)\n\t\t\tTypeParameter.internalBinaryWrite(\n\t\t\t\tmessage.typeParameters[i],\n\t\t\t\twriter.tag(6, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.DatatypeDescriptor.DatatypeKind kind = 7; */\n\t\tif (message.kind !== undefined) writer.tag(7, WireType.Varint).int32(message.kind);\n\t\t/* repeated sui.rpc.v2beta2.FieldDescriptor fields = 8; */\n\t\tfor (let i = 0; i < message.fields.length; i++)\n\t\t\tFieldDescriptor.internalBinaryWrite(\n\t\t\t\tmessage.fields[i],\n\t\t\t\twriter.tag(8, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* repeated sui.rpc.v2beta2.VariantDescriptor variants = 9; */\n\t\tfor (let i = 0; i < message.variants.length; i++)\n\t\t\tVariantDescriptor.internalBinaryWrite(\n\t\t\t\tmessage.variants[i],\n\t\t\t\twriter.tag(9, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.DatatypeDescriptor\n */\nexport const DatatypeDescriptor = new DatatypeDescriptor$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TypeParameter$Type extends MessageType<TypeParameter> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.TypeParameter', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'constraints',\n\t\t\t\tkind: 'enum',\n\t\t\t\trepeat: 1 /*RepeatType.PACKED*/,\n\t\t\t\tT: () => ['sui.rpc.v2beta2.Ability', Ability],\n\t\t\t},\n\t\t\t{ no: 2, name: 'is_phantom', kind: 'scalar', opt: true, T: 8 /*ScalarType.BOOL*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<TypeParameter>): TypeParameter {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.constraints = [];\n\t\tif (value !== undefined) reflectionMergePartial<TypeParameter>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: TypeParameter,\n\t): TypeParameter {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.Ability constraints */ 1:\n\t\t\t\t\tif (wireType === WireType.LengthDelimited)\n\t\t\t\t\t\tfor (let e = reader.int32() + reader.pos; reader.pos < e; )\n\t\t\t\t\t\t\tmessage.constraints.push(reader.int32());\n\t\t\t\t\telse message.constraints.push(reader.int32());\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bool is_phantom */ 2:\n\t\t\t\t\tmessage.isPhantom = reader.bool();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: TypeParameter,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* repeated sui.rpc.v2beta2.Ability constraints = 1; */\n\t\tif (message.constraints.length) {\n\t\t\twriter.tag(1, WireType.LengthDelimited).fork();\n\t\t\tfor (let i = 0; i < message.constraints.length; i++) writer.int32(message.constraints[i]);\n\t\t\twriter.join();\n\t\t}\n\t\t/* optional bool is_phantom = 2; */\n\t\tif (message.isPhantom !== undefined) writer.tag(2, WireType.Varint).bool(message.isPhantom);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.TypeParameter\n */\nexport const TypeParameter = new TypeParameter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FieldDescriptor$Type extends MessageType<FieldDescriptor> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.FieldDescriptor', [\n\t\t\t{ no: 1, name: 'name', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'position', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t\t{ no: 3, name: 'type', kind: 'message', T: () => OpenSignatureBody },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<FieldDescriptor>): FieldDescriptor {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<FieldDescriptor>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: FieldDescriptor,\n\t): FieldDescriptor {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string name */ 1:\n\t\t\t\t\tmessage.name = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint32 position */ 2:\n\t\t\t\t\tmessage.position = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.OpenSignatureBody type */ 3:\n\t\t\t\t\tmessage.type = OpenSignatureBody.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.type,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: FieldDescriptor,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string name = 1; */\n\t\tif (message.name !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.name);\n\t\t/* optional uint32 position = 2; */\n\t\tif (message.position !== undefined) writer.tag(2, WireType.Varint).uint32(message.position);\n\t\t/* optional sui.rpc.v2beta2.OpenSignatureBody type = 3; */\n\t\tif (message.type)\n\t\t\tOpenSignatureBody.internalBinaryWrite(\n\t\t\t\tmessage.type,\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.FieldDescriptor\n */\nexport const FieldDescriptor = new FieldDescriptor$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VariantDescriptor$Type extends MessageType<VariantDescriptor> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.VariantDescriptor', [\n\t\t\t{ no: 1, name: 'name', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'position', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'fields',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => FieldDescriptor,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<VariantDescriptor>): VariantDescriptor {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.fields = [];\n\t\tif (value !== undefined) reflectionMergePartial<VariantDescriptor>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: VariantDescriptor,\n\t): VariantDescriptor {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string name */ 1:\n\t\t\t\t\tmessage.name = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint32 position */ 2:\n\t\t\t\t\tmessage.position = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.FieldDescriptor fields */ 3:\n\t\t\t\t\tmessage.fields.push(FieldDescriptor.internalBinaryRead(reader, reader.uint32(), options));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: VariantDescriptor,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string name = 1; */\n\t\tif (message.name !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.name);\n\t\t/* optional uint32 position = 2; */\n\t\tif (message.position !== undefined) writer.tag(2, WireType.Varint).uint32(message.position);\n\t\t/* repeated sui.rpc.v2beta2.FieldDescriptor fields = 3; */\n\t\tfor (let i = 0; i < message.fields.length; i++)\n\t\t\tFieldDescriptor.internalBinaryWrite(\n\t\t\t\tmessage.fields[i],\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.VariantDescriptor\n */\nexport const VariantDescriptor = new VariantDescriptor$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass OpenSignatureBody$Type extends MessageType<OpenSignatureBody> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.OpenSignatureBody', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'type',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => ['sui.rpc.v2beta2.OpenSignatureBody.Type', OpenSignatureBody_Type],\n\t\t\t},\n\t\t\t{ no: 2, name: 'type_name', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'type_parameter_instantiation',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => OpenSignatureBody,\n\t\t\t},\n\t\t\t{ no: 4, name: 'type_parameter', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<OpenSignatureBody>): OpenSignatureBody {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.typeParameterInstantiation = [];\n\t\tif (value !== undefined) reflectionMergePartial<OpenSignatureBody>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: OpenSignatureBody,\n\t): OpenSignatureBody {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.OpenSignatureBody.Type type */ 1:\n\t\t\t\t\tmessage.type = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string type_name */ 2:\n\t\t\t\t\tmessage.typeName = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.OpenSignatureBody type_parameter_instantiation */ 3:\n\t\t\t\t\tmessage.typeParameterInstantiation.push(\n\t\t\t\t\t\tOpenSignatureBody.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint32 type_parameter */ 4:\n\t\t\t\t\tmessage.typeParameter = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: OpenSignatureBody,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.OpenSignatureBody.Type type = 1; */\n\t\tif (message.type !== undefined) writer.tag(1, WireType.Varint).int32(message.type);\n\t\t/* optional string type_name = 2; */\n\t\tif (message.typeName !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.typeName);\n\t\t/* repeated sui.rpc.v2beta2.OpenSignatureBody type_parameter_instantiation = 3; */\n\t\tfor (let i = 0; i < message.typeParameterInstantiation.length; i++)\n\t\t\tOpenSignatureBody.internalBinaryWrite(\n\t\t\t\tmessage.typeParameterInstantiation[i],\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional uint32 type_parameter = 4; */\n\t\tif (message.typeParameter !== undefined)\n\t\t\twriter.tag(4, WireType.Varint).uint32(message.typeParameter);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.OpenSignatureBody\n */\nexport const OpenSignatureBody = new OpenSignatureBody$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FunctionDescriptor$Type extends MessageType<FunctionDescriptor> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.FunctionDescriptor', [\n\t\t\t{ no: 1, name: 'name', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 5,\n\t\t\t\tname: 'visibility',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => ['sui.rpc.v2beta2.FunctionDescriptor.Visibility', FunctionDescriptor_Visibility],\n\t\t\t},\n\t\t\t{ no: 6, name: 'is_entry', kind: 'scalar', opt: true, T: 8 /*ScalarType.BOOL*/ },\n\t\t\t{\n\t\t\t\tno: 7,\n\t\t\t\tname: 'type_parameters',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => TypeParameter,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 8,\n\t\t\t\tname: 'parameters',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => OpenSignature,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 9,\n\t\t\t\tname: 'returns',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => OpenSignature,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<FunctionDescriptor>): FunctionDescriptor {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.typeParameters = [];\n\t\tmessage.parameters = [];\n\t\tmessage.returns = [];\n\t\tif (value !== undefined) reflectionMergePartial<FunctionDescriptor>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: FunctionDescriptor,\n\t): FunctionDescriptor {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string name */ 1:\n\t\t\t\t\tmessage.name = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.FunctionDescriptor.Visibility visibility */ 5:\n\t\t\t\t\tmessage.visibility = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bool is_entry */ 6:\n\t\t\t\t\tmessage.isEntry = reader.bool();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.TypeParameter type_parameters */ 7:\n\t\t\t\t\tmessage.typeParameters.push(\n\t\t\t\t\t\tTypeParameter.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.OpenSignature parameters */ 8:\n\t\t\t\t\tmessage.parameters.push(\n\t\t\t\t\t\tOpenSignature.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.OpenSignature returns */ 9:\n\t\t\t\t\tmessage.returns.push(OpenSignature.internalBinaryRead(reader, reader.uint32(), options));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: FunctionDescriptor,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string name = 1; */\n\t\tif (message.name !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.name);\n\t\t/* optional sui.rpc.v2beta2.FunctionDescriptor.Visibility visibility = 5; */\n\t\tif (message.visibility !== undefined) writer.tag(5, WireType.Varint).int32(message.visibility);\n\t\t/* optional bool is_entry = 6; */\n\t\tif (message.isEntry !== undefined) writer.tag(6, WireType.Varint).bool(message.isEntry);\n\t\t/* repeated sui.rpc.v2beta2.TypeParameter type_parameters = 7; */\n\t\tfor (let i = 0; i < message.typeParameters.length; i++)\n\t\t\tTypeParameter.internalBinaryWrite(\n\t\t\t\tmessage.typeParameters[i],\n\t\t\t\twriter.tag(7, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* repeated sui.rpc.v2beta2.OpenSignature parameters = 8; */\n\t\tfor (let i = 0; i < message.parameters.length; i++)\n\t\t\tOpenSignature.internalBinaryWrite(\n\t\t\t\tmessage.parameters[i],\n\t\t\t\twriter.tag(8, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* repeated sui.rpc.v2beta2.OpenSignature returns = 9; */\n\t\tfor (let i = 0; i < message.returns.length; i++)\n\t\t\tOpenSignature.internalBinaryWrite(\n\t\t\t\tmessage.returns[i],\n\t\t\t\twriter.tag(9, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.FunctionDescriptor\n */\nexport const FunctionDescriptor = new FunctionDescriptor$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass OpenSignature$Type extends MessageType<OpenSignature> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.OpenSignature', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'reference',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => ['sui.rpc.v2beta2.OpenSignature.Reference', OpenSignature_Reference],\n\t\t\t},\n\t\t\t{ no: 2, name: 'body', kind: 'message', T: () => OpenSignatureBody },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<OpenSignature>): OpenSignature {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<OpenSignature>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: OpenSignature,\n\t): OpenSignature {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.OpenSignature.Reference reference */ 1:\n\t\t\t\t\tmessage.reference = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.OpenSignatureBody body */ 2:\n\t\t\t\t\tmessage.body = OpenSignatureBody.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.body,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: OpenSignature,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.OpenSignature.Reference reference = 1; */\n\t\tif (message.reference !== undefined) writer.tag(1, WireType.Varint).int32(message.reference);\n\t\t/* optional sui.rpc.v2beta2.OpenSignatureBody body = 2; */\n\t\tif (message.body)\n\t\t\tOpenSignatureBody.internalBinaryWrite(\n\t\t\t\tmessage.body,\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.OpenSignature\n */\nexport const OpenSignature = new OpenSignature$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TypeOrigin$Type extends MessageType<TypeOrigin> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.TypeOrigin', [\n\t\t\t{ no: 1, name: 'module_name', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'datatype_name', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 3, name: 'package_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<TypeOrigin>): TypeOrigin {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<TypeOrigin>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: TypeOrigin,\n\t): TypeOrigin {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string module_name */ 1:\n\t\t\t\t\tmessage.moduleName = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string datatype_name */ 2:\n\t\t\t\t\tmessage.datatypeName = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string package_id */ 3:\n\t\t\t\t\tmessage.packageId = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: TypeOrigin,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string module_name = 1; */\n\t\tif (message.moduleName !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).string(message.moduleName);\n\t\t/* optional string datatype_name = 2; */\n\t\tif (message.datatypeName !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.datatypeName);\n\t\t/* optional string package_id = 3; */\n\t\tif (message.packageId !== undefined)\n\t\t\twriter.tag(3, WireType.LengthDelimited).string(message.packageId);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.TypeOrigin\n */\nexport const TypeOrigin = new TypeOrigin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Linkage$Type extends MessageType<Linkage> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.Linkage', [\n\t\t\t{ no: 1, name: 'original_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'upgraded_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'upgraded_version',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<Linkage>): Linkage {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<Linkage>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: Linkage,\n\t): Linkage {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string original_id */ 1:\n\t\t\t\t\tmessage.originalId = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string upgraded_id */ 2:\n\t\t\t\t\tmessage.upgradedId = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 upgraded_version */ 3:\n\t\t\t\t\tmessage.upgradedVersion = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: Linkage,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string original_id = 1; */\n\t\tif (message.originalId !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).string(message.originalId);\n\t\t/* optional string upgraded_id = 2; */\n\t\tif (message.upgradedId !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.upgradedId);\n\t\t/* optional uint64 upgraded_version = 3; */\n\t\tif (message.upgradedVersion !== undefined)\n\t\t\twriter.tag(3, WireType.Varint).uint64(message.upgradedVersion);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.Linkage\n */\nexport const Linkage = new Linkage$Type();\n"],
  "mappings": "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",
  "names": ["import_runtime", "DatatypeDescriptor_DatatypeKind", "OpenSignatureBody_Type", "FunctionDescriptor_Visibility", "OpenSignature_Reference", "Ability"]
}
