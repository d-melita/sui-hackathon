{
  "version": 3,
  "sources": ["../../../../../../src/proto/sui/rpc/v2beta2/transaction.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport type { BinaryWriteOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryWriter } from '@protobuf-ts/runtime';\nimport { WireType } from '@protobuf-ts/runtime';\nimport type { BinaryReadOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryReader } from '@protobuf-ts/runtime';\nimport { UnknownFieldHandler } from '@protobuf-ts/runtime';\nimport type { PartialMessage } from '@protobuf-ts/runtime';\nimport { reflectionMergePartial } from '@protobuf-ts/runtime';\nimport { MessageType } from '@protobuf-ts/runtime';\nimport { Duration } from '../../../google/protobuf/duration.js';\nimport { Empty } from '../../../google/protobuf/empty.js';\nimport { Object } from './object.js';\nimport { Timestamp } from '../../../google/protobuf/timestamp.js';\nimport { Argument } from './argument.js';\nimport { Input } from './input.js';\nimport { ObjectReference } from './object_reference.js';\nimport { Bcs } from './bcs.js';\n/**\n * A transaction.\n *\n * @generated from protobuf message sui.rpc.v2beta2.Transaction\n */\nexport interface Transaction {\n\t/**\n\t * This Transaction serialized as BCS.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Bcs bcs = 1\n\t */\n\tbcs?: Bcs;\n\t/**\n\t * The digest of this Transaction.\n\t *\n\t * @generated from protobuf field: optional string digest = 2\n\t */\n\tdigest?: string;\n\t/**\n\t * Version of this Transaction.\n\t *\n\t * @generated from protobuf field: optional int32 version = 3\n\t */\n\tversion?: number;\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.TransactionKind kind = 4\n\t */\n\tkind?: TransactionKind;\n\t/**\n\t * @generated from protobuf field: optional string sender = 5\n\t */\n\tsender?: string;\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.GasPayment gas_payment = 6\n\t */\n\tgasPayment?: GasPayment;\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.TransactionExpiration expiration = 7\n\t */\n\texpiration?: TransactionExpiration;\n}\n/**\n * Payment information for executing a transaction.\n *\n * @generated from protobuf message sui.rpc.v2beta2.GasPayment\n */\nexport interface GasPayment {\n\t/**\n\t * Set of gas objects to use for payment.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.ObjectReference objects = 1\n\t */\n\tobjects: ObjectReference[];\n\t/**\n\t * Owner of the gas objects, either the transaction sender or a sponsor.\n\t *\n\t * @generated from protobuf field: optional string owner = 2\n\t */\n\towner?: string;\n\t/**\n\t * Gas unit price to use when charging for computation.\n\t *\n\t * Must be greater than or equal to the network's current RGP (reference gas price).\n\t *\n\t * @generated from protobuf field: optional uint64 price = 3\n\t */\n\tprice?: bigint;\n\t/**\n\t * Total budget willing to spend for the execution of a transaction.\n\t *\n\t * @generated from protobuf field: optional uint64 budget = 4\n\t */\n\tbudget?: bigint;\n}\n/**\n * A TTL for a transaction.\n *\n * @generated from protobuf message sui.rpc.v2beta2.TransactionExpiration\n */\nexport interface TransactionExpiration {\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.TransactionExpiration.TransactionExpirationKind kind = 1\n\t */\n\tkind?: TransactionExpiration_TransactionExpirationKind;\n\t/**\n\t * @generated from protobuf field: optional uint64 epoch = 2\n\t */\n\tepoch?: bigint;\n}\n/**\n * @generated from protobuf enum sui.rpc.v2beta2.TransactionExpiration.TransactionExpirationKind\n */\nexport enum TransactionExpiration_TransactionExpirationKind {\n\t/**\n\t * @generated from protobuf enum value: TRANSACTION_EXPIRATION_KIND_UNKNOWN = 0;\n\t */\n\tTRANSACTION_EXPIRATION_KIND_UNKNOWN = 0,\n\t/**\n\t * The transaction has no expiration.\n\t *\n\t * @generated from protobuf enum value: NONE = 1;\n\t */\n\tNONE = 1,\n\t/**\n\t * Validators won't sign and execute transaction unless the expiration epoch\n\t * is greater than or equal to the current epoch.\n\t *\n\t * @generated from protobuf enum value: EPOCH = 2;\n\t */\n\tEPOCH = 2,\n}\n/**\n * Transaction type.\n *\n * @generated from protobuf message sui.rpc.v2beta2.TransactionKind\n */\nexport interface TransactionKind {\n\t/**\n\t * @generated from protobuf oneof: kind\n\t */\n\tkind:\n\t\t| {\n\t\t\t\toneofKind: 'programmableTransaction';\n\t\t\t\t/**\n\t\t\t\t * A user transaction comprised of a list of native commands and Move calls.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.ProgrammableTransaction programmable_transaction = 2\n\t\t\t\t */\n\t\t\t\tprogrammableTransaction: ProgrammableTransaction;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'programmableSystemTransaction';\n\t\t\t\t// System Transactions\n\n\t\t\t\t/**\n\t\t\t\t * A system transaction comprised of a list of native commands and Move calls.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.ProgrammableTransaction programmable_system_transaction = 3\n\t\t\t\t */\n\t\t\t\tprogrammableSystemTransaction: ProgrammableTransaction;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'changeEpoch';\n\t\t\t\t/**\n\t\t\t\t * System transaction used to end an epoch.\n\t\t\t\t *\n\t\t\t\t * The `ChangeEpoch` variant is now deprecated (but the `ChangeEpoch` struct is still used by\n\t\t\t\t * `EndOfEpochTransaction`).\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.ChangeEpoch change_epoch = 100\n\t\t\t\t */\n\t\t\t\tchangeEpoch: ChangeEpoch;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'genesis';\n\t\t\t\t/**\n\t\t\t\t * Transaction used to initialize the chain state.\n\t\t\t\t *\n\t\t\t\t * Only valid if in the genesis checkpoint (0) and if this is the very first transaction ever\n\t\t\t\t * executed on the chain.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.GenesisTransaction genesis = 101\n\t\t\t\t */\n\t\t\t\tgenesis: GenesisTransaction;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'consensusCommitPrologueV1';\n\t\t\t\t/**\n\t\t\t\t * V1 consensus commit update.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.ConsensusCommitPrologue consensus_commit_prologue_v1 = 102\n\t\t\t\t */\n\t\t\t\tconsensusCommitPrologueV1: ConsensusCommitPrologue;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'authenticatorStateUpdate';\n\t\t\t\t/**\n\t\t\t\t * Update set of valid JWKs used for zklogin.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.AuthenticatorStateUpdate authenticator_state_update = 103\n\t\t\t\t */\n\t\t\t\tauthenticatorStateUpdate: AuthenticatorStateUpdate;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'endOfEpoch';\n\t\t\t\t/**\n\t\t\t\t * Set of operations to run at the end of the epoch to close out the current epoch and start\n\t\t\t\t * the next one.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.EndOfEpochTransaction end_of_epoch = 104\n\t\t\t\t */\n\t\t\t\tendOfEpoch: EndOfEpochTransaction;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'randomnessStateUpdate';\n\t\t\t\t/**\n\t\t\t\t * Randomness update.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.RandomnessStateUpdate randomness_state_update = 105\n\t\t\t\t */\n\t\t\t\trandomnessStateUpdate: RandomnessStateUpdate;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'consensusCommitPrologueV2';\n\t\t\t\t/**\n\t\t\t\t * V2 consensus commit update.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.ConsensusCommitPrologue consensus_commit_prologue_v2 = 106\n\t\t\t\t */\n\t\t\t\tconsensusCommitPrologueV2: ConsensusCommitPrologue;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'consensusCommitPrologueV3';\n\t\t\t\t/**\n\t\t\t\t * V3 consensus commit update.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.ConsensusCommitPrologue consensus_commit_prologue_v3 = 107\n\t\t\t\t */\n\t\t\t\tconsensusCommitPrologueV3: ConsensusCommitPrologue;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'consensusCommitPrologueV4';\n\t\t\t\t/**\n\t\t\t\t * V4 consensus commit update.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.ConsensusCommitPrologue consensus_commit_prologue_v4 = 108\n\t\t\t\t */\n\t\t\t\tconsensusCommitPrologueV4: ConsensusCommitPrologue;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: undefined;\n\t\t  };\n}\n/**\n * A user transaction.\n *\n * Contains a series of native commands and Move calls where the results of one command can be\n * used in future commands.\n *\n * @generated from protobuf message sui.rpc.v2beta2.ProgrammableTransaction\n */\nexport interface ProgrammableTransaction {\n\t/**\n\t * Input objects or primitive values.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.Input inputs = 1\n\t */\n\tinputs: Input[];\n\t/**\n\t * The commands to be executed sequentially. A failure in any command\n\t * results in the failure of the entire transaction.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.Command commands = 2\n\t */\n\tcommands: Command[];\n}\n/**\n * A single command in a programmable transaction.\n *\n * @generated from protobuf message sui.rpc.v2beta2.Command\n */\nexport interface Command {\n\t/**\n\t * @generated from protobuf oneof: command\n\t */\n\tcommand:\n\t\t| {\n\t\t\t\toneofKind: 'moveCall';\n\t\t\t\t/**\n\t\t\t\t * A call to either an entry or a public Move function.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.MoveCall move_call = 1\n\t\t\t\t */\n\t\t\t\tmoveCall: MoveCall;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'transferObjects';\n\t\t\t\t/**\n\t\t\t\t * `(Vec<forall T:key+store. T>, address)`\n\t\t\t\t * It sends n-objects to the specified address. These objects must have store\n\t\t\t\t * (public transfer) and either the previous owner must be an address or the object must\n\t\t\t\t * be newly created.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.TransferObjects transfer_objects = 2\n\t\t\t\t */\n\t\t\t\ttransferObjects: TransferObjects;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'splitCoins';\n\t\t\t\t/**\n\t\t\t\t * `(&mut Coin<T>, Vec<u64>)` -> `Vec<Coin<T>>`\n\t\t\t\t * It splits off some amounts into new coins with those amounts.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.SplitCoins split_coins = 3\n\t\t\t\t */\n\t\t\t\tsplitCoins: SplitCoins;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'mergeCoins';\n\t\t\t\t/**\n\t\t\t\t * `(&mut Coin<T>, Vec<Coin<T>>)`\n\t\t\t\t * It merges n-coins into the first coin.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.MergeCoins merge_coins = 4\n\t\t\t\t */\n\t\t\t\tmergeCoins: MergeCoins;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'publish';\n\t\t\t\t/**\n\t\t\t\t * Publishes a Move package. It takes the package bytes and a list of the package's transitive\n\t\t\t\t * dependencies to link against on chain.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.Publish publish = 5\n\t\t\t\t */\n\t\t\t\tpublish: Publish;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'makeMoveVector';\n\t\t\t\t/**\n\t\t\t\t * `forall T: Vec<T> -> vector<T>`\n\t\t\t\t * Given n-values of the same type, it constructs a vector. For non-objects or an empty vector,\n\t\t\t\t * the type tag must be specified.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.MakeMoveVector make_move_vector = 6\n\t\t\t\t */\n\t\t\t\tmakeMoveVector: MakeMoveVector;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'upgrade';\n\t\t\t\t/**\n\t\t\t\t * Upgrades a Move package.\n\t\t\t\t * Takes (in order):\n\t\t\t\t * 1. A vector of serialized modules for the package.\n\t\t\t\t * 2. A vector of object ids for the transitive dependencies of the new package.\n\t\t\t\t * 3. The object ID of the package being upgraded.\n\t\t\t\t * 4. An argument holding the `UpgradeTicket` that must have been produced from an earlier command in the same\n\t\t\t\t *    programmable transaction.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.Upgrade upgrade = 7\n\t\t\t\t */\n\t\t\t\tupgrade: Upgrade;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: undefined;\n\t\t  };\n}\n/**\n * Command to call a Move function.\n *\n * Functions that can be called by a `MoveCall` command are those that have a function signature\n * that is either `entry` or `public` (which don't have a reference return type).\n *\n * @generated from protobuf message sui.rpc.v2beta2.MoveCall\n */\nexport interface MoveCall {\n\t/**\n\t * The package containing the module and function.\n\t *\n\t * @generated from protobuf field: optional string package = 1\n\t */\n\tpackage?: string;\n\t/**\n\t * The specific module in the package containing the function.\n\t *\n\t * @generated from protobuf field: optional string module = 2\n\t */\n\tmodule?: string;\n\t/**\n\t * The function to be called.\n\t *\n\t * @generated from protobuf field: optional string function = 3\n\t */\n\tfunction?: string;\n\t/**\n\t * The type arguments to the function.\n\t *\n\t * @generated from protobuf field: repeated string type_arguments = 4\n\t */\n\ttypeArguments: string[];\n\t/**\n\t * The arguments to the function.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.Argument arguments = 5\n\t */\n\targuments: Argument[];\n}\n/**\n * Command to transfer ownership of a set of objects to an address.\n *\n * @generated from protobuf message sui.rpc.v2beta2.TransferObjects\n */\nexport interface TransferObjects {\n\t/**\n\t * Set of objects to transfer.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.Argument objects = 1\n\t */\n\tobjects: Argument[];\n\t/**\n\t * The address to transfer ownership to.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Argument address = 2\n\t */\n\taddress?: Argument;\n}\n/**\n * Command to split a single coin object into multiple coins.\n *\n * @generated from protobuf message sui.rpc.v2beta2.SplitCoins\n */\nexport interface SplitCoins {\n\t/**\n\t * The coin to split.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Argument coin = 1\n\t */\n\tcoin?: Argument;\n\t/**\n\t * The amounts to split off.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.Argument amounts = 2\n\t */\n\tamounts: Argument[];\n}\n/**\n * Command to merge multiple coins of the same type into a single coin.\n *\n * @generated from protobuf message sui.rpc.v2beta2.MergeCoins\n */\nexport interface MergeCoins {\n\t/**\n\t * Coin to merge coins into.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Argument coin = 1\n\t */\n\tcoin?: Argument;\n\t/**\n\t * Set of coins to merge into `coin`.\n\t *\n\t * All listed coins must be of the same type and be the same type as `coin`\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.Argument coins_to_merge = 2\n\t */\n\tcoinsToMerge: Argument[];\n}\n/**\n * Command to publish a new Move package.\n *\n * @generated from protobuf message sui.rpc.v2beta2.Publish\n */\nexport interface Publish {\n\t/**\n\t * The serialized Move modules.\n\t *\n\t * @generated from protobuf field: repeated bytes modules = 1\n\t */\n\tmodules: Uint8Array[];\n\t/**\n\t * Set of packages that the to-be published package depends on.\n\t *\n\t * @generated from protobuf field: repeated string dependencies = 2\n\t */\n\tdependencies: string[];\n}\n/**\n * Command to build a Move vector out of a set of individual elements.\n *\n * @generated from protobuf message sui.rpc.v2beta2.MakeMoveVector\n */\nexport interface MakeMoveVector {\n\t/**\n\t * Type of the individual elements.\n\t *\n\t * This is required to be set when the type can't be inferred, for example when the set of\n\t * provided arguments are all pure input values.\n\t *\n\t * @generated from protobuf field: optional string element_type = 1\n\t */\n\telementType?: string;\n\t/**\n\t * The set individual elements to build the vector with.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.Argument elements = 2\n\t */\n\telements: Argument[];\n}\n/**\n * Command to upgrade an already published package.\n *\n * @generated from protobuf message sui.rpc.v2beta2.Upgrade\n */\nexport interface Upgrade {\n\t/**\n\t * The serialized Move modules.\n\t *\n\t * @generated from protobuf field: repeated bytes modules = 1\n\t */\n\tmodules: Uint8Array[];\n\t/**\n\t * Set of packages that the to-be published package depends on.\n\t *\n\t * @generated from protobuf field: repeated string dependencies = 2\n\t */\n\tdependencies: string[];\n\t/**\n\t * Package ID of the package to upgrade.\n\t *\n\t * @generated from protobuf field: optional string package = 3\n\t */\n\tpackage?: string;\n\t/**\n\t * Ticket authorizing the upgrade.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Argument ticket = 4\n\t */\n\tticket?: Argument;\n}\n/**\n * Randomness update.\n *\n * @generated from protobuf message sui.rpc.v2beta2.RandomnessStateUpdate\n */\nexport interface RandomnessStateUpdate {\n\t/**\n\t * Epoch of the randomness state update transaction.\n\t *\n\t * @generated from protobuf field: optional uint64 epoch = 1\n\t */\n\tepoch?: bigint;\n\t/**\n\t * Randomness round of the update.\n\t *\n\t * @generated from protobuf field: optional uint64 randomness_round = 2\n\t */\n\trandomnessRound?: bigint;\n\t/**\n\t * Updated random bytes.\n\t *\n\t * @generated from protobuf field: optional bytes random_bytes = 3\n\t */\n\trandomBytes?: Uint8Array;\n\t/**\n\t * The initial version of the randomness object that it was shared at.\n\t *\n\t * @generated from protobuf field: optional uint64 randomness_object_initial_shared_version = 4\n\t */\n\trandomnessObjectInitialSharedVersion?: bigint;\n}\n/**\n * System transaction used to change the epoch.\n *\n * @generated from protobuf message sui.rpc.v2beta2.ChangeEpoch\n */\nexport interface ChangeEpoch {\n\t/**\n\t * The next (to become) epoch ID.\n\t *\n\t * @generated from protobuf field: optional uint64 epoch = 1\n\t */\n\tepoch?: bigint;\n\t/**\n\t * The protocol version in effect in the new epoch.\n\t *\n\t * @generated from protobuf field: optional uint64 protocol_version = 2\n\t */\n\tprotocolVersion?: bigint;\n\t/**\n\t * The total amount of gas charged for storage during the epoch.\n\t *\n\t * @generated from protobuf field: optional uint64 storage_charge = 3\n\t */\n\tstorageCharge?: bigint;\n\t/**\n\t * The total amount of gas charged for computation during the epoch.\n\t *\n\t * @generated from protobuf field: optional uint64 computation_charge = 4\n\t */\n\tcomputationCharge?: bigint;\n\t/**\n\t * The amount of storage rebate refunded to the txn senders.\n\t *\n\t * @generated from protobuf field: optional uint64 storage_rebate = 5\n\t */\n\tstorageRebate?: bigint;\n\t/**\n\t * The non-refundable storage fee.\n\t *\n\t * @generated from protobuf field: optional uint64 non_refundable_storage_fee = 6\n\t */\n\tnonRefundableStorageFee?: bigint;\n\t/**\n\t * Unix timestamp when epoch started.\n\t *\n\t * @generated from protobuf field: optional google.protobuf.Timestamp epoch_start_timestamp = 7\n\t */\n\tepochStartTimestamp?: Timestamp;\n\t/**\n\t * System packages (specifically framework and Move stdlib) that are written before the new\n\t * epoch starts. This tracks framework upgrades on chain. When executing the `ChangeEpoch` txn,\n\t * the validator must write out the following modules.  Modules are provided with the version they\n\t * will be upgraded to, their modules in serialized form (which include their package ID), and\n\t * a list of their transitive dependencies.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.SystemPackage system_packages = 8\n\t */\n\tsystemPackages: SystemPackage[];\n}\n/**\n * System package.\n *\n * @generated from protobuf message sui.rpc.v2beta2.SystemPackage\n */\nexport interface SystemPackage {\n\t/**\n\t * Version of the package.\n\t *\n\t * @generated from protobuf field: optional uint64 version = 1\n\t */\n\tversion?: bigint;\n\t/**\n\t * Move modules.\n\t *\n\t * @generated from protobuf field: repeated bytes modules = 2\n\t */\n\tmodules: Uint8Array[];\n\t/**\n\t * Package dependencies.\n\t *\n\t * @generated from protobuf field: repeated string dependencies = 3\n\t */\n\tdependencies: string[];\n}\n/**\n * The genesis transaction.\n *\n * @generated from protobuf message sui.rpc.v2beta2.GenesisTransaction\n */\nexport interface GenesisTransaction {\n\t/**\n\t * Set of genesis objects.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.Object objects = 1\n\t */\n\tobjects: Object[];\n}\n/**\n * Consensus commit prologue system transaction.\n *\n * This message can represent V1, V2, and V3 prologue types.\n *\n * @generated from protobuf message sui.rpc.v2beta2.ConsensusCommitPrologue\n */\nexport interface ConsensusCommitPrologue {\n\t/**\n\t * Epoch of the commit prologue transaction.\n\t *\n\t * Present in V1, V2, V3, V4.\n\t *\n\t * @generated from protobuf field: optional uint64 epoch = 1\n\t */\n\tepoch?: bigint;\n\t/**\n\t * Consensus round of the commit.\n\t *\n\t * Present in V1, V2, V3, V4.\n\t *\n\t * @generated from protobuf field: optional uint64 round = 2\n\t */\n\tround?: bigint;\n\t/**\n\t * Unix timestamp from consensus.\n\t *\n\t * Present in V1, V2, V3, V4.\n\t *\n\t * @generated from protobuf field: optional google.protobuf.Timestamp commit_timestamp = 3\n\t */\n\tcommitTimestamp?: Timestamp;\n\t/**\n\t * Digest of consensus output.\n\t *\n\t * Present in V2, V3, V4.\n\t *\n\t * @generated from protobuf field: optional string consensus_commit_digest = 4\n\t */\n\tconsensusCommitDigest?: string;\n\t/**\n\t * The sub DAG index of the consensus commit. This field is populated if there\n\t * are multiple consensus commits per round.\n\t *\n\t * Present in V3, V4.\n\t *\n\t * @generated from protobuf field: optional uint64 sub_dag_index = 5\n\t */\n\tsubDagIndex?: bigint;\n\t/**\n\t * Stores consensus handler determined shared object version assignments.\n\t *\n\t * Present in V3, V4.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.ConsensusDeterminedVersionAssignments consensus_determined_version_assignments = 6\n\t */\n\tconsensusDeterminedVersionAssignments?: ConsensusDeterminedVersionAssignments;\n\t/**\n\t * Digest of any additional state computed by the consensus handler.\n\t * Used to detect forking bugs as early as possible.\n\t *\n\t * Present in V4.\n\t *\n\t * @generated from protobuf field: optional string additional_state_digest = 7\n\t */\n\tadditionalStateDigest?: string;\n}\n/**\n * Object version assignment from consensus.\n *\n * @generated from protobuf message sui.rpc.v2beta2.VersionAssignment\n */\nexport interface VersionAssignment {\n\t/**\n\t * `ObjectId` of the object.\n\t *\n\t * @generated from protobuf field: optional string object_id = 1\n\t */\n\tobjectId?: string;\n\t/**\n\t * start version of the consensus stream for this object\n\t *\n\t * @generated from protobuf field: optional uint64 start_version = 2\n\t */\n\tstartVersion?: bigint;\n\t/**\n\t * Assigned version.\n\t *\n\t * @generated from protobuf field: optional uint64 version = 3\n\t */\n\tversion?: bigint;\n}\n/**\n * A transaction that was canceled.\n *\n * @generated from protobuf message sui.rpc.v2beta2.CanceledTransaction\n */\nexport interface CanceledTransaction {\n\t/**\n\t * Digest of the canceled transaction.\n\t *\n\t * @generated from protobuf field: optional string digest = 1\n\t */\n\tdigest?: string;\n\t/**\n\t * List of object version assignments.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.VersionAssignment version_assignments = 2\n\t */\n\tversionAssignments: VersionAssignment[];\n}\n/**\n * Version assignments performed by consensus.\n *\n * @generated from protobuf message sui.rpc.v2beta2.ConsensusDeterminedVersionAssignments\n */\nexport interface ConsensusDeterminedVersionAssignments {\n\t/**\n\t * Version of this message\n\t *\n\t * @generated from protobuf field: optional int32 version = 1\n\t */\n\tversion?: number;\n\t/**\n\t * Canceled transaction version assignment.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.CanceledTransaction canceled_transactions = 3\n\t */\n\tcanceledTransactions: CanceledTransaction[];\n}\n/**\n * Update the set of valid JWKs.\n *\n * @generated from protobuf message sui.rpc.v2beta2.AuthenticatorStateUpdate\n */\nexport interface AuthenticatorStateUpdate {\n\t/**\n\t * Epoch of the authenticator state update transaction.\n\t *\n\t * @generated from protobuf field: optional uint64 epoch = 1\n\t */\n\tepoch?: bigint;\n\t/**\n\t * Consensus round of the authenticator state update.\n\t *\n\t * @generated from protobuf field: optional uint64 round = 2\n\t */\n\tround?: bigint;\n\t/**\n\t * Newly active JWKs.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.ActiveJwk new_active_jwks = 3\n\t */\n\tnewActiveJwks: ActiveJwk[];\n\t/**\n\t * The initial version of the authenticator object that it was shared at.\n\t *\n\t * @generated from protobuf field: optional uint64 authenticator_object_initial_shared_version = 4\n\t */\n\tauthenticatorObjectInitialSharedVersion?: bigint;\n}\n/**\n * A new JWK.\n *\n * @generated from protobuf message sui.rpc.v2beta2.ActiveJwk\n */\nexport interface ActiveJwk {\n\t/**\n\t * Identifier used to uniquely identify a JWK.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.JwkId id = 1\n\t */\n\tid?: JwkId;\n\t/**\n\t * The JWK.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Jwk jwk = 2\n\t */\n\tjwk?: Jwk;\n\t/**\n\t * Most recent epoch in which the JWK was validated.\n\t *\n\t * @generated from protobuf field: optional uint64 epoch = 3\n\t */\n\tepoch?: bigint;\n}\n/**\n * Key to uniquely identify a JWK.\n *\n * @generated from protobuf message sui.rpc.v2beta2.JwkId\n */\nexport interface JwkId {\n\t/**\n\t * The issuer or identity of the OIDC provider.\n\t *\n\t * @generated from protobuf field: optional string iss = 1\n\t */\n\tiss?: string;\n\t/**\n\t * A key ID used to uniquely identify a key from an OIDC provider.\n\t *\n\t * @generated from protobuf field: optional string kid = 2\n\t */\n\tkid?: string;\n}\n/**\n * A JSON web key.\n *\n * Struct that contains info for a JWK. A list of them for different kinds can\n * be retrieved from the JWK endpoint (for example, <https://www.googleapis.com/oauth2/v3/certs>).\n * The JWK is used to verify the JWT token.\n *\n * @generated from protobuf message sui.rpc.v2beta2.Jwk\n */\nexport interface Jwk {\n\t/**\n\t * Key type parameter, https://datatracker.ietf.org/doc/html/rfc7517#section-4.1.\n\t *\n\t * @generated from protobuf field: optional string kty = 1\n\t */\n\tkty?: string;\n\t/**\n\t * RSA public exponent, https://datatracker.ietf.org/doc/html/rfc7517#section-9.3.\n\t *\n\t * @generated from protobuf field: optional string e = 2\n\t */\n\te?: string;\n\t/**\n\t * RSA modulus, https://datatracker.ietf.org/doc/html/rfc7517#section-9.3.\n\t *\n\t * @generated from protobuf field: optional string n = 3\n\t */\n\tn?: string;\n\t/**\n\t * Algorithm parameter, https://datatracker.ietf.org/doc/html/rfc7517#section-4.4.\n\t *\n\t * @generated from protobuf field: optional string alg = 4\n\t */\n\talg?: string;\n}\n/**\n * Set of operations run at the end of the epoch to close out the current epoch\n * and start the next one.\n *\n * @generated from protobuf message sui.rpc.v2beta2.EndOfEpochTransaction\n */\nexport interface EndOfEpochTransaction {\n\t/**\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.EndOfEpochTransactionKind transactions = 1\n\t */\n\ttransactions: EndOfEpochTransactionKind[];\n}\n/**\n * Operation run at the end of an epoch.\n *\n * @generated from protobuf message sui.rpc.v2beta2.EndOfEpochTransactionKind\n */\nexport interface EndOfEpochTransactionKind {\n\t/**\n\t * @generated from protobuf oneof: kind\n\t */\n\tkind:\n\t\t| {\n\t\t\t\toneofKind: 'changeEpoch';\n\t\t\t\t/**\n\t\t\t\t * End the epoch and start the next one.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.ChangeEpoch change_epoch = 2\n\t\t\t\t */\n\t\t\t\tchangeEpoch: ChangeEpoch;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'authenticatorStateExpire';\n\t\t\t\t/**\n\t\t\t\t * Expire JWKs used for zklogin.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.AuthenticatorStateExpire authenticator_state_expire = 3\n\t\t\t\t */\n\t\t\t\tauthenticatorStateExpire: AuthenticatorStateExpire;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'executionTimeObservations';\n\t\t\t\t/**\n\t\t\t\t * Execution time observations from the committee to preserve cross epoch\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.ExecutionTimeObservations execution_time_observations = 4\n\t\t\t\t */\n\t\t\t\texecutionTimeObservations: ExecutionTimeObservations;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'authenticatorStateCreate';\n\t\t\t\t// Use higher field numbers for kinds which happen infrequently.\n\n\t\t\t\t/**\n\t\t\t\t * Create and initialize the authenticator object used for zklogin.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: google.protobuf.Empty authenticator_state_create = 200\n\t\t\t\t */\n\t\t\t\tauthenticatorStateCreate: Empty;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'randomnessStateCreate';\n\t\t\t\t/**\n\t\t\t\t * Create and initialize the randomness object.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: google.protobuf.Empty randomness_state_create = 201\n\t\t\t\t */\n\t\t\t\trandomnessStateCreate: Empty;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'denyListStateCreate';\n\t\t\t\t/**\n\t\t\t\t * Create and initialize the deny list object.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: google.protobuf.Empty deny_list_state_create = 202\n\t\t\t\t */\n\t\t\t\tdenyListStateCreate: Empty;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'bridgeStateCreate';\n\t\t\t\t/**\n\t\t\t\t * Create and initialize the bridge object.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: string bridge_state_create = 203\n\t\t\t\t */\n\t\t\t\tbridgeStateCreate: string;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'bridgeCommitteeInit';\n\t\t\t\t/**\n\t\t\t\t * Initialize the bridge committee.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: uint64 bridge_committee_init = 204\n\t\t\t\t */\n\t\t\t\tbridgeCommitteeInit: bigint;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'accumulatorRootCreate';\n\t\t\t\t/**\n\t\t\t\t * Create the accumulator root object.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: google.protobuf.Empty accumulator_root_create = 205\n\t\t\t\t */\n\t\t\t\taccumulatorRootCreate: Empty;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'coinRegistryCreate';\n\t\t\t\t/**\n\t\t\t\t * Create and initialize the Coin Registry object.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: google.protobuf.Empty coin_registry_create = 206\n\t\t\t\t */\n\t\t\t\tcoinRegistryCreate: Empty;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: undefined;\n\t\t  };\n}\n/**\n * Expire old JWKs.\n *\n * @generated from protobuf message sui.rpc.v2beta2.AuthenticatorStateExpire\n */\nexport interface AuthenticatorStateExpire {\n\t/**\n\t * Expire JWKs that have a lower epoch than this.\n\t *\n\t * @generated from protobuf field: optional uint64 min_epoch = 1\n\t */\n\tminEpoch?: bigint;\n\t/**\n\t * The initial version of the authenticator object that it was shared at.\n\t *\n\t * @generated from protobuf field: optional uint64 authenticator_object_initial_shared_version = 2\n\t */\n\tauthenticatorObjectInitialSharedVersion?: bigint;\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.ExecutionTimeObservations\n */\nexport interface ExecutionTimeObservations {\n\t/**\n\t * Version of this ExecutionTimeObservations\n\t *\n\t * @generated from protobuf field: optional int32 version = 1\n\t */\n\tversion?: number;\n\t/**\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.ExecutionTimeObservation observations = 2\n\t */\n\tobservations: ExecutionTimeObservation[];\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.ExecutionTimeObservation\n */\nexport interface ExecutionTimeObservation {\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.ExecutionTimeObservation.ExecutionTimeObservationKind kind = 1\n\t */\n\tkind?: ExecutionTimeObservation_ExecutionTimeObservationKind;\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.MoveCall move_entry_point = 2\n\t */\n\tmoveEntryPoint?: MoveCall;\n\t/**\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.ValidatorExecutionTimeObservation validator_observations = 3\n\t */\n\tvalidatorObservations: ValidatorExecutionTimeObservation[];\n}\n/**\n * @generated from protobuf enum sui.rpc.v2beta2.ExecutionTimeObservation.ExecutionTimeObservationKind\n */\nexport enum ExecutionTimeObservation_ExecutionTimeObservationKind {\n\t/**\n\t * @generated from protobuf enum value: EXECUTION_TIME_OBSERVATION_KIND_UNKNOWN = 0;\n\t */\n\tEXECUTION_TIME_OBSERVATION_KIND_UNKNOWN = 0,\n\t/**\n\t * @generated from protobuf enum value: MOVE_ENTRY_POINT = 1;\n\t */\n\tMOVE_ENTRY_POINT = 1,\n\t/**\n\t * @generated from protobuf enum value: TRANSFER_OBJECTS = 2;\n\t */\n\tTRANSFER_OBJECTS = 2,\n\t/**\n\t * @generated from protobuf enum value: SPLIT_COINS = 3;\n\t */\n\tSPLIT_COINS = 3,\n\t/**\n\t * @generated from protobuf enum value: MERGE_COINS = 4;\n\t */\n\tMERGE_COINS = 4,\n\t/**\n\t * @generated from protobuf enum value: PUBLISH = 5;\n\t */\n\tPUBLISH = 5,\n\t/**\n\t * @generated from protobuf enum value: MAKE_MOVE_VECTOR = 6;\n\t */\n\tMAKE_MOVE_VECTOR = 6,\n\t/**\n\t * @generated from protobuf enum value: UPGRADE = 7;\n\t */\n\tUPGRADE = 7,\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.ValidatorExecutionTimeObservation\n */\nexport interface ValidatorExecutionTimeObservation {\n\t/**\n\t * Bls12381 public key of the validator\n\t *\n\t * @generated from protobuf field: optional bytes validator = 1\n\t */\n\tvalidator?: Uint8Array;\n\t/**\n\t * Duration of an execution observation\n\t *\n\t * @generated from protobuf field: optional google.protobuf.Duration duration = 2\n\t */\n\tduration?: Duration;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Transaction$Type extends MessageType<Transaction> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.Transaction', [\n\t\t\t{ no: 1, name: 'bcs', kind: 'message', T: () => Bcs },\n\t\t\t{ no: 2, name: 'digest', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 3, name: 'version', kind: 'scalar', opt: true, T: 5 /*ScalarType.INT32*/ },\n\t\t\t{ no: 4, name: 'kind', kind: 'message', T: () => TransactionKind },\n\t\t\t{ no: 5, name: 'sender', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 6, name: 'gas_payment', kind: 'message', T: () => GasPayment },\n\t\t\t{ no: 7, name: 'expiration', kind: 'message', T: () => TransactionExpiration },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<Transaction>): Transaction {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<Transaction>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: Transaction,\n\t): Transaction {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Bcs bcs */ 1:\n\t\t\t\t\tmessage.bcs = Bcs.internalBinaryRead(reader, reader.uint32(), options, message.bcs);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string digest */ 2:\n\t\t\t\t\tmessage.digest = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional int32 version */ 3:\n\t\t\t\t\tmessage.version = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.TransactionKind kind */ 4:\n\t\t\t\t\tmessage.kind = TransactionKind.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.kind,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string sender */ 5:\n\t\t\t\t\tmessage.sender = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.GasPayment gas_payment */ 6:\n\t\t\t\t\tmessage.gasPayment = GasPayment.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.gasPayment,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.TransactionExpiration expiration */ 7:\n\t\t\t\t\tmessage.expiration = TransactionExpiration.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.expiration,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: Transaction,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.Bcs bcs = 1; */\n\t\tif (message.bcs)\n\t\t\tBcs.internalBinaryWrite(\n\t\t\t\tmessage.bcs,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional string digest = 2; */\n\t\tif (message.digest !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.digest);\n\t\t/* optional int32 version = 3; */\n\t\tif (message.version !== undefined) writer.tag(3, WireType.Varint).int32(message.version);\n\t\t/* optional sui.rpc.v2beta2.TransactionKind kind = 4; */\n\t\tif (message.kind)\n\t\t\tTransactionKind.internalBinaryWrite(\n\t\t\t\tmessage.kind,\n\t\t\t\twriter.tag(4, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional string sender = 5; */\n\t\tif (message.sender !== undefined)\n\t\t\twriter.tag(5, WireType.LengthDelimited).string(message.sender);\n\t\t/* optional sui.rpc.v2beta2.GasPayment gas_payment = 6; */\n\t\tif (message.gasPayment)\n\t\t\tGasPayment.internalBinaryWrite(\n\t\t\t\tmessage.gasPayment,\n\t\t\t\twriter.tag(6, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.TransactionExpiration expiration = 7; */\n\t\tif (message.expiration)\n\t\t\tTransactionExpiration.internalBinaryWrite(\n\t\t\t\tmessage.expiration,\n\t\t\t\twriter.tag(7, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.Transaction\n */\nexport const Transaction = new Transaction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GasPayment$Type extends MessageType<GasPayment> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.GasPayment', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'objects',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => ObjectReference,\n\t\t\t},\n\t\t\t{ no: 2, name: 'owner', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'price',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 4,\n\t\t\t\tname: 'budget',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<GasPayment>): GasPayment {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.objects = [];\n\t\tif (value !== undefined) reflectionMergePartial<GasPayment>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: GasPayment,\n\t): GasPayment {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.ObjectReference objects */ 1:\n\t\t\t\t\tmessage.objects.push(\n\t\t\t\t\t\tObjectReference.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string owner */ 2:\n\t\t\t\t\tmessage.owner = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 price */ 3:\n\t\t\t\t\tmessage.price = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 budget */ 4:\n\t\t\t\t\tmessage.budget = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: GasPayment,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* repeated sui.rpc.v2beta2.ObjectReference objects = 1; */\n\t\tfor (let i = 0; i < message.objects.length; i++)\n\t\t\tObjectReference.internalBinaryWrite(\n\t\t\t\tmessage.objects[i],\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional string owner = 2; */\n\t\tif (message.owner !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.owner);\n\t\t/* optional uint64 price = 3; */\n\t\tif (message.price !== undefined) writer.tag(3, WireType.Varint).uint64(message.price);\n\t\t/* optional uint64 budget = 4; */\n\t\tif (message.budget !== undefined) writer.tag(4, WireType.Varint).uint64(message.budget);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.GasPayment\n */\nexport const GasPayment = new GasPayment$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TransactionExpiration$Type extends MessageType<TransactionExpiration> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.TransactionExpiration', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'kind',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => [\n\t\t\t\t\t'sui.rpc.v2beta2.TransactionExpiration.TransactionExpirationKind',\n\t\t\t\t\tTransactionExpiration_TransactionExpirationKind,\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'epoch',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<TransactionExpiration>): TransactionExpiration {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<TransactionExpiration>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: TransactionExpiration,\n\t): TransactionExpiration {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.TransactionExpiration.TransactionExpirationKind kind */ 1:\n\t\t\t\t\tmessage.kind = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 epoch */ 2:\n\t\t\t\t\tmessage.epoch = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: TransactionExpiration,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.TransactionExpiration.TransactionExpirationKind kind = 1; */\n\t\tif (message.kind !== undefined) writer.tag(1, WireType.Varint).int32(message.kind);\n\t\t/* optional uint64 epoch = 2; */\n\t\tif (message.epoch !== undefined) writer.tag(2, WireType.Varint).uint64(message.epoch);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.TransactionExpiration\n */\nexport const TransactionExpiration = new TransactionExpiration$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TransactionKind$Type extends MessageType<TransactionKind> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.TransactionKind', [\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'programmable_transaction',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'kind',\n\t\t\t\tT: () => ProgrammableTransaction,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'programmable_system_transaction',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'kind',\n\t\t\t\tT: () => ProgrammableTransaction,\n\t\t\t},\n\t\t\t{ no: 100, name: 'change_epoch', kind: 'message', oneof: 'kind', T: () => ChangeEpoch },\n\t\t\t{ no: 101, name: 'genesis', kind: 'message', oneof: 'kind', T: () => GenesisTransaction },\n\t\t\t{\n\t\t\t\tno: 102,\n\t\t\t\tname: 'consensus_commit_prologue_v1',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'kind',\n\t\t\t\tT: () => ConsensusCommitPrologue,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 103,\n\t\t\t\tname: 'authenticator_state_update',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'kind',\n\t\t\t\tT: () => AuthenticatorStateUpdate,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 104,\n\t\t\t\tname: 'end_of_epoch',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'kind',\n\t\t\t\tT: () => EndOfEpochTransaction,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 105,\n\t\t\t\tname: 'randomness_state_update',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'kind',\n\t\t\t\tT: () => RandomnessStateUpdate,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 106,\n\t\t\t\tname: 'consensus_commit_prologue_v2',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'kind',\n\t\t\t\tT: () => ConsensusCommitPrologue,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 107,\n\t\t\t\tname: 'consensus_commit_prologue_v3',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'kind',\n\t\t\t\tT: () => ConsensusCommitPrologue,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 108,\n\t\t\t\tname: 'consensus_commit_prologue_v4',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'kind',\n\t\t\t\tT: () => ConsensusCommitPrologue,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<TransactionKind>): TransactionKind {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.kind = { oneofKind: undefined };\n\t\tif (value !== undefined) reflectionMergePartial<TransactionKind>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: TransactionKind,\n\t): TransactionKind {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* sui.rpc.v2beta2.ProgrammableTransaction programmable_transaction */ 2:\n\t\t\t\t\tmessage.kind = {\n\t\t\t\t\t\toneofKind: 'programmableTransaction',\n\t\t\t\t\t\tprogrammableTransaction: ProgrammableTransaction.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.kind as any).programmableTransaction,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.ProgrammableTransaction programmable_system_transaction */ 3:\n\t\t\t\t\tmessage.kind = {\n\t\t\t\t\t\toneofKind: 'programmableSystemTransaction',\n\t\t\t\t\t\tprogrammableSystemTransaction: ProgrammableTransaction.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.kind as any).programmableSystemTransaction,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.ChangeEpoch change_epoch */ 100:\n\t\t\t\t\tmessage.kind = {\n\t\t\t\t\t\toneofKind: 'changeEpoch',\n\t\t\t\t\t\tchangeEpoch: ChangeEpoch.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.kind as any).changeEpoch,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.GenesisTransaction genesis */ 101:\n\t\t\t\t\tmessage.kind = {\n\t\t\t\t\t\toneofKind: 'genesis',\n\t\t\t\t\t\tgenesis: GenesisTransaction.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.kind as any).genesis,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.ConsensusCommitPrologue consensus_commit_prologue_v1 */ 102:\n\t\t\t\t\tmessage.kind = {\n\t\t\t\t\t\toneofKind: 'consensusCommitPrologueV1',\n\t\t\t\t\t\tconsensusCommitPrologueV1: ConsensusCommitPrologue.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.kind as any).consensusCommitPrologueV1,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.AuthenticatorStateUpdate authenticator_state_update */ 103:\n\t\t\t\t\tmessage.kind = {\n\t\t\t\t\t\toneofKind: 'authenticatorStateUpdate',\n\t\t\t\t\t\tauthenticatorStateUpdate: AuthenticatorStateUpdate.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.kind as any).authenticatorStateUpdate,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.EndOfEpochTransaction end_of_epoch */ 104:\n\t\t\t\t\tmessage.kind = {\n\t\t\t\t\t\toneofKind: 'endOfEpoch',\n\t\t\t\t\t\tendOfEpoch: EndOfEpochTransaction.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.kind as any).endOfEpoch,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.RandomnessStateUpdate randomness_state_update */ 105:\n\t\t\t\t\tmessage.kind = {\n\t\t\t\t\t\toneofKind: 'randomnessStateUpdate',\n\t\t\t\t\t\trandomnessStateUpdate: RandomnessStateUpdate.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.kind as any).randomnessStateUpdate,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.ConsensusCommitPrologue consensus_commit_prologue_v2 */ 106:\n\t\t\t\t\tmessage.kind = {\n\t\t\t\t\t\toneofKind: 'consensusCommitPrologueV2',\n\t\t\t\t\t\tconsensusCommitPrologueV2: ConsensusCommitPrologue.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.kind as any).consensusCommitPrologueV2,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.ConsensusCommitPrologue consensus_commit_prologue_v3 */ 107:\n\t\t\t\t\tmessage.kind = {\n\t\t\t\t\t\toneofKind: 'consensusCommitPrologueV3',\n\t\t\t\t\t\tconsensusCommitPrologueV3: ConsensusCommitPrologue.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.kind as any).consensusCommitPrologueV3,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.ConsensusCommitPrologue consensus_commit_prologue_v4 */ 108:\n\t\t\t\t\tmessage.kind = {\n\t\t\t\t\t\toneofKind: 'consensusCommitPrologueV4',\n\t\t\t\t\t\tconsensusCommitPrologueV4: ConsensusCommitPrologue.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.kind as any).consensusCommitPrologueV4,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: TransactionKind,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* sui.rpc.v2beta2.ProgrammableTransaction programmable_transaction = 2; */\n\t\tif (message.kind.oneofKind === 'programmableTransaction')\n\t\t\tProgrammableTransaction.internalBinaryWrite(\n\t\t\t\tmessage.kind.programmableTransaction,\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.ProgrammableTransaction programmable_system_transaction = 3; */\n\t\tif (message.kind.oneofKind === 'programmableSystemTransaction')\n\t\t\tProgrammableTransaction.internalBinaryWrite(\n\t\t\t\tmessage.kind.programmableSystemTransaction,\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.ChangeEpoch change_epoch = 100; */\n\t\tif (message.kind.oneofKind === 'changeEpoch')\n\t\t\tChangeEpoch.internalBinaryWrite(\n\t\t\t\tmessage.kind.changeEpoch,\n\t\t\t\twriter.tag(100, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.GenesisTransaction genesis = 101; */\n\t\tif (message.kind.oneofKind === 'genesis')\n\t\t\tGenesisTransaction.internalBinaryWrite(\n\t\t\t\tmessage.kind.genesis,\n\t\t\t\twriter.tag(101, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.ConsensusCommitPrologue consensus_commit_prologue_v1 = 102; */\n\t\tif (message.kind.oneofKind === 'consensusCommitPrologueV1')\n\t\t\tConsensusCommitPrologue.internalBinaryWrite(\n\t\t\t\tmessage.kind.consensusCommitPrologueV1,\n\t\t\t\twriter.tag(102, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.AuthenticatorStateUpdate authenticator_state_update = 103; */\n\t\tif (message.kind.oneofKind === 'authenticatorStateUpdate')\n\t\t\tAuthenticatorStateUpdate.internalBinaryWrite(\n\t\t\t\tmessage.kind.authenticatorStateUpdate,\n\t\t\t\twriter.tag(103, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.EndOfEpochTransaction end_of_epoch = 104; */\n\t\tif (message.kind.oneofKind === 'endOfEpoch')\n\t\t\tEndOfEpochTransaction.internalBinaryWrite(\n\t\t\t\tmessage.kind.endOfEpoch,\n\t\t\t\twriter.tag(104, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.RandomnessStateUpdate randomness_state_update = 105; */\n\t\tif (message.kind.oneofKind === 'randomnessStateUpdate')\n\t\t\tRandomnessStateUpdate.internalBinaryWrite(\n\t\t\t\tmessage.kind.randomnessStateUpdate,\n\t\t\t\twriter.tag(105, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.ConsensusCommitPrologue consensus_commit_prologue_v2 = 106; */\n\t\tif (message.kind.oneofKind === 'consensusCommitPrologueV2')\n\t\t\tConsensusCommitPrologue.internalBinaryWrite(\n\t\t\t\tmessage.kind.consensusCommitPrologueV2,\n\t\t\t\twriter.tag(106, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.ConsensusCommitPrologue consensus_commit_prologue_v3 = 107; */\n\t\tif (message.kind.oneofKind === 'consensusCommitPrologueV3')\n\t\t\tConsensusCommitPrologue.internalBinaryWrite(\n\t\t\t\tmessage.kind.consensusCommitPrologueV3,\n\t\t\t\twriter.tag(107, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.ConsensusCommitPrologue consensus_commit_prologue_v4 = 108; */\n\t\tif (message.kind.oneofKind === 'consensusCommitPrologueV4')\n\t\t\tConsensusCommitPrologue.internalBinaryWrite(\n\t\t\t\tmessage.kind.consensusCommitPrologueV4,\n\t\t\t\twriter.tag(108, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.TransactionKind\n */\nexport const TransactionKind = new TransactionKind$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProgrammableTransaction$Type extends MessageType<ProgrammableTransaction> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ProgrammableTransaction', [\n\t\t\t{ no: 1, name: 'inputs', kind: 'message', repeat: 2 /*RepeatType.UNPACKED*/, T: () => Input },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'commands',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => Command,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ProgrammableTransaction>): ProgrammableTransaction {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.inputs = [];\n\t\tmessage.commands = [];\n\t\tif (value !== undefined) reflectionMergePartial<ProgrammableTransaction>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ProgrammableTransaction,\n\t): ProgrammableTransaction {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.Input inputs */ 1:\n\t\t\t\t\tmessage.inputs.push(Input.internalBinaryRead(reader, reader.uint32(), options));\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.Command commands */ 2:\n\t\t\t\t\tmessage.commands.push(Command.internalBinaryRead(reader, reader.uint32(), options));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ProgrammableTransaction,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* repeated sui.rpc.v2beta2.Input inputs = 1; */\n\t\tfor (let i = 0; i < message.inputs.length; i++)\n\t\t\tInput.internalBinaryWrite(\n\t\t\t\tmessage.inputs[i],\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* repeated sui.rpc.v2beta2.Command commands = 2; */\n\t\tfor (let i = 0; i < message.commands.length; i++)\n\t\t\tCommand.internalBinaryWrite(\n\t\t\t\tmessage.commands[i],\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ProgrammableTransaction\n */\nexport const ProgrammableTransaction = new ProgrammableTransaction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Command$Type extends MessageType<Command> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.Command', [\n\t\t\t{ no: 1, name: 'move_call', kind: 'message', oneof: 'command', T: () => MoveCall },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'transfer_objects',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'command',\n\t\t\t\tT: () => TransferObjects,\n\t\t\t},\n\t\t\t{ no: 3, name: 'split_coins', kind: 'message', oneof: 'command', T: () => SplitCoins },\n\t\t\t{ no: 4, name: 'merge_coins', kind: 'message', oneof: 'command', T: () => MergeCoins },\n\t\t\t{ no: 5, name: 'publish', kind: 'message', oneof: 'command', T: () => Publish },\n\t\t\t{\n\t\t\t\tno: 6,\n\t\t\t\tname: 'make_move_vector',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'command',\n\t\t\t\tT: () => MakeMoveVector,\n\t\t\t},\n\t\t\t{ no: 7, name: 'upgrade', kind: 'message', oneof: 'command', T: () => Upgrade },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<Command>): Command {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.command = { oneofKind: undefined };\n\t\tif (value !== undefined) reflectionMergePartial<Command>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: Command,\n\t): Command {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* sui.rpc.v2beta2.MoveCall move_call */ 1:\n\t\t\t\t\tmessage.command = {\n\t\t\t\t\t\toneofKind: 'moveCall',\n\t\t\t\t\t\tmoveCall: MoveCall.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.command as any).moveCall,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.TransferObjects transfer_objects */ 2:\n\t\t\t\t\tmessage.command = {\n\t\t\t\t\t\toneofKind: 'transferObjects',\n\t\t\t\t\t\ttransferObjects: TransferObjects.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.command as any).transferObjects,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.SplitCoins split_coins */ 3:\n\t\t\t\t\tmessage.command = {\n\t\t\t\t\t\toneofKind: 'splitCoins',\n\t\t\t\t\t\tsplitCoins: SplitCoins.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.command as any).splitCoins,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.MergeCoins merge_coins */ 4:\n\t\t\t\t\tmessage.command = {\n\t\t\t\t\t\toneofKind: 'mergeCoins',\n\t\t\t\t\t\tmergeCoins: MergeCoins.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.command as any).mergeCoins,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.Publish publish */ 5:\n\t\t\t\t\tmessage.command = {\n\t\t\t\t\t\toneofKind: 'publish',\n\t\t\t\t\t\tpublish: Publish.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.command as any).publish,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.MakeMoveVector make_move_vector */ 6:\n\t\t\t\t\tmessage.command = {\n\t\t\t\t\t\toneofKind: 'makeMoveVector',\n\t\t\t\t\t\tmakeMoveVector: MakeMoveVector.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.command as any).makeMoveVector,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.Upgrade upgrade */ 7:\n\t\t\t\t\tmessage.command = {\n\t\t\t\t\t\toneofKind: 'upgrade',\n\t\t\t\t\t\tupgrade: Upgrade.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.command as any).upgrade,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: Command,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* sui.rpc.v2beta2.MoveCall move_call = 1; */\n\t\tif (message.command.oneofKind === 'moveCall')\n\t\t\tMoveCall.internalBinaryWrite(\n\t\t\t\tmessage.command.moveCall,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.TransferObjects transfer_objects = 2; */\n\t\tif (message.command.oneofKind === 'transferObjects')\n\t\t\tTransferObjects.internalBinaryWrite(\n\t\t\t\tmessage.command.transferObjects,\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.SplitCoins split_coins = 3; */\n\t\tif (message.command.oneofKind === 'splitCoins')\n\t\t\tSplitCoins.internalBinaryWrite(\n\t\t\t\tmessage.command.splitCoins,\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.MergeCoins merge_coins = 4; */\n\t\tif (message.command.oneofKind === 'mergeCoins')\n\t\t\tMergeCoins.internalBinaryWrite(\n\t\t\t\tmessage.command.mergeCoins,\n\t\t\t\twriter.tag(4, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.Publish publish = 5; */\n\t\tif (message.command.oneofKind === 'publish')\n\t\t\tPublish.internalBinaryWrite(\n\t\t\t\tmessage.command.publish,\n\t\t\t\twriter.tag(5, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.MakeMoveVector make_move_vector = 6; */\n\t\tif (message.command.oneofKind === 'makeMoveVector')\n\t\t\tMakeMoveVector.internalBinaryWrite(\n\t\t\t\tmessage.command.makeMoveVector,\n\t\t\t\twriter.tag(6, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.Upgrade upgrade = 7; */\n\t\tif (message.command.oneofKind === 'upgrade')\n\t\t\tUpgrade.internalBinaryWrite(\n\t\t\t\tmessage.command.upgrade,\n\t\t\t\twriter.tag(7, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.Command\n */\nexport const Command = new Command$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MoveCall$Type extends MessageType<MoveCall> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.MoveCall', [\n\t\t\t{ no: 1, name: 'package', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'module', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 3, name: 'function', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 4,\n\t\t\t\tname: 'type_arguments',\n\t\t\t\tkind: 'scalar',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: 9 /*ScalarType.STRING*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 5,\n\t\t\t\tname: 'arguments',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => Argument,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<MoveCall>): MoveCall {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.typeArguments = [];\n\t\tmessage.arguments = [];\n\t\tif (value !== undefined) reflectionMergePartial<MoveCall>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: MoveCall,\n\t): MoveCall {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string package */ 1:\n\t\t\t\t\tmessage.package = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string module */ 2:\n\t\t\t\t\tmessage.module = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string function */ 3:\n\t\t\t\t\tmessage.function = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated string type_arguments */ 4:\n\t\t\t\t\tmessage.typeArguments.push(reader.string());\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.Argument arguments */ 5:\n\t\t\t\t\tmessage.arguments.push(Argument.internalBinaryRead(reader, reader.uint32(), options));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: MoveCall,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string package = 1; */\n\t\tif (message.package !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).string(message.package);\n\t\t/* optional string module = 2; */\n\t\tif (message.module !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.module);\n\t\t/* optional string function = 3; */\n\t\tif (message.function !== undefined)\n\t\t\twriter.tag(3, WireType.LengthDelimited).string(message.function);\n\t\t/* repeated string type_arguments = 4; */\n\t\tfor (let i = 0; i < message.typeArguments.length; i++)\n\t\t\twriter.tag(4, WireType.LengthDelimited).string(message.typeArguments[i]);\n\t\t/* repeated sui.rpc.v2beta2.Argument arguments = 5; */\n\t\tfor (let i = 0; i < message.arguments.length; i++)\n\t\t\tArgument.internalBinaryWrite(\n\t\t\t\tmessage.arguments[i],\n\t\t\t\twriter.tag(5, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.MoveCall\n */\nexport const MoveCall = new MoveCall$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TransferObjects$Type extends MessageType<TransferObjects> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.TransferObjects', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'objects',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => Argument,\n\t\t\t},\n\t\t\t{ no: 2, name: 'address', kind: 'message', T: () => Argument },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<TransferObjects>): TransferObjects {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.objects = [];\n\t\tif (value !== undefined) reflectionMergePartial<TransferObjects>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: TransferObjects,\n\t): TransferObjects {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.Argument objects */ 1:\n\t\t\t\t\tmessage.objects.push(Argument.internalBinaryRead(reader, reader.uint32(), options));\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Argument address */ 2:\n\t\t\t\t\tmessage.address = Argument.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.address,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: TransferObjects,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* repeated sui.rpc.v2beta2.Argument objects = 1; */\n\t\tfor (let i = 0; i < message.objects.length; i++)\n\t\t\tArgument.internalBinaryWrite(\n\t\t\t\tmessage.objects[i],\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.Argument address = 2; */\n\t\tif (message.address)\n\t\t\tArgument.internalBinaryWrite(\n\t\t\t\tmessage.address,\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.TransferObjects\n */\nexport const TransferObjects = new TransferObjects$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SplitCoins$Type extends MessageType<SplitCoins> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.SplitCoins', [\n\t\t\t{ no: 1, name: 'coin', kind: 'message', T: () => Argument },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'amounts',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => Argument,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<SplitCoins>): SplitCoins {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.amounts = [];\n\t\tif (value !== undefined) reflectionMergePartial<SplitCoins>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: SplitCoins,\n\t): SplitCoins {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Argument coin */ 1:\n\t\t\t\t\tmessage.coin = Argument.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.coin,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.Argument amounts */ 2:\n\t\t\t\t\tmessage.amounts.push(Argument.internalBinaryRead(reader, reader.uint32(), options));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: SplitCoins,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.Argument coin = 1; */\n\t\tif (message.coin)\n\t\t\tArgument.internalBinaryWrite(\n\t\t\t\tmessage.coin,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* repeated sui.rpc.v2beta2.Argument amounts = 2; */\n\t\tfor (let i = 0; i < message.amounts.length; i++)\n\t\t\tArgument.internalBinaryWrite(\n\t\t\t\tmessage.amounts[i],\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.SplitCoins\n */\nexport const SplitCoins = new SplitCoins$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MergeCoins$Type extends MessageType<MergeCoins> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.MergeCoins', [\n\t\t\t{ no: 1, name: 'coin', kind: 'message', T: () => Argument },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'coins_to_merge',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => Argument,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<MergeCoins>): MergeCoins {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.coinsToMerge = [];\n\t\tif (value !== undefined) reflectionMergePartial<MergeCoins>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: MergeCoins,\n\t): MergeCoins {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Argument coin */ 1:\n\t\t\t\t\tmessage.coin = Argument.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.coin,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.Argument coins_to_merge */ 2:\n\t\t\t\t\tmessage.coinsToMerge.push(Argument.internalBinaryRead(reader, reader.uint32(), options));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: MergeCoins,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.Argument coin = 1; */\n\t\tif (message.coin)\n\t\t\tArgument.internalBinaryWrite(\n\t\t\t\tmessage.coin,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* repeated sui.rpc.v2beta2.Argument coins_to_merge = 2; */\n\t\tfor (let i = 0; i < message.coinsToMerge.length; i++)\n\t\t\tArgument.internalBinaryWrite(\n\t\t\t\tmessage.coinsToMerge[i],\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.MergeCoins\n */\nexport const MergeCoins = new MergeCoins$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Publish$Type extends MessageType<Publish> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.Publish', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'modules',\n\t\t\t\tkind: 'scalar',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: 12 /*ScalarType.BYTES*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'dependencies',\n\t\t\t\tkind: 'scalar',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: 9 /*ScalarType.STRING*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<Publish>): Publish {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.modules = [];\n\t\tmessage.dependencies = [];\n\t\tif (value !== undefined) reflectionMergePartial<Publish>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: Publish,\n\t): Publish {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* repeated bytes modules */ 1:\n\t\t\t\t\tmessage.modules.push(reader.bytes());\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated string dependencies */ 2:\n\t\t\t\t\tmessage.dependencies.push(reader.string());\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: Publish,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* repeated bytes modules = 1; */\n\t\tfor (let i = 0; i < message.modules.length; i++)\n\t\t\twriter.tag(1, WireType.LengthDelimited).bytes(message.modules[i]);\n\t\t/* repeated string dependencies = 2; */\n\t\tfor (let i = 0; i < message.dependencies.length; i++)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.dependencies[i]);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.Publish\n */\nexport const Publish = new Publish$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MakeMoveVector$Type extends MessageType<MakeMoveVector> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.MakeMoveVector', [\n\t\t\t{ no: 1, name: 'element_type', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'elements',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => Argument,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<MakeMoveVector>): MakeMoveVector {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.elements = [];\n\t\tif (value !== undefined) reflectionMergePartial<MakeMoveVector>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: MakeMoveVector,\n\t): MakeMoveVector {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string element_type */ 1:\n\t\t\t\t\tmessage.elementType = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.Argument elements */ 2:\n\t\t\t\t\tmessage.elements.push(Argument.internalBinaryRead(reader, reader.uint32(), options));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: MakeMoveVector,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string element_type = 1; */\n\t\tif (message.elementType !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).string(message.elementType);\n\t\t/* repeated sui.rpc.v2beta2.Argument elements = 2; */\n\t\tfor (let i = 0; i < message.elements.length; i++)\n\t\t\tArgument.internalBinaryWrite(\n\t\t\t\tmessage.elements[i],\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.MakeMoveVector\n */\nexport const MakeMoveVector = new MakeMoveVector$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Upgrade$Type extends MessageType<Upgrade> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.Upgrade', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'modules',\n\t\t\t\tkind: 'scalar',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: 12 /*ScalarType.BYTES*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'dependencies',\n\t\t\t\tkind: 'scalar',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: 9 /*ScalarType.STRING*/,\n\t\t\t},\n\t\t\t{ no: 3, name: 'package', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 4, name: 'ticket', kind: 'message', T: () => Argument },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<Upgrade>): Upgrade {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.modules = [];\n\t\tmessage.dependencies = [];\n\t\tif (value !== undefined) reflectionMergePartial<Upgrade>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: Upgrade,\n\t): Upgrade {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* repeated bytes modules */ 1:\n\t\t\t\t\tmessage.modules.push(reader.bytes());\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated string dependencies */ 2:\n\t\t\t\t\tmessage.dependencies.push(reader.string());\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string package */ 3:\n\t\t\t\t\tmessage.package = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Argument ticket */ 4:\n\t\t\t\t\tmessage.ticket = Argument.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.ticket,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: Upgrade,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* repeated bytes modules = 1; */\n\t\tfor (let i = 0; i < message.modules.length; i++)\n\t\t\twriter.tag(1, WireType.LengthDelimited).bytes(message.modules[i]);\n\t\t/* repeated string dependencies = 2; */\n\t\tfor (let i = 0; i < message.dependencies.length; i++)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.dependencies[i]);\n\t\t/* optional string package = 3; */\n\t\tif (message.package !== undefined)\n\t\t\twriter.tag(3, WireType.LengthDelimited).string(message.package);\n\t\t/* optional sui.rpc.v2beta2.Argument ticket = 4; */\n\t\tif (message.ticket)\n\t\t\tArgument.internalBinaryWrite(\n\t\t\t\tmessage.ticket,\n\t\t\t\twriter.tag(4, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.Upgrade\n */\nexport const Upgrade = new Upgrade$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RandomnessStateUpdate$Type extends MessageType<RandomnessStateUpdate> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.RandomnessStateUpdate', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'epoch',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'randomness_round',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 3, name: 'random_bytes', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{\n\t\t\t\tno: 4,\n\t\t\t\tname: 'randomness_object_initial_shared_version',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<RandomnessStateUpdate>): RandomnessStateUpdate {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<RandomnessStateUpdate>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: RandomnessStateUpdate,\n\t): RandomnessStateUpdate {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional uint64 epoch */ 1:\n\t\t\t\t\tmessage.epoch = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 randomness_round */ 2:\n\t\t\t\t\tmessage.randomnessRound = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes random_bytes */ 3:\n\t\t\t\t\tmessage.randomBytes = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 randomness_object_initial_shared_version */ 4:\n\t\t\t\t\tmessage.randomnessObjectInitialSharedVersion = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: RandomnessStateUpdate,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional uint64 epoch = 1; */\n\t\tif (message.epoch !== undefined) writer.tag(1, WireType.Varint).uint64(message.epoch);\n\t\t/* optional uint64 randomness_round = 2; */\n\t\tif (message.randomnessRound !== undefined)\n\t\t\twriter.tag(2, WireType.Varint).uint64(message.randomnessRound);\n\t\t/* optional bytes random_bytes = 3; */\n\t\tif (message.randomBytes !== undefined)\n\t\t\twriter.tag(3, WireType.LengthDelimited).bytes(message.randomBytes);\n\t\t/* optional uint64 randomness_object_initial_shared_version = 4; */\n\t\tif (message.randomnessObjectInitialSharedVersion !== undefined)\n\t\t\twriter.tag(4, WireType.Varint).uint64(message.randomnessObjectInitialSharedVersion);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.RandomnessStateUpdate\n */\nexport const RandomnessStateUpdate = new RandomnessStateUpdate$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChangeEpoch$Type extends MessageType<ChangeEpoch> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ChangeEpoch', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'epoch',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'protocol_version',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'storage_charge',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 4,\n\t\t\t\tname: 'computation_charge',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 5,\n\t\t\t\tname: 'storage_rebate',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 6,\n\t\t\t\tname: 'non_refundable_storage_fee',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 7, name: 'epoch_start_timestamp', kind: 'message', T: () => Timestamp },\n\t\t\t{\n\t\t\t\tno: 8,\n\t\t\t\tname: 'system_packages',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => SystemPackage,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ChangeEpoch>): ChangeEpoch {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.systemPackages = [];\n\t\tif (value !== undefined) reflectionMergePartial<ChangeEpoch>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ChangeEpoch,\n\t): ChangeEpoch {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional uint64 epoch */ 1:\n\t\t\t\t\tmessage.epoch = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 protocol_version */ 2:\n\t\t\t\t\tmessage.protocolVersion = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 storage_charge */ 3:\n\t\t\t\t\tmessage.storageCharge = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 computation_charge */ 4:\n\t\t\t\t\tmessage.computationCharge = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 storage_rebate */ 5:\n\t\t\t\t\tmessage.storageRebate = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 non_refundable_storage_fee */ 6:\n\t\t\t\t\tmessage.nonRefundableStorageFee = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional google.protobuf.Timestamp epoch_start_timestamp */ 7:\n\t\t\t\t\tmessage.epochStartTimestamp = Timestamp.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.epochStartTimestamp,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.SystemPackage system_packages */ 8:\n\t\t\t\t\tmessage.systemPackages.push(\n\t\t\t\t\t\tSystemPackage.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ChangeEpoch,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional uint64 epoch = 1; */\n\t\tif (message.epoch !== undefined) writer.tag(1, WireType.Varint).uint64(message.epoch);\n\t\t/* optional uint64 protocol_version = 2; */\n\t\tif (message.protocolVersion !== undefined)\n\t\t\twriter.tag(2, WireType.Varint).uint64(message.protocolVersion);\n\t\t/* optional uint64 storage_charge = 3; */\n\t\tif (message.storageCharge !== undefined)\n\t\t\twriter.tag(3, WireType.Varint).uint64(message.storageCharge);\n\t\t/* optional uint64 computation_charge = 4; */\n\t\tif (message.computationCharge !== undefined)\n\t\t\twriter.tag(4, WireType.Varint).uint64(message.computationCharge);\n\t\t/* optional uint64 storage_rebate = 5; */\n\t\tif (message.storageRebate !== undefined)\n\t\t\twriter.tag(5, WireType.Varint).uint64(message.storageRebate);\n\t\t/* optional uint64 non_refundable_storage_fee = 6; */\n\t\tif (message.nonRefundableStorageFee !== undefined)\n\t\t\twriter.tag(6, WireType.Varint).uint64(message.nonRefundableStorageFee);\n\t\t/* optional google.protobuf.Timestamp epoch_start_timestamp = 7; */\n\t\tif (message.epochStartTimestamp)\n\t\t\tTimestamp.internalBinaryWrite(\n\t\t\t\tmessage.epochStartTimestamp,\n\t\t\t\twriter.tag(7, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* repeated sui.rpc.v2beta2.SystemPackage system_packages = 8; */\n\t\tfor (let i = 0; i < message.systemPackages.length; i++)\n\t\t\tSystemPackage.internalBinaryWrite(\n\t\t\t\tmessage.systemPackages[i],\n\t\t\t\twriter.tag(8, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ChangeEpoch\n */\nexport const ChangeEpoch = new ChangeEpoch$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SystemPackage$Type extends MessageType<SystemPackage> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.SystemPackage', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'version',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'modules',\n\t\t\t\tkind: 'scalar',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: 12 /*ScalarType.BYTES*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'dependencies',\n\t\t\t\tkind: 'scalar',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: 9 /*ScalarType.STRING*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<SystemPackage>): SystemPackage {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.modules = [];\n\t\tmessage.dependencies = [];\n\t\tif (value !== undefined) reflectionMergePartial<SystemPackage>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: SystemPackage,\n\t): SystemPackage {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional uint64 version */ 1:\n\t\t\t\t\tmessage.version = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated bytes modules */ 2:\n\t\t\t\t\tmessage.modules.push(reader.bytes());\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated string dependencies */ 3:\n\t\t\t\t\tmessage.dependencies.push(reader.string());\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: SystemPackage,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional uint64 version = 1; */\n\t\tif (message.version !== undefined) writer.tag(1, WireType.Varint).uint64(message.version);\n\t\t/* repeated bytes modules = 2; */\n\t\tfor (let i = 0; i < message.modules.length; i++)\n\t\t\twriter.tag(2, WireType.LengthDelimited).bytes(message.modules[i]);\n\t\t/* repeated string dependencies = 3; */\n\t\tfor (let i = 0; i < message.dependencies.length; i++)\n\t\t\twriter.tag(3, WireType.LengthDelimited).string(message.dependencies[i]);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.SystemPackage\n */\nexport const SystemPackage = new SystemPackage$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GenesisTransaction$Type extends MessageType<GenesisTransaction> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.GenesisTransaction', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'objects',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => Object,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<GenesisTransaction>): GenesisTransaction {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.objects = [];\n\t\tif (value !== undefined) reflectionMergePartial<GenesisTransaction>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: GenesisTransaction,\n\t): GenesisTransaction {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.Object objects */ 1:\n\t\t\t\t\tmessage.objects.push(Object.internalBinaryRead(reader, reader.uint32(), options));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: GenesisTransaction,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* repeated sui.rpc.v2beta2.Object objects = 1; */\n\t\tfor (let i = 0; i < message.objects.length; i++)\n\t\t\tObject.internalBinaryWrite(\n\t\t\t\tmessage.objects[i],\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.GenesisTransaction\n */\nexport const GenesisTransaction = new GenesisTransaction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConsensusCommitPrologue$Type extends MessageType<ConsensusCommitPrologue> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ConsensusCommitPrologue', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'epoch',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'round',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 3, name: 'commit_timestamp', kind: 'message', T: () => Timestamp },\n\t\t\t{\n\t\t\t\tno: 4,\n\t\t\t\tname: 'consensus_commit_digest',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 9 /*ScalarType.STRING*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 5,\n\t\t\t\tname: 'sub_dag_index',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 6,\n\t\t\t\tname: 'consensus_determined_version_assignments',\n\t\t\t\tkind: 'message',\n\t\t\t\tT: () => ConsensusDeterminedVersionAssignments,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 7,\n\t\t\t\tname: 'additional_state_digest',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 9 /*ScalarType.STRING*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ConsensusCommitPrologue>): ConsensusCommitPrologue {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<ConsensusCommitPrologue>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ConsensusCommitPrologue,\n\t): ConsensusCommitPrologue {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional uint64 epoch */ 1:\n\t\t\t\t\tmessage.epoch = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 round */ 2:\n\t\t\t\t\tmessage.round = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional google.protobuf.Timestamp commit_timestamp */ 3:\n\t\t\t\t\tmessage.commitTimestamp = Timestamp.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.commitTimestamp,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string consensus_commit_digest */ 4:\n\t\t\t\t\tmessage.consensusCommitDigest = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 sub_dag_index */ 5:\n\t\t\t\t\tmessage.subDagIndex = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.ConsensusDeterminedVersionAssignments consensus_determined_version_assignments */ 6:\n\t\t\t\t\tmessage.consensusDeterminedVersionAssignments =\n\t\t\t\t\t\tConsensusDeterminedVersionAssignments.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\tmessage.consensusDeterminedVersionAssignments,\n\t\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string additional_state_digest */ 7:\n\t\t\t\t\tmessage.additionalStateDigest = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ConsensusCommitPrologue,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional uint64 epoch = 1; */\n\t\tif (message.epoch !== undefined) writer.tag(1, WireType.Varint).uint64(message.epoch);\n\t\t/* optional uint64 round = 2; */\n\t\tif (message.round !== undefined) writer.tag(2, WireType.Varint).uint64(message.round);\n\t\t/* optional google.protobuf.Timestamp commit_timestamp = 3; */\n\t\tif (message.commitTimestamp)\n\t\t\tTimestamp.internalBinaryWrite(\n\t\t\t\tmessage.commitTimestamp,\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional string consensus_commit_digest = 4; */\n\t\tif (message.consensusCommitDigest !== undefined)\n\t\t\twriter.tag(4, WireType.LengthDelimited).string(message.consensusCommitDigest);\n\t\t/* optional uint64 sub_dag_index = 5; */\n\t\tif (message.subDagIndex !== undefined)\n\t\t\twriter.tag(5, WireType.Varint).uint64(message.subDagIndex);\n\t\t/* optional sui.rpc.v2beta2.ConsensusDeterminedVersionAssignments consensus_determined_version_assignments = 6; */\n\t\tif (message.consensusDeterminedVersionAssignments)\n\t\t\tConsensusDeterminedVersionAssignments.internalBinaryWrite(\n\t\t\t\tmessage.consensusDeterminedVersionAssignments,\n\t\t\t\twriter.tag(6, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional string additional_state_digest = 7; */\n\t\tif (message.additionalStateDigest !== undefined)\n\t\t\twriter.tag(7, WireType.LengthDelimited).string(message.additionalStateDigest);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ConsensusCommitPrologue\n */\nexport const ConsensusCommitPrologue = new ConsensusCommitPrologue$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VersionAssignment$Type extends MessageType<VersionAssignment> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.VersionAssignment', [\n\t\t\t{ no: 1, name: 'object_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'start_version',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'version',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<VersionAssignment>): VersionAssignment {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<VersionAssignment>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: VersionAssignment,\n\t): VersionAssignment {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string object_id */ 1:\n\t\t\t\t\tmessage.objectId = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 start_version */ 2:\n\t\t\t\t\tmessage.startVersion = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 version */ 3:\n\t\t\t\t\tmessage.version = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: VersionAssignment,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string object_id = 1; */\n\t\tif (message.objectId !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).string(message.objectId);\n\t\t/* optional uint64 start_version = 2; */\n\t\tif (message.startVersion !== undefined)\n\t\t\twriter.tag(2, WireType.Varint).uint64(message.startVersion);\n\t\t/* optional uint64 version = 3; */\n\t\tif (message.version !== undefined) writer.tag(3, WireType.Varint).uint64(message.version);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.VersionAssignment\n */\nexport const VersionAssignment = new VersionAssignment$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CanceledTransaction$Type extends MessageType<CanceledTransaction> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.CanceledTransaction', [\n\t\t\t{ no: 1, name: 'digest', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'version_assignments',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => VersionAssignment,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<CanceledTransaction>): CanceledTransaction {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.versionAssignments = [];\n\t\tif (value !== undefined) reflectionMergePartial<CanceledTransaction>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: CanceledTransaction,\n\t): CanceledTransaction {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string digest */ 1:\n\t\t\t\t\tmessage.digest = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.VersionAssignment version_assignments */ 2:\n\t\t\t\t\tmessage.versionAssignments.push(\n\t\t\t\t\t\tVersionAssignment.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: CanceledTransaction,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string digest = 1; */\n\t\tif (message.digest !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).string(message.digest);\n\t\t/* repeated sui.rpc.v2beta2.VersionAssignment version_assignments = 2; */\n\t\tfor (let i = 0; i < message.versionAssignments.length; i++)\n\t\t\tVersionAssignment.internalBinaryWrite(\n\t\t\t\tmessage.versionAssignments[i],\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.CanceledTransaction\n */\nexport const CanceledTransaction = new CanceledTransaction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConsensusDeterminedVersionAssignments$Type extends MessageType<ConsensusDeterminedVersionAssignments> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ConsensusDeterminedVersionAssignments', [\n\t\t\t{ no: 1, name: 'version', kind: 'scalar', opt: true, T: 5 /*ScalarType.INT32*/ },\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'canceled_transactions',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => CanceledTransaction,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(\n\t\tvalue?: PartialMessage<ConsensusDeterminedVersionAssignments>,\n\t): ConsensusDeterminedVersionAssignments {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.canceledTransactions = [];\n\t\tif (value !== undefined)\n\t\t\treflectionMergePartial<ConsensusDeterminedVersionAssignments>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ConsensusDeterminedVersionAssignments,\n\t): ConsensusDeterminedVersionAssignments {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional int32 version */ 1:\n\t\t\t\t\tmessage.version = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.CanceledTransaction canceled_transactions */ 3:\n\t\t\t\t\tmessage.canceledTransactions.push(\n\t\t\t\t\t\tCanceledTransaction.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ConsensusDeterminedVersionAssignments,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional int32 version = 1; */\n\t\tif (message.version !== undefined) writer.tag(1, WireType.Varint).int32(message.version);\n\t\t/* repeated sui.rpc.v2beta2.CanceledTransaction canceled_transactions = 3; */\n\t\tfor (let i = 0; i < message.canceledTransactions.length; i++)\n\t\t\tCanceledTransaction.internalBinaryWrite(\n\t\t\t\tmessage.canceledTransactions[i],\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ConsensusDeterminedVersionAssignments\n */\nexport const ConsensusDeterminedVersionAssignments =\n\tnew ConsensusDeterminedVersionAssignments$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AuthenticatorStateUpdate$Type extends MessageType<AuthenticatorStateUpdate> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.AuthenticatorStateUpdate', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'epoch',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'round',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'new_active_jwks',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => ActiveJwk,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 4,\n\t\t\t\tname: 'authenticator_object_initial_shared_version',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<AuthenticatorStateUpdate>): AuthenticatorStateUpdate {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.newActiveJwks = [];\n\t\tif (value !== undefined) reflectionMergePartial<AuthenticatorStateUpdate>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: AuthenticatorStateUpdate,\n\t): AuthenticatorStateUpdate {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional uint64 epoch */ 1:\n\t\t\t\t\tmessage.epoch = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 round */ 2:\n\t\t\t\t\tmessage.round = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.ActiveJwk new_active_jwks */ 3:\n\t\t\t\t\tmessage.newActiveJwks.push(\n\t\t\t\t\t\tActiveJwk.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 authenticator_object_initial_shared_version */ 4:\n\t\t\t\t\tmessage.authenticatorObjectInitialSharedVersion = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: AuthenticatorStateUpdate,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional uint64 epoch = 1; */\n\t\tif (message.epoch !== undefined) writer.tag(1, WireType.Varint).uint64(message.epoch);\n\t\t/* optional uint64 round = 2; */\n\t\tif (message.round !== undefined) writer.tag(2, WireType.Varint).uint64(message.round);\n\t\t/* repeated sui.rpc.v2beta2.ActiveJwk new_active_jwks = 3; */\n\t\tfor (let i = 0; i < message.newActiveJwks.length; i++)\n\t\t\tActiveJwk.internalBinaryWrite(\n\t\t\t\tmessage.newActiveJwks[i],\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional uint64 authenticator_object_initial_shared_version = 4; */\n\t\tif (message.authenticatorObjectInitialSharedVersion !== undefined)\n\t\t\twriter.tag(4, WireType.Varint).uint64(message.authenticatorObjectInitialSharedVersion);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.AuthenticatorStateUpdate\n */\nexport const AuthenticatorStateUpdate = new AuthenticatorStateUpdate$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ActiveJwk$Type extends MessageType<ActiveJwk> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ActiveJwk', [\n\t\t\t{ no: 1, name: 'id', kind: 'message', T: () => JwkId },\n\t\t\t{ no: 2, name: 'jwk', kind: 'message', T: () => Jwk },\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'epoch',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ActiveJwk>): ActiveJwk {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<ActiveJwk>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ActiveJwk,\n\t): ActiveJwk {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.JwkId id */ 1:\n\t\t\t\t\tmessage.id = JwkId.internalBinaryRead(reader, reader.uint32(), options, message.id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Jwk jwk */ 2:\n\t\t\t\t\tmessage.jwk = Jwk.internalBinaryRead(reader, reader.uint32(), options, message.jwk);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 epoch */ 3:\n\t\t\t\t\tmessage.epoch = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ActiveJwk,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.JwkId id = 1; */\n\t\tif (message.id)\n\t\t\tJwkId.internalBinaryWrite(\n\t\t\t\tmessage.id,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.Jwk jwk = 2; */\n\t\tif (message.jwk)\n\t\t\tJwk.internalBinaryWrite(\n\t\t\t\tmessage.jwk,\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional uint64 epoch = 3; */\n\t\tif (message.epoch !== undefined) writer.tag(3, WireType.Varint).uint64(message.epoch);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ActiveJwk\n */\nexport const ActiveJwk = new ActiveJwk$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass JwkId$Type extends MessageType<JwkId> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.JwkId', [\n\t\t\t{ no: 1, name: 'iss', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'kid', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<JwkId>): JwkId {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<JwkId>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: JwkId,\n\t): JwkId {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string iss */ 1:\n\t\t\t\t\tmessage.iss = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string kid */ 2:\n\t\t\t\t\tmessage.kid = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: JwkId,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string iss = 1; */\n\t\tif (message.iss !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.iss);\n\t\t/* optional string kid = 2; */\n\t\tif (message.kid !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.kid);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.JwkId\n */\nexport const JwkId = new JwkId$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Jwk$Type extends MessageType<Jwk> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.Jwk', [\n\t\t\t{ no: 1, name: 'kty', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'e', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 3, name: 'n', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 4, name: 'alg', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<Jwk>): Jwk {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<Jwk>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: Jwk,\n\t): Jwk {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string kty */ 1:\n\t\t\t\t\tmessage.kty = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string e */ 2:\n\t\t\t\t\tmessage.e = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string n */ 3:\n\t\t\t\t\tmessage.n = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string alg */ 4:\n\t\t\t\t\tmessage.alg = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: Jwk,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string kty = 1; */\n\t\tif (message.kty !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.kty);\n\t\t/* optional string e = 2; */\n\t\tif (message.e !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.e);\n\t\t/* optional string n = 3; */\n\t\tif (message.n !== undefined) writer.tag(3, WireType.LengthDelimited).string(message.n);\n\t\t/* optional string alg = 4; */\n\t\tif (message.alg !== undefined) writer.tag(4, WireType.LengthDelimited).string(message.alg);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.Jwk\n */\nexport const Jwk = new Jwk$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EndOfEpochTransaction$Type extends MessageType<EndOfEpochTransaction> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.EndOfEpochTransaction', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'transactions',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => EndOfEpochTransactionKind,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<EndOfEpochTransaction>): EndOfEpochTransaction {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.transactions = [];\n\t\tif (value !== undefined) reflectionMergePartial<EndOfEpochTransaction>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: EndOfEpochTransaction,\n\t): EndOfEpochTransaction {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.EndOfEpochTransactionKind transactions */ 1:\n\t\t\t\t\tmessage.transactions.push(\n\t\t\t\t\t\tEndOfEpochTransactionKind.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: EndOfEpochTransaction,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* repeated sui.rpc.v2beta2.EndOfEpochTransactionKind transactions = 1; */\n\t\tfor (let i = 0; i < message.transactions.length; i++)\n\t\t\tEndOfEpochTransactionKind.internalBinaryWrite(\n\t\t\t\tmessage.transactions[i],\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.EndOfEpochTransaction\n */\nexport const EndOfEpochTransaction = new EndOfEpochTransaction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EndOfEpochTransactionKind$Type extends MessageType<EndOfEpochTransactionKind> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.EndOfEpochTransactionKind', [\n\t\t\t{ no: 2, name: 'change_epoch', kind: 'message', oneof: 'kind', T: () => ChangeEpoch },\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'authenticator_state_expire',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'kind',\n\t\t\t\tT: () => AuthenticatorStateExpire,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 4,\n\t\t\t\tname: 'execution_time_observations',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'kind',\n\t\t\t\tT: () => ExecutionTimeObservations,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 200,\n\t\t\t\tname: 'authenticator_state_create',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'kind',\n\t\t\t\tT: () => Empty,\n\t\t\t},\n\t\t\t{ no: 201, name: 'randomness_state_create', kind: 'message', oneof: 'kind', T: () => Empty },\n\t\t\t{ no: 202, name: 'deny_list_state_create', kind: 'message', oneof: 'kind', T: () => Empty },\n\t\t\t{\n\t\t\t\tno: 203,\n\t\t\t\tname: 'bridge_state_create',\n\t\t\t\tkind: 'scalar',\n\t\t\t\toneof: 'kind',\n\t\t\t\tT: 9 /*ScalarType.STRING*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 204,\n\t\t\t\tname: 'bridge_committee_init',\n\t\t\t\tkind: 'scalar',\n\t\t\t\toneof: 'kind',\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 205, name: 'accumulator_root_create', kind: 'message', oneof: 'kind', T: () => Empty },\n\t\t\t{ no: 206, name: 'coin_registry_create', kind: 'message', oneof: 'kind', T: () => Empty },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<EndOfEpochTransactionKind>): EndOfEpochTransactionKind {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.kind = { oneofKind: undefined };\n\t\tif (value !== undefined)\n\t\t\treflectionMergePartial<EndOfEpochTransactionKind>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: EndOfEpochTransactionKind,\n\t): EndOfEpochTransactionKind {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* sui.rpc.v2beta2.ChangeEpoch change_epoch */ 2:\n\t\t\t\t\tmessage.kind = {\n\t\t\t\t\t\toneofKind: 'changeEpoch',\n\t\t\t\t\t\tchangeEpoch: ChangeEpoch.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.kind as any).changeEpoch,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.AuthenticatorStateExpire authenticator_state_expire */ 3:\n\t\t\t\t\tmessage.kind = {\n\t\t\t\t\t\toneofKind: 'authenticatorStateExpire',\n\t\t\t\t\t\tauthenticatorStateExpire: AuthenticatorStateExpire.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.kind as any).authenticatorStateExpire,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* sui.rpc.v2beta2.ExecutionTimeObservations execution_time_observations */ 4:\n\t\t\t\t\tmessage.kind = {\n\t\t\t\t\t\toneofKind: 'executionTimeObservations',\n\t\t\t\t\t\texecutionTimeObservations: ExecutionTimeObservations.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.kind as any).executionTimeObservations,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* google.protobuf.Empty authenticator_state_create */ 200:\n\t\t\t\t\tmessage.kind = {\n\t\t\t\t\t\toneofKind: 'authenticatorStateCreate',\n\t\t\t\t\t\tauthenticatorStateCreate: Empty.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.kind as any).authenticatorStateCreate,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* google.protobuf.Empty randomness_state_create */ 201:\n\t\t\t\t\tmessage.kind = {\n\t\t\t\t\t\toneofKind: 'randomnessStateCreate',\n\t\t\t\t\t\trandomnessStateCreate: Empty.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.kind as any).randomnessStateCreate,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* google.protobuf.Empty deny_list_state_create */ 202:\n\t\t\t\t\tmessage.kind = {\n\t\t\t\t\t\toneofKind: 'denyListStateCreate',\n\t\t\t\t\t\tdenyListStateCreate: Empty.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.kind as any).denyListStateCreate,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* string bridge_state_create */ 203:\n\t\t\t\t\tmessage.kind = {\n\t\t\t\t\t\toneofKind: 'bridgeStateCreate',\n\t\t\t\t\t\tbridgeStateCreate: reader.string(),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* uint64 bridge_committee_init */ 204:\n\t\t\t\t\tmessage.kind = {\n\t\t\t\t\t\toneofKind: 'bridgeCommitteeInit',\n\t\t\t\t\t\tbridgeCommitteeInit: reader.uint64().toBigInt(),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* google.protobuf.Empty accumulator_root_create */ 205:\n\t\t\t\t\tmessage.kind = {\n\t\t\t\t\t\toneofKind: 'accumulatorRootCreate',\n\t\t\t\t\t\taccumulatorRootCreate: Empty.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.kind as any).accumulatorRootCreate,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* google.protobuf.Empty coin_registry_create */ 206:\n\t\t\t\t\tmessage.kind = {\n\t\t\t\t\t\toneofKind: 'coinRegistryCreate',\n\t\t\t\t\t\tcoinRegistryCreate: Empty.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.kind as any).coinRegistryCreate,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: EndOfEpochTransactionKind,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* sui.rpc.v2beta2.ChangeEpoch change_epoch = 2; */\n\t\tif (message.kind.oneofKind === 'changeEpoch')\n\t\t\tChangeEpoch.internalBinaryWrite(\n\t\t\t\tmessage.kind.changeEpoch,\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.AuthenticatorStateExpire authenticator_state_expire = 3; */\n\t\tif (message.kind.oneofKind === 'authenticatorStateExpire')\n\t\t\tAuthenticatorStateExpire.internalBinaryWrite(\n\t\t\t\tmessage.kind.authenticatorStateExpire,\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* sui.rpc.v2beta2.ExecutionTimeObservations execution_time_observations = 4; */\n\t\tif (message.kind.oneofKind === 'executionTimeObservations')\n\t\t\tExecutionTimeObservations.internalBinaryWrite(\n\t\t\t\tmessage.kind.executionTimeObservations,\n\t\t\t\twriter.tag(4, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* google.protobuf.Empty authenticator_state_create = 200; */\n\t\tif (message.kind.oneofKind === 'authenticatorStateCreate')\n\t\t\tEmpty.internalBinaryWrite(\n\t\t\t\tmessage.kind.authenticatorStateCreate,\n\t\t\t\twriter.tag(200, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* google.protobuf.Empty randomness_state_create = 201; */\n\t\tif (message.kind.oneofKind === 'randomnessStateCreate')\n\t\t\tEmpty.internalBinaryWrite(\n\t\t\t\tmessage.kind.randomnessStateCreate,\n\t\t\t\twriter.tag(201, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* google.protobuf.Empty deny_list_state_create = 202; */\n\t\tif (message.kind.oneofKind === 'denyListStateCreate')\n\t\t\tEmpty.internalBinaryWrite(\n\t\t\t\tmessage.kind.denyListStateCreate,\n\t\t\t\twriter.tag(202, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* string bridge_state_create = 203; */\n\t\tif (message.kind.oneofKind === 'bridgeStateCreate')\n\t\t\twriter.tag(203, WireType.LengthDelimited).string(message.kind.bridgeStateCreate);\n\t\t/* uint64 bridge_committee_init = 204; */\n\t\tif (message.kind.oneofKind === 'bridgeCommitteeInit')\n\t\t\twriter.tag(204, WireType.Varint).uint64(message.kind.bridgeCommitteeInit);\n\t\t/* google.protobuf.Empty accumulator_root_create = 205; */\n\t\tif (message.kind.oneofKind === 'accumulatorRootCreate')\n\t\t\tEmpty.internalBinaryWrite(\n\t\t\t\tmessage.kind.accumulatorRootCreate,\n\t\t\t\twriter.tag(205, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* google.protobuf.Empty coin_registry_create = 206; */\n\t\tif (message.kind.oneofKind === 'coinRegistryCreate')\n\t\t\tEmpty.internalBinaryWrite(\n\t\t\t\tmessage.kind.coinRegistryCreate,\n\t\t\t\twriter.tag(206, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.EndOfEpochTransactionKind\n */\nexport const EndOfEpochTransactionKind = new EndOfEpochTransactionKind$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AuthenticatorStateExpire$Type extends MessageType<AuthenticatorStateExpire> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.AuthenticatorStateExpire', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'min_epoch',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'authenticator_object_initial_shared_version',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<AuthenticatorStateExpire>): AuthenticatorStateExpire {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<AuthenticatorStateExpire>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: AuthenticatorStateExpire,\n\t): AuthenticatorStateExpire {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional uint64 min_epoch */ 1:\n\t\t\t\t\tmessage.minEpoch = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 authenticator_object_initial_shared_version */ 2:\n\t\t\t\t\tmessage.authenticatorObjectInitialSharedVersion = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: AuthenticatorStateExpire,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional uint64 min_epoch = 1; */\n\t\tif (message.minEpoch !== undefined) writer.tag(1, WireType.Varint).uint64(message.minEpoch);\n\t\t/* optional uint64 authenticator_object_initial_shared_version = 2; */\n\t\tif (message.authenticatorObjectInitialSharedVersion !== undefined)\n\t\t\twriter.tag(2, WireType.Varint).uint64(message.authenticatorObjectInitialSharedVersion);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.AuthenticatorStateExpire\n */\nexport const AuthenticatorStateExpire = new AuthenticatorStateExpire$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ExecutionTimeObservations$Type extends MessageType<ExecutionTimeObservations> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ExecutionTimeObservations', [\n\t\t\t{ no: 1, name: 'version', kind: 'scalar', opt: true, T: 5 /*ScalarType.INT32*/ },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'observations',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => ExecutionTimeObservation,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ExecutionTimeObservations>): ExecutionTimeObservations {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.observations = [];\n\t\tif (value !== undefined)\n\t\t\treflectionMergePartial<ExecutionTimeObservations>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ExecutionTimeObservations,\n\t): ExecutionTimeObservations {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional int32 version */ 1:\n\t\t\t\t\tmessage.version = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.ExecutionTimeObservation observations */ 2:\n\t\t\t\t\tmessage.observations.push(\n\t\t\t\t\t\tExecutionTimeObservation.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ExecutionTimeObservations,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional int32 version = 1; */\n\t\tif (message.version !== undefined) writer.tag(1, WireType.Varint).int32(message.version);\n\t\t/* repeated sui.rpc.v2beta2.ExecutionTimeObservation observations = 2; */\n\t\tfor (let i = 0; i < message.observations.length; i++)\n\t\t\tExecutionTimeObservation.internalBinaryWrite(\n\t\t\t\tmessage.observations[i],\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ExecutionTimeObservations\n */\nexport const ExecutionTimeObservations = new ExecutionTimeObservations$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ExecutionTimeObservation$Type extends MessageType<ExecutionTimeObservation> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ExecutionTimeObservation', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'kind',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => [\n\t\t\t\t\t'sui.rpc.v2beta2.ExecutionTimeObservation.ExecutionTimeObservationKind',\n\t\t\t\t\tExecutionTimeObservation_ExecutionTimeObservationKind,\n\t\t\t\t],\n\t\t\t},\n\t\t\t{ no: 2, name: 'move_entry_point', kind: 'message', T: () => MoveCall },\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'validator_observations',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => ValidatorExecutionTimeObservation,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ExecutionTimeObservation>): ExecutionTimeObservation {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.validatorObservations = [];\n\t\tif (value !== undefined) reflectionMergePartial<ExecutionTimeObservation>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ExecutionTimeObservation,\n\t): ExecutionTimeObservation {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.ExecutionTimeObservation.ExecutionTimeObservationKind kind */ 1:\n\t\t\t\t\tmessage.kind = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.MoveCall move_entry_point */ 2:\n\t\t\t\t\tmessage.moveEntryPoint = MoveCall.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.moveEntryPoint,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.ValidatorExecutionTimeObservation validator_observations */ 3:\n\t\t\t\t\tmessage.validatorObservations.push(\n\t\t\t\t\t\tValidatorExecutionTimeObservation.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ExecutionTimeObservation,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.ExecutionTimeObservation.ExecutionTimeObservationKind kind = 1; */\n\t\tif (message.kind !== undefined) writer.tag(1, WireType.Varint).int32(message.kind);\n\t\t/* optional sui.rpc.v2beta2.MoveCall move_entry_point = 2; */\n\t\tif (message.moveEntryPoint)\n\t\t\tMoveCall.internalBinaryWrite(\n\t\t\t\tmessage.moveEntryPoint,\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* repeated sui.rpc.v2beta2.ValidatorExecutionTimeObservation validator_observations = 3; */\n\t\tfor (let i = 0; i < message.validatorObservations.length; i++)\n\t\t\tValidatorExecutionTimeObservation.internalBinaryWrite(\n\t\t\t\tmessage.validatorObservations[i],\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ExecutionTimeObservation\n */\nexport const ExecutionTimeObservation = new ExecutionTimeObservation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ValidatorExecutionTimeObservation$Type extends MessageType<ValidatorExecutionTimeObservation> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ValidatorExecutionTimeObservation', [\n\t\t\t{ no: 1, name: 'validator', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{ no: 2, name: 'duration', kind: 'message', T: () => Duration },\n\t\t]);\n\t}\n\tcreate(\n\t\tvalue?: PartialMessage<ValidatorExecutionTimeObservation>,\n\t): ValidatorExecutionTimeObservation {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined)\n\t\t\treflectionMergePartial<ValidatorExecutionTimeObservation>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ValidatorExecutionTimeObservation,\n\t): ValidatorExecutionTimeObservation {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional bytes validator */ 1:\n\t\t\t\t\tmessage.validator = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional google.protobuf.Duration duration */ 2:\n\t\t\t\t\tmessage.duration = Duration.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.duration,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ValidatorExecutionTimeObservation,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional bytes validator = 1; */\n\t\tif (message.validator !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).bytes(message.validator);\n\t\t/* optional google.protobuf.Duration duration = 2; */\n\t\tif (message.duration)\n\t\t\tDuration.internalBinaryWrite(\n\t\t\t\tmessage.duration,\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ValidatorExecutionTimeObservation\n */\nexport const ValidatorExecutionTimeObservation = new ValidatorExecutionTimeObservation$Type();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,qBAAyB;AAGzB,IAAAA,kBAAoC;AAEpC,IAAAA,kBAAuC;AACvC,IAAAA,kBAA4B;AAC5B,sBAAyB;AACzB,mBAAsB;AACtB,oBAAuB;AACvB,uBAA0B;AAC1B,sBAAyB;AACzB,mBAAsB;AACtB,8BAAgC;AAChC,iBAAoB;AA6Fb,IAAK,kDAAL,kBAAKC,qDAAL;AAIN,EAAAA,kGAAA,yCAAsC,KAAtC;AAMA,EAAAA,kGAAA,UAAO,KAAP;AAOA,EAAAA,kGAAA,WAAQ,KAAR;AAjBW,SAAAA;AAAA,GAAA;AAs8BL,IAAK,wDAAL,kBAAKC,2DAAL;AAIN,EAAAA,8GAAA,6CAA0C,KAA1C;AAIA,EAAAA,8GAAA,sBAAmB,KAAnB;AAIA,EAAAA,8GAAA,sBAAmB,KAAnB;AAIA,EAAAA,8GAAA,iBAAc,KAAd;AAIA,EAAAA,8GAAA,iBAAc,KAAd;AAIA,EAAAA,8GAAA,aAAU,KAAV;AAIA,EAAAA,8GAAA,sBAAmB,KAAnB;AAIA,EAAAA,8GAAA,aAAU,KAAV;AAhCW,SAAAA;AAAA,GAAA;AAoDZ,MAAM,yBAAyB,4BAAyB;AAAA,EACvD,cAAc;AACb,UAAM,+BAA+B;AAAA,MACpC,EAAE,IAAI,GAAG,MAAM,OAAO,MAAM,WAAW,GAAG,MAAM,eAAI;AAAA,MACpD;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAU,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAC/E;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAW,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAuB;AAAA,MAC/E,EAAE,IAAI,GAAG,MAAM,QAAQ,MAAM,WAAW,GAAG,MAAM,gBAAgB;AAAA,MACjE;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAU,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAC/E,EAAE,IAAI,GAAG,MAAM,eAAe,MAAM,WAAW,GAAG,MAAM,WAAW;AAAA,MACnE,EAAE,IAAI,GAAG,MAAM,cAAc,MAAM,WAAW,GAAG,MAAM,sBAAsB;AAAA,IAC9E,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAkD;AACxD,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAAoC,MAAM,SAAS,KAAK;AACjF,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACc;AACd,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAA4C;AAC3C,kBAAQ,MAAM,eAAI,mBAAmB,QAAQ,OAAO,OAAO,GAAG,SAAS,QAAQ,GAAG;AAClF;AAAA,QACD;AAAA,QAAkC;AACjC,kBAAQ,SAAS,OAAO,OAAO;AAC/B;AAAA,QACD;AAAA,QAAkC;AACjC,kBAAQ,UAAU,OAAO,MAAM;AAC/B;AAAA,QACD;AAAA,QAAyD;AACxD,kBAAQ,OAAO,gBAAgB;AAAA,YAC9B;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AAAA,QAAkC;AACjC,kBAAQ,SAAS,OAAO,OAAO;AAC/B;AAAA,QACD;AAAA,QAA2D;AAC1D,kBAAQ,aAAa,WAAW;AAAA,YAC/B;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AAAA,QAAqE;AACpE,kBAAQ,aAAa,sBAAsB;AAAA,YAC1C;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ;AACX,qBAAI;AAAA,QACH,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,WAAW;AACtB,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,MAAM;AAE9D,QAAI,QAAQ,YAAY,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,MAAM,QAAQ,OAAO;AAEvF,QAAI,QAAQ;AACX,sBAAgB;AAAA,QACf,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,WAAW;AACtB,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,MAAM;AAE9D,QAAI,QAAQ;AACX,iBAAW;AAAA,QACV,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ;AACX,4BAAsB;AAAA,QACrB,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,cAAc,IAAI,iBAAiB;AAEhD,MAAM,wBAAwB,4BAAwB;AAAA,EACrD,cAAc;AACb,UAAM,8BAA8B;AAAA,MACnC;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAS,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAC9E;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAgD;AACtD,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,UAAU,CAAC;AACnB,QAAI,UAAU,OAAW,6CAAmC,MAAM,SAAS,KAAK;AAChF,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACa;AACb,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAA4D;AAC3D,kBAAQ,QAAQ;AAAA,YACf,wCAAgB,mBAAmB,QAAQ,OAAO,OAAO,GAAG,OAAO;AAAA,UACpE;AACA;AAAA,QACD;AAAA,QAAiC;AAChC,kBAAQ,QAAQ,OAAO,OAAO;AAC9B;AAAA,QACD;AAAA,QAAiC;AAChC,kBAAQ,QAAQ,OAAO,OAAO,EAAE,SAAS;AACzC;AAAA,QACD;AAAA,QAAkC;AACjC,kBAAQ,SAAS,OAAO,OAAO,EAAE,SAAS;AAC1C;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,QAAQ;AAC3C,8CAAgB;AAAA,QACf,QAAQ,QAAQ,CAAC;AAAA,QACjB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,UAAU,OAAW,QAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,KAAK;AAE7F,QAAI,QAAQ,UAAU,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,KAAK;AAEpF,QAAI,QAAQ,WAAW,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,MAAM;AACtF,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,aAAa,IAAI,gBAAgB;AAE9C,MAAM,mCAAmC,4BAAmC;AAAA,EAC3E,cAAc;AACb,UAAM,yCAAyC;AAAA,MAC9C;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG,MAAM;AAAA,UACR;AAAA,UACA;AAAA,QACD;AAAA,MACD;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAsE;AAC5E,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAA8C,MAAM,SAAS,KAAK;AAC3F,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACwB;AACxB,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAyF;AACxF,kBAAQ,OAAO,OAAO,MAAM;AAC5B;AAAA,QACD;AAAA,QAAiC;AAChC,kBAAQ,QAAQ,OAAO,OAAO,EAAE,SAAS;AACzC;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,SAAS,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,MAAM,QAAQ,IAAI;AAEjF,QAAI,QAAQ,UAAU,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,KAAK;AACpF,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,wBAAwB,IAAI,2BAA2B;AAEpE,MAAM,6BAA6B,4BAA6B;AAAA,EAC/D,cAAc;AACb,UAAM,mCAAmC;AAAA,MACxC;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,GAAG,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,GAAG,MAAM;AAAA,MACV;AAAA,MACA,EAAE,IAAI,KAAK,MAAM,gBAAgB,MAAM,WAAW,OAAO,QAAQ,GAAG,MAAM,YAAY;AAAA,MACtF,EAAE,IAAI,KAAK,MAAM,WAAW,MAAM,WAAW,OAAO,QAAQ,GAAG,MAAM,mBAAmB;AAAA,MACxF;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,GAAG,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,GAAG,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,GAAG,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,GAAG,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,GAAG,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,GAAG,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,GAAG,MAAM;AAAA,MACV;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA0D;AAChE,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,OAAO,EAAE,WAAW,OAAU;AACtC,QAAI,UAAU,OAAW,6CAAwC,MAAM,SAAS,KAAK;AACrF,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACkB;AAClB,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAA4E;AAC3E,kBAAQ,OAAO;AAAA,YACd,WAAW;AAAA,YACX,yBAAyB,wBAAwB;AAAA,cAChD;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,KAAa;AAAA,YACvB;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAAmF;AAClF,kBAAQ,OAAO;AAAA,YACd,WAAW;AAAA,YACX,+BAA+B,wBAAwB;AAAA,cACtD;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,KAAa;AAAA,YACvB;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAAoD;AACnD,kBAAQ,OAAO;AAAA,YACd,WAAW;AAAA,YACX,aAAa,YAAY;AAAA,cACxB;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,KAAa;AAAA,YACvB;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAAsD;AACrD,kBAAQ,OAAO;AAAA,YACd,WAAW;AAAA,YACX,SAAS,mBAAmB;AAAA,cAC3B;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,KAAa;AAAA,YACvB;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAAgF;AAC/E,kBAAQ,OAAO;AAAA,YACd,WAAW;AAAA,YACX,2BAA2B,wBAAwB;AAAA,cAClD;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,KAAa;AAAA,YACvB;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAA+E;AAC9E,kBAAQ,OAAO;AAAA,YACd,WAAW;AAAA,YACX,0BAA0B,yBAAyB;AAAA,cAClD;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,KAAa;AAAA,YACvB;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAA8D;AAC7D,kBAAQ,OAAO;AAAA,YACd,WAAW;AAAA,YACX,YAAY,sBAAsB;AAAA,cACjC;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,KAAa;AAAA,YACvB;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAAyE;AACxE,kBAAQ,OAAO;AAAA,YACd,WAAW;AAAA,YACX,uBAAuB,sBAAsB;AAAA,cAC5C;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,KAAa;AAAA,YACvB;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAAgF;AAC/E,kBAAQ,OAAO;AAAA,YACd,WAAW;AAAA,YACX,2BAA2B,wBAAwB;AAAA,cAClD;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,KAAa;AAAA,YACvB;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAAgF;AAC/E,kBAAQ,OAAO;AAAA,YACd,WAAW;AAAA,YACX,2BAA2B,wBAAwB;AAAA,cAClD;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,KAAa;AAAA,YACvB;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAAgF;AAC/E,kBAAQ,OAAO;AAAA,YACd,WAAW;AAAA,YACX,2BAA2B,wBAAwB;AAAA,cAClD;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,KAAa;AAAA,YACvB;AAAA,UACD;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,KAAK,cAAc;AAC9B,8BAAwB;AAAA,QACvB,QAAQ,KAAK;AAAA,QACb,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,KAAK,cAAc;AAC9B,8BAAwB;AAAA,QACvB,QAAQ,KAAK;AAAA,QACb,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,KAAK,cAAc;AAC9B,kBAAY;AAAA,QACX,QAAQ,KAAK;AAAA,QACb,OAAO,IAAI,KAAK,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC/C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,KAAK,cAAc;AAC9B,yBAAmB;AAAA,QAClB,QAAQ,KAAK;AAAA,QACb,OAAO,IAAI,KAAK,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC/C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,KAAK,cAAc;AAC9B,8BAAwB;AAAA,QACvB,QAAQ,KAAK;AAAA,QACb,OAAO,IAAI,KAAK,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC/C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,KAAK,cAAc;AAC9B,+BAAyB;AAAA,QACxB,QAAQ,KAAK;AAAA,QACb,OAAO,IAAI,KAAK,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC/C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,KAAK,cAAc;AAC9B,4BAAsB;AAAA,QACrB,QAAQ,KAAK;AAAA,QACb,OAAO,IAAI,KAAK,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC/C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,KAAK,cAAc;AAC9B,4BAAsB;AAAA,QACrB,QAAQ,KAAK;AAAA,QACb,OAAO,IAAI,KAAK,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC/C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,KAAK,cAAc;AAC9B,8BAAwB;AAAA,QACvB,QAAQ,KAAK;AAAA,QACb,OAAO,IAAI,KAAK,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC/C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,KAAK,cAAc;AAC9B,8BAAwB;AAAA,QACvB,QAAQ,KAAK;AAAA,QACb,OAAO,IAAI,KAAK,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC/C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,KAAK,cAAc;AAC9B,8BAAwB;AAAA,QACvB,QAAQ,KAAK;AAAA,QACb,OAAO,IAAI,KAAK,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC/C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,kBAAkB,IAAI,qBAAqB;AAExD,MAAM,qCAAqC,4BAAqC;AAAA,EAC/E,cAAc;AACb,UAAM,2CAA2C;AAAA,MAChD,EAAE,IAAI,GAAG,MAAM,UAAU,MAAM,WAAW,QAAQ,GAA2B,GAAG,MAAM,mBAAM;AAAA,MAC5F;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG,MAAM;AAAA,MACV;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA0E;AAChF,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,SAAS,CAAC;AAClB,YAAQ,WAAW,CAAC;AACpB,QAAI,UAAU,OAAW,6CAAgD,MAAM,SAAS,KAAK;AAC7F,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QAC0B;AAC1B,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAiD;AAChD,kBAAQ,OAAO,KAAK,mBAAM,mBAAmB,QAAQ,OAAO,OAAO,GAAG,OAAO,CAAC;AAC9E;AAAA,QACD;AAAA,QAAqD;AACpD,kBAAQ,SAAS,KAAK,QAAQ,mBAAmB,QAAQ,OAAO,OAAO,GAAG,OAAO,CAAC;AAClF;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,aAAS,IAAI,GAAG,IAAI,QAAQ,OAAO,QAAQ;AAC1C,yBAAM;AAAA,QACL,QAAQ,OAAO,CAAC;AAAA,QAChB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,aAAS,IAAI,GAAG,IAAI,QAAQ,SAAS,QAAQ;AAC5C,cAAQ;AAAA,QACP,QAAQ,SAAS,CAAC;AAAA,QAClB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,0BAA0B,IAAI,6BAA6B;AAExE,MAAM,qBAAqB,4BAAqB;AAAA,EAC/C,cAAc;AACb,UAAM,2BAA2B;AAAA,MAChC,EAAE,IAAI,GAAG,MAAM,aAAa,MAAM,WAAW,OAAO,WAAW,GAAG,MAAM,SAAS;AAAA,MACjF;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,GAAG,MAAM;AAAA,MACV;AAAA,MACA,EAAE,IAAI,GAAG,MAAM,eAAe,MAAM,WAAW,OAAO,WAAW,GAAG,MAAM,WAAW;AAAA,MACrF,EAAE,IAAI,GAAG,MAAM,eAAe,MAAM,WAAW,OAAO,WAAW,GAAG,MAAM,WAAW;AAAA,MACrF,EAAE,IAAI,GAAG,MAAM,WAAW,MAAM,WAAW,OAAO,WAAW,GAAG,MAAM,QAAQ;AAAA,MAC9E;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,GAAG,MAAM;AAAA,MACV;AAAA,MACA,EAAE,IAAI,GAAG,MAAM,WAAW,MAAM,WAAW,OAAO,WAAW,GAAG,MAAM,QAAQ;AAAA,IAC/E,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA0C;AAChD,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,UAAU,EAAE,WAAW,OAAU;AACzC,QAAI,UAAU,OAAW,6CAAgC,MAAM,SAAS,KAAK;AAC7E,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACU;AACV,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAA8C;AAC7C,kBAAQ,UAAU;AAAA,YACjB,WAAW;AAAA,YACX,UAAU,SAAS;AAAA,cAClB;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,QAAgB;AAAA,YAC1B;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAA4D;AAC3D,kBAAQ,UAAU;AAAA,YACjB,WAAW;AAAA,YACX,iBAAiB,gBAAgB;AAAA,cAChC;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,QAAgB;AAAA,YAC1B;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAAkD;AACjD,kBAAQ,UAAU;AAAA,YACjB,WAAW;AAAA,YACX,YAAY,WAAW;AAAA,cACtB;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,QAAgB;AAAA,YAC1B;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAAkD;AACjD,kBAAQ,UAAU;AAAA,YACjB,WAAW;AAAA,YACX,YAAY,WAAW;AAAA,cACtB;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,QAAgB;AAAA,YAC1B;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAA2C;AAC1C,kBAAQ,UAAU;AAAA,YACjB,WAAW;AAAA,YACX,SAAS,QAAQ;AAAA,cAChB;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,QAAgB;AAAA,YAC1B;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAA2D;AAC1D,kBAAQ,UAAU;AAAA,YACjB,WAAW;AAAA,YACX,gBAAgB,eAAe;AAAA,cAC9B;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,QAAgB;AAAA,YAC1B;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAA2C;AAC1C,kBAAQ,UAAU;AAAA,YACjB,WAAW;AAAA,YACX,SAAS,QAAQ;AAAA,cAChB;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,QAAgB;AAAA,YAC1B;AAAA,UACD;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,QAAQ,cAAc;AACjC,eAAS;AAAA,QACR,QAAQ,QAAQ;AAAA,QAChB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,QAAQ,cAAc;AACjC,sBAAgB;AAAA,QACf,QAAQ,QAAQ;AAAA,QAChB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,QAAQ,cAAc;AACjC,iBAAW;AAAA,QACV,QAAQ,QAAQ;AAAA,QAChB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,QAAQ,cAAc;AACjC,iBAAW;AAAA,QACV,QAAQ,QAAQ;AAAA,QAChB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,QAAQ,cAAc;AACjC,cAAQ;AAAA,QACP,QAAQ,QAAQ;AAAA,QAChB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,QAAQ,cAAc;AACjC,qBAAe;AAAA,QACd,QAAQ,QAAQ;AAAA,QAChB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,QAAQ,cAAc;AACjC,cAAQ;AAAA,QACP,QAAQ,QAAQ;AAAA,QAChB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,UAAU,IAAI,aAAa;AAExC,MAAM,sBAAsB,4BAAsB;AAAA,EACjD,cAAc;AACb,UAAM,4BAA4B;AAAA,MACjC;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAW,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAChF;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAU,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAC/E;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAY,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MACjF;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG,MAAM;AAAA,MACV;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA4C;AAClD,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,gBAAgB,CAAC;AACzB,YAAQ,YAAY,CAAC;AACrB,QAAI,UAAU,OAAW,6CAAiC,MAAM,SAAS,KAAK;AAC9E,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACW;AACX,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAmC;AAClC,kBAAQ,UAAU,OAAO,OAAO;AAChC;AAAA,QACD;AAAA,QAAkC;AACjC,kBAAQ,SAAS,OAAO,OAAO;AAC/B;AAAA,QACD;AAAA,QAAoC;AACnC,kBAAQ,WAAW,OAAO,OAAO;AACjC;AAAA,QACD;AAAA,QAA0C;AACzC,kBAAQ,cAAc,KAAK,OAAO,OAAO,CAAC;AAC1C;AAAA,QACD;AAAA,QAAuD;AACtD,kBAAQ,UAAU,KAAK,yBAAS,mBAAmB,QAAQ,OAAO,OAAO,GAAG,OAAO,CAAC;AACpF;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,YAAY;AACvB,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,OAAO;AAE/D,QAAI,QAAQ,WAAW;AACtB,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,MAAM;AAE9D,QAAI,QAAQ,aAAa;AACxB,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,QAAQ;AAEhE,aAAS,IAAI,GAAG,IAAI,QAAQ,cAAc,QAAQ;AACjD,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,cAAc,CAAC,CAAC;AAExE,aAAS,IAAI,GAAG,IAAI,QAAQ,UAAU,QAAQ;AAC7C,+BAAS;AAAA,QACR,QAAQ,UAAU,CAAC;AAAA,QACnB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,WAAW,IAAI,cAAc;AAE1C,MAAM,6BAA6B,4BAA6B;AAAA,EAC/D,cAAc;AACb,UAAM,mCAAmC;AAAA,MACxC;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG,MAAM;AAAA,MACV;AAAA,MACA,EAAE,IAAI,GAAG,MAAM,WAAW,MAAM,WAAW,GAAG,MAAM,yBAAS;AAAA,IAC9D,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA0D;AAChE,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,UAAU,CAAC;AACnB,QAAI,UAAU,OAAW,6CAAwC,MAAM,SAAS,KAAK;AACrF,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACkB;AAClB,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAqD;AACpD,kBAAQ,QAAQ,KAAK,yBAAS,mBAAmB,QAAQ,OAAO,OAAO,GAAG,OAAO,CAAC;AAClF;AAAA,QACD;AAAA,QAAqD;AACpD,kBAAQ,UAAU,yBAAS;AAAA,YAC1B;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,QAAQ;AAC3C,+BAAS;AAAA,QACR,QAAQ,QAAQ,CAAC;AAAA,QACjB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ;AACX,+BAAS;AAAA,QACR,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,kBAAkB,IAAI,qBAAqB;AAExD,MAAM,wBAAwB,4BAAwB;AAAA,EACrD,cAAc;AACb,UAAM,8BAA8B;AAAA,MACnC,EAAE,IAAI,GAAG,MAAM,QAAQ,MAAM,WAAW,GAAG,MAAM,yBAAS;AAAA,MAC1D;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG,MAAM;AAAA,MACV;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAgD;AACtD,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,UAAU,CAAC;AACnB,QAAI,UAAU,OAAW,6CAAmC,MAAM,SAAS,KAAK;AAChF,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACa;AACb,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAkD;AACjD,kBAAQ,OAAO,yBAAS;AAAA,YACvB;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AAAA,QAAqD;AACpD,kBAAQ,QAAQ,KAAK,yBAAS,mBAAmB,QAAQ,OAAO,OAAO,GAAG,OAAO,CAAC;AAClF;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ;AACX,+BAAS;AAAA,QACR,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,QAAQ;AAC3C,+BAAS;AAAA,QACR,QAAQ,QAAQ,CAAC;AAAA,QACjB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,aAAa,IAAI,gBAAgB;AAE9C,MAAM,wBAAwB,4BAAwB;AAAA,EACrD,cAAc;AACb,UAAM,8BAA8B;AAAA,MACnC,EAAE,IAAI,GAAG,MAAM,QAAQ,MAAM,WAAW,GAAG,MAAM,yBAAS;AAAA,MAC1D;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG,MAAM;AAAA,MACV;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAgD;AACtD,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,eAAe,CAAC;AACxB,QAAI,UAAU,OAAW,6CAAmC,MAAM,SAAS,KAAK;AAChF,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACa;AACb,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAkD;AACjD,kBAAQ,OAAO,yBAAS;AAAA,YACvB;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AAAA,QAA4D;AAC3D,kBAAQ,aAAa,KAAK,yBAAS,mBAAmB,QAAQ,OAAO,OAAO,GAAG,OAAO,CAAC;AACvF;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ;AACX,+BAAS;AAAA,QACR,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,aAAS,IAAI,GAAG,IAAI,QAAQ,aAAa,QAAQ;AAChD,+BAAS;AAAA,QACR,QAAQ,aAAa,CAAC;AAAA,QACtB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,aAAa,IAAI,gBAAgB;AAE9C,MAAM,qBAAqB,4BAAqB;AAAA,EAC/C,cAAc;AACb,UAAM,2BAA2B;AAAA,MAChC;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG;AAAA,MACJ;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA0C;AAChD,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,UAAU,CAAC;AACnB,YAAQ,eAAe,CAAC;AACxB,QAAI,UAAU,OAAW,6CAAgC,MAAM,SAAS,KAAK;AAC7E,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACU;AACV,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAkC;AACjC,kBAAQ,QAAQ,KAAK,OAAO,MAAM,CAAC;AACnC;AAAA,QACD;AAAA,QAAwC;AACvC,kBAAQ,aAAa,KAAK,OAAO,OAAO,CAAC;AACzC;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,QAAQ;AAC3C,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,MAAM,QAAQ,QAAQ,CAAC,CAAC;AAEjE,aAAS,IAAI,GAAG,IAAI,QAAQ,aAAa,QAAQ;AAChD,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,aAAa,CAAC,CAAC;AACvE,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,UAAU,IAAI,aAAa;AAExC,MAAM,4BAA4B,4BAA4B;AAAA,EAC7D,cAAc;AACb,UAAM,kCAAkC;AAAA,MACvC;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAgB,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MACrF;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG,MAAM;AAAA,MACV;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAwD;AAC9D,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,WAAW,CAAC;AACpB,QAAI,UAAU,OAAW,6CAAuC,MAAM,SAAS,KAAK;AACpF,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACiB;AACjB,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAwC;AACvC,kBAAQ,cAAc,OAAO,OAAO;AACpC;AAAA,QACD;AAAA,QAAsD;AACrD,kBAAQ,SAAS,KAAK,yBAAS,mBAAmB,QAAQ,OAAO,OAAO,GAAG,OAAO,CAAC;AACnF;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,gBAAgB;AAC3B,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,WAAW;AAEnE,aAAS,IAAI,GAAG,IAAI,QAAQ,SAAS,QAAQ;AAC5C,+BAAS;AAAA,QACR,QAAQ,SAAS,CAAC;AAAA,QAClB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,iBAAiB,IAAI,oBAAoB;AAEtD,MAAM,qBAAqB,4BAAqB;AAAA,EAC/C,cAAc;AACb,UAAM,2BAA2B;AAAA,MAChC;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAW,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAChF,EAAE,IAAI,GAAG,MAAM,UAAU,MAAM,WAAW,GAAG,MAAM,yBAAS;AAAA,IAC7D,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA0C;AAChD,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,UAAU,CAAC;AACnB,YAAQ,eAAe,CAAC;AACxB,QAAI,UAAU,OAAW,6CAAgC,MAAM,SAAS,KAAK;AAC7E,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACU;AACV,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAkC;AACjC,kBAAQ,QAAQ,KAAK,OAAO,MAAM,CAAC;AACnC;AAAA,QACD;AAAA,QAAwC;AACvC,kBAAQ,aAAa,KAAK,OAAO,OAAO,CAAC;AACzC;AAAA,QACD;AAAA,QAAmC;AAClC,kBAAQ,UAAU,OAAO,OAAO;AAChC;AAAA,QACD;AAAA,QAAoD;AACnD,kBAAQ,SAAS,yBAAS;AAAA,YACzB;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,QAAQ;AAC3C,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,MAAM,QAAQ,QAAQ,CAAC,CAAC;AAEjE,aAAS,IAAI,GAAG,IAAI,QAAQ,aAAa,QAAQ;AAChD,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,aAAa,CAAC,CAAC;AAEvE,QAAI,QAAQ,YAAY;AACvB,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,OAAO;AAE/D,QAAI,QAAQ;AACX,+BAAS;AAAA,QACR,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,UAAU,IAAI,aAAa;AAExC,MAAM,mCAAmC,4BAAmC;AAAA,EAC3E,cAAc;AACb,UAAM,yCAAyC;AAAA,MAC9C;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAgB,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MACrF;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAsE;AAC5E,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAA8C,MAAM,SAAS,KAAK;AAC3F,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACwB;AACxB,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAiC;AAChC,kBAAQ,QAAQ,OAAO,OAAO,EAAE,SAAS;AACzC;AAAA,QACD;AAAA,QAA4C;AAC3C,kBAAQ,kBAAkB,OAAO,OAAO,EAAE,SAAS;AACnD;AAAA,QACD;AAAA,QAAuC;AACtC,kBAAQ,cAAc,OAAO,MAAM;AACnC;AAAA,QACD;AAAA,QAAoE;AACnE,kBAAQ,uCAAuC,OAAO,OAAO,EAAE,SAAS;AACxE;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,UAAU,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,KAAK;AAEpF,QAAI,QAAQ,oBAAoB;AAC/B,aAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,eAAe;AAE9D,QAAI,QAAQ,gBAAgB;AAC3B,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,MAAM,QAAQ,WAAW;AAElE,QAAI,QAAQ,yCAAyC;AACpD,aAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,oCAAoC;AACnF,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,wBAAwB,IAAI,2BAA2B;AAEpE,MAAM,yBAAyB,4BAAyB;AAAA,EACvD,cAAc;AACb,UAAM,+BAA+B;AAAA,MACpC;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,MACA,EAAE,IAAI,GAAG,MAAM,yBAAyB,MAAM,WAAW,GAAG,MAAM,2BAAU;AAAA,MAC5E;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG,MAAM;AAAA,MACV;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAkD;AACxD,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,iBAAiB,CAAC;AAC1B,QAAI,UAAU,OAAW,6CAAoC,MAAM,SAAS,KAAK;AACjF,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACc;AACd,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAiC;AAChC,kBAAQ,QAAQ,OAAO,OAAO,EAAE,SAAS;AACzC;AAAA,QACD;AAAA,QAA4C;AAC3C,kBAAQ,kBAAkB,OAAO,OAAO,EAAE,SAAS;AACnD;AAAA,QACD;AAAA,QAA0C;AACzC,kBAAQ,gBAAgB,OAAO,OAAO,EAAE,SAAS;AACjD;AAAA,QACD;AAAA,QAA8C;AAC7C,kBAAQ,oBAAoB,OAAO,OAAO,EAAE,SAAS;AACrD;AAAA,QACD;AAAA,QAA0C;AACzC,kBAAQ,gBAAgB,OAAO,OAAO,EAAE,SAAS;AACjD;AAAA,QACD;AAAA,QAAsD;AACrD,kBAAQ,0BAA0B,OAAO,OAAO,EAAE,SAAS;AAC3D;AAAA,QACD;AAAA,QAAoE;AACnE,kBAAQ,sBAAsB,2BAAU;AAAA,YACvC;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AAAA,QAAkE;AACjE,kBAAQ,eAAe;AAAA,YACtB,cAAc,mBAAmB,QAAQ,OAAO,OAAO,GAAG,OAAO;AAAA,UAClE;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,UAAU,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,KAAK;AAEpF,QAAI,QAAQ,oBAAoB;AAC/B,aAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,eAAe;AAE9D,QAAI,QAAQ,kBAAkB;AAC7B,aAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,aAAa;AAE5D,QAAI,QAAQ,sBAAsB;AACjC,aAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,iBAAiB;AAEhE,QAAI,QAAQ,kBAAkB;AAC7B,aAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,aAAa;AAE5D,QAAI,QAAQ,4BAA4B;AACvC,aAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,uBAAuB;AAEtE,QAAI,QAAQ;AACX,iCAAU;AAAA,QACT,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,aAAS,IAAI,GAAG,IAAI,QAAQ,eAAe,QAAQ;AAClD,oBAAc;AAAA,QACb,QAAQ,eAAe,CAAC;AAAA,QACxB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,cAAc,IAAI,iBAAiB;AAEhD,MAAM,2BAA2B,4BAA2B;AAAA,EAC3D,cAAc;AACb,UAAM,iCAAiC;AAAA,MACtC;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG;AAAA,MACJ;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAsD;AAC5D,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,UAAU,CAAC;AACnB,YAAQ,eAAe,CAAC;AACxB,QAAI,UAAU,OAAW,6CAAsC,MAAM,SAAS,KAAK;AACnF,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACgB;AAChB,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAmC;AAClC,kBAAQ,UAAU,OAAO,OAAO,EAAE,SAAS;AAC3C;AAAA,QACD;AAAA,QAAkC;AACjC,kBAAQ,QAAQ,KAAK,OAAO,MAAM,CAAC;AACnC;AAAA,QACD;AAAA,QAAwC;AACvC,kBAAQ,aAAa,KAAK,OAAO,OAAO,CAAC;AACzC;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,YAAY,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,OAAO;AAExF,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,QAAQ;AAC3C,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,MAAM,QAAQ,QAAQ,CAAC,CAAC;AAEjE,aAAS,IAAI,GAAG,IAAI,QAAQ,aAAa,QAAQ;AAChD,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,aAAa,CAAC,CAAC;AACvE,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,gBAAgB,IAAI,mBAAmB;AAEpD,MAAM,gCAAgC,4BAAgC;AAAA,EACrE,cAAc;AACb,UAAM,sCAAsC;AAAA,MAC3C;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG,MAAM;AAAA,MACV;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAgE;AACtE,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,UAAU,CAAC;AACnB,QAAI,UAAU,OAAW,6CAA2C,MAAM,SAAS,KAAK;AACxF,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACqB;AACrB,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAmD;AAClD,kBAAQ,QAAQ,KAAK,qBAAO,mBAAmB,QAAQ,OAAO,OAAO,GAAG,OAAO,CAAC;AAChF;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,QAAQ;AAC3C,2BAAO;AAAA,QACN,QAAQ,QAAQ,CAAC;AAAA,QACjB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,qBAAqB,IAAI,wBAAwB;AAE9D,MAAM,qCAAqC,4BAAqC;AAAA,EAC/E,cAAc;AACb,UAAM,2CAA2C;AAAA,MAChD;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,MACA,EAAE,IAAI,GAAG,MAAM,oBAAoB,MAAM,WAAW,GAAG,MAAM,2BAAU;AAAA,MACvE;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,GAAG,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,MACJ;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA0E;AAChF,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAAgD,MAAM,SAAS,KAAK;AAC7F,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QAC0B;AAC1B,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAiC;AAChC,kBAAQ,QAAQ,OAAO,OAAO,EAAE,SAAS;AACzC;AAAA,QACD;AAAA,QAAiC;AAChC,kBAAQ,QAAQ,OAAO,OAAO,EAAE,SAAS;AACzC;AAAA,QACD;AAAA,QAA+D;AAC9D,kBAAQ,kBAAkB,2BAAU;AAAA,YACnC;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AAAA,QAAmD;AAClD,kBAAQ,wBAAwB,OAAO,OAAO;AAC9C;AAAA,QACD;AAAA,QAAyC;AACxC,kBAAQ,cAAc,OAAO,OAAO,EAAE,SAAS;AAC/C;AAAA,QACD;AAAA,QAAmH;AAClH,kBAAQ,wCACP,sCAAsC;AAAA,YACrC;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACD;AAAA,QACD;AAAA,QAAmD;AAClD,kBAAQ,wBAAwB,OAAO,OAAO;AAC9C;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,UAAU,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,KAAK;AAEpF,QAAI,QAAQ,UAAU,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,KAAK;AAEpF,QAAI,QAAQ;AACX,iCAAU;AAAA,QACT,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,0BAA0B;AACrC,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,qBAAqB;AAE7E,QAAI,QAAQ,gBAAgB;AAC3B,aAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,WAAW;AAE1D,QAAI,QAAQ;AACX,4CAAsC;AAAA,QACrC,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,0BAA0B;AACrC,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,qBAAqB;AAC7E,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,0BAA0B,IAAI,6BAA6B;AAExE,MAAM,+BAA+B,4BAA+B;AAAA,EACnE,cAAc;AACb,UAAM,qCAAqC;AAAA,MAC1C;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAa,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAClF;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA8D;AACpE,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAA0C,MAAM,SAAS,KAAK;AACvF,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACoB;AACpB,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAqC;AACpC,kBAAQ,WAAW,OAAO,OAAO;AACjC;AAAA,QACD;AAAA,QAAyC;AACxC,kBAAQ,eAAe,OAAO,OAAO,EAAE,SAAS;AAChD;AAAA,QACD;AAAA,QAAmC;AAClC,kBAAQ,UAAU,OAAO,OAAO,EAAE,SAAS;AAC3C;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,aAAa;AACxB,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,QAAQ;AAEhE,QAAI,QAAQ,iBAAiB;AAC5B,aAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,YAAY;AAE3D,QAAI,QAAQ,YAAY,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,OAAO;AACxF,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,oBAAoB,IAAI,uBAAuB;AAE5D,MAAM,iCAAiC,4BAAiC;AAAA,EACvE,cAAc;AACb,UAAM,uCAAuC;AAAA,MAC5C;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAU,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAC/E;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG,MAAM;AAAA,MACV;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAkE;AACxE,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,qBAAqB,CAAC;AAC9B,QAAI,UAAU,OAAW,6CAA4C,MAAM,SAAS,KAAK;AACzF,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACsB;AACtB,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAkC;AACjC,kBAAQ,SAAS,OAAO,OAAO;AAC/B;AAAA,QACD;AAAA,QAA0E;AACzE,kBAAQ,mBAAmB;AAAA,YAC1B,kBAAkB,mBAAmB,QAAQ,OAAO,OAAO,GAAG,OAAO;AAAA,UACtE;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,WAAW;AACtB,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,MAAM;AAE9D,aAAS,IAAI,GAAG,IAAI,QAAQ,mBAAmB,QAAQ;AACtD,wBAAkB;AAAA,QACjB,QAAQ,mBAAmB,CAAC;AAAA,QAC5B,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,sBAAsB,IAAI,yBAAyB;AAEhE,MAAM,mDAAmD,4BAAmD;AAAA,EAC3G,cAAc;AACb,UAAM,yDAAyD;AAAA,MAC9D;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAW,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAuB;AAAA,MAC/E;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG,MAAM;AAAA,MACV;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OACC,OACwC;AACxC,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,uBAAuB,CAAC;AAChC,QAAI,UAAU;AACb,kDAA8D,MAAM,SAAS,KAAK;AACnF,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACwC;AACxC,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAkC;AACjC,kBAAQ,UAAU,OAAO,MAAM;AAC/B;AAAA,QACD;AAAA,QAA8E;AAC7E,kBAAQ,qBAAqB;AAAA,YAC5B,oBAAoB,mBAAmB,QAAQ,OAAO,OAAO,GAAG,OAAO;AAAA,UACxE;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,YAAY,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,MAAM,QAAQ,OAAO;AAEvF,aAAS,IAAI,GAAG,IAAI,QAAQ,qBAAqB,QAAQ;AACxD,0BAAoB;AAAA,QACnB,QAAQ,qBAAqB,CAAC;AAAA,QAC9B,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,wCACZ,IAAI,2CAA2C;AAEhD,MAAM,sCAAsC,4BAAsC;AAAA,EACjF,cAAc;AACb,UAAM,4CAA4C;AAAA,MACjD;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA4E;AAClF,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,gBAAgB,CAAC;AACzB,QAAI,UAAU,OAAW,6CAAiD,MAAM,SAAS,KAAK;AAC9F,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QAC2B;AAC3B,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAiC;AAChC,kBAAQ,QAAQ,OAAO,OAAO,EAAE,SAAS;AACzC;AAAA,QACD;AAAA,QAAiC;AAChC,kBAAQ,QAAQ,OAAO,OAAO,EAAE,SAAS;AACzC;AAAA,QACD;AAAA,QAA8D;AAC7D,kBAAQ,cAAc;AAAA,YACrB,UAAU,mBAAmB,QAAQ,OAAO,OAAO,GAAG,OAAO;AAAA,UAC9D;AACA;AAAA,QACD;AAAA,QAAuE;AACtE,kBAAQ,0CAA0C,OAAO,OAAO,EAAE,SAAS;AAC3E;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,UAAU,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,KAAK;AAEpF,QAAI,QAAQ,UAAU,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,KAAK;AAEpF,aAAS,IAAI,GAAG,IAAI,QAAQ,cAAc,QAAQ;AACjD,gBAAU;AAAA,QACT,QAAQ,cAAc,CAAC;AAAA,QACvB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,4CAA4C;AACvD,aAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,uCAAuC;AACtF,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,2BAA2B,IAAI,8BAA8B;AAE1E,MAAM,uBAAuB,4BAAuB;AAAA,EACnD,cAAc;AACb,UAAM,6BAA6B;AAAA,MAClC,EAAE,IAAI,GAAG,MAAM,MAAM,MAAM,WAAW,GAAG,MAAM,MAAM;AAAA,MACrD,EAAE,IAAI,GAAG,MAAM,OAAO,MAAM,WAAW,GAAG,MAAM,IAAI;AAAA,MACpD;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA8C;AACpD,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAAkC,MAAM,SAAS,KAAK;AAC/E,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACY;AACZ,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAA6C;AAC5C,kBAAQ,KAAK,MAAM,mBAAmB,QAAQ,OAAO,OAAO,GAAG,SAAS,QAAQ,EAAE;AAClF;AAAA,QACD;AAAA,QAA4C;AAC3C,kBAAQ,MAAM,IAAI,mBAAmB,QAAQ,OAAO,OAAO,GAAG,SAAS,QAAQ,GAAG;AAClF;AAAA,QACD;AAAA,QAAiC;AAChC,kBAAQ,QAAQ,OAAO,OAAO,EAAE,SAAS;AACzC;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ;AACX,YAAM;AAAA,QACL,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ;AACX,UAAI;AAAA,QACH,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,UAAU,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,KAAK;AACpF,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,YAAY,IAAI,eAAe;AAE5C,MAAM,mBAAmB,4BAAmB;AAAA,EAC3C,cAAc;AACb,UAAM,yBAAyB;AAAA,MAC9B;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAO,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAC5E;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAO,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,IAC7E,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAsC;AAC5C,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAA8B,MAAM,SAAS,KAAK;AAC3E,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACQ;AACR,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAA+B;AAC9B,kBAAQ,MAAM,OAAO,OAAO;AAC5B;AAAA,QACD;AAAA,QAA+B;AAC9B,kBAAQ,MAAM,OAAO,OAAO;AAC5B;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,QAAQ,OAAW,QAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,GAAG;AAEzF,QAAI,QAAQ,QAAQ,OAAW,QAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,GAAG;AACzF,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,QAAQ,IAAI,WAAW;AAEpC,MAAM,iBAAiB,4BAAiB;AAAA,EACvC,cAAc;AACb,UAAM,uBAAuB;AAAA,MAC5B;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAO,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAC5E;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAK,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAC1E;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAK,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAC1E;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAO,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,IAC7E,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAkC;AACxC,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAA4B,MAAM,SAAS,KAAK;AACzE,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACM;AACN,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAA+B;AAC9B,kBAAQ,MAAM,OAAO,OAAO;AAC5B;AAAA,QACD;AAAA,QAA6B;AAC5B,kBAAQ,IAAI,OAAO,OAAO;AAC1B;AAAA,QACD;AAAA,QAA6B;AAC5B,kBAAQ,IAAI,OAAO,OAAO;AAC1B;AAAA,QACD;AAAA,QAA+B;AAC9B,kBAAQ,MAAM,OAAO,OAAO;AAC5B;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,QAAQ,OAAW,QAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,GAAG;AAEzF,QAAI,QAAQ,MAAM,OAAW,QAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,CAAC;AAErF,QAAI,QAAQ,MAAM,OAAW,QAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,CAAC;AAErF,QAAI,QAAQ,QAAQ,OAAW,QAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,GAAG;AACzF,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,MAAM,IAAI,SAAS;AAEhC,MAAM,mCAAmC,4BAAmC;AAAA,EAC3E,cAAc;AACb,UAAM,yCAAyC;AAAA,MAC9C;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG,MAAM;AAAA,MACV;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAsE;AAC5E,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,eAAe,CAAC;AACxB,QAAI,UAAU,OAAW,6CAA8C,MAAM,SAAS,KAAK;AAC3F,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACwB;AACxB,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAA2E;AAC1E,kBAAQ,aAAa;AAAA,YACpB,0BAA0B,mBAAmB,QAAQ,OAAO,OAAO,GAAG,OAAO;AAAA,UAC9E;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,aAAS,IAAI,GAAG,IAAI,QAAQ,aAAa,QAAQ;AAChD,gCAA0B;AAAA,QACzB,QAAQ,aAAa,CAAC;AAAA,QACtB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,wBAAwB,IAAI,2BAA2B;AAEpE,MAAM,uCAAuC,4BAAuC;AAAA,EACnF,cAAc;AACb,UAAM,6CAA6C;AAAA,MAClD,EAAE,IAAI,GAAG,MAAM,gBAAgB,MAAM,WAAW,OAAO,QAAQ,GAAG,MAAM,YAAY;AAAA,MACpF;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,GAAG,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,GAAG,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,GAAG,MAAM;AAAA,MACV;AAAA,MACA,EAAE,IAAI,KAAK,MAAM,2BAA2B,MAAM,WAAW,OAAO,QAAQ,GAAG,MAAM,mBAAM;AAAA,MAC3F,EAAE,IAAI,KAAK,MAAM,0BAA0B,MAAM,WAAW,OAAO,QAAQ,GAAG,MAAM,mBAAM;AAAA,MAC1F;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,MACA,EAAE,IAAI,KAAK,MAAM,2BAA2B,MAAM,WAAW,OAAO,QAAQ,GAAG,MAAM,mBAAM;AAAA,MAC3F,EAAE,IAAI,KAAK,MAAM,wBAAwB,MAAM,WAAW,OAAO,QAAQ,GAAG,MAAM,mBAAM;AAAA,IACzF,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA8E;AACpF,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,OAAO,EAAE,WAAW,OAAU;AACtC,QAAI,UAAU;AACb,kDAAkD,MAAM,SAAS,KAAK;AACvE,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QAC4B;AAC5B,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAoD;AACnD,kBAAQ,OAAO;AAAA,YACd,WAAW;AAAA,YACX,aAAa,YAAY;AAAA,cACxB;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,KAAa;AAAA,YACvB;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAA+E;AAC9E,kBAAQ,OAAO;AAAA,YACd,WAAW;AAAA,YACX,0BAA0B,yBAAyB;AAAA,cAClD;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,KAAa;AAAA,YACvB;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAAiF;AAChF,kBAAQ,OAAO;AAAA,YACd,WAAW;AAAA,YACX,2BAA2B,0BAA0B;AAAA,cACpD;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,KAAa;AAAA,YACvB;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAA4D;AAC3D,kBAAQ,OAAO;AAAA,YACd,WAAW;AAAA,YACX,0BAA0B,mBAAM;AAAA,cAC/B;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,KAAa;AAAA,YACvB;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAAyD;AACxD,kBAAQ,OAAO;AAAA,YACd,WAAW;AAAA,YACX,uBAAuB,mBAAM;AAAA,cAC5B;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,KAAa;AAAA,YACvB;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAAwD;AACvD,kBAAQ,OAAO;AAAA,YACd,WAAW;AAAA,YACX,qBAAqB,mBAAM;AAAA,cAC1B;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,KAAa;AAAA,YACvB;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAAsC;AACrC,kBAAQ,OAAO;AAAA,YACd,WAAW;AAAA,YACX,mBAAmB,OAAO,OAAO;AAAA,UAClC;AACA;AAAA,QACD;AAAA,QAAwC;AACvC,kBAAQ,OAAO;AAAA,YACd,WAAW;AAAA,YACX,qBAAqB,OAAO,OAAO,EAAE,SAAS;AAAA,UAC/C;AACA;AAAA,QACD;AAAA,QAAyD;AACxD,kBAAQ,OAAO;AAAA,YACd,WAAW;AAAA,YACX,uBAAuB,mBAAM;AAAA,cAC5B;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,KAAa;AAAA,YACvB;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAAsD;AACrD,kBAAQ,OAAO;AAAA,YACd,WAAW;AAAA,YACX,oBAAoB,mBAAM;AAAA,cACzB;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,KAAa;AAAA,YACvB;AAAA,UACD;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,KAAK,cAAc;AAC9B,kBAAY;AAAA,QACX,QAAQ,KAAK;AAAA,QACb,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,KAAK,cAAc;AAC9B,+BAAyB;AAAA,QACxB,QAAQ,KAAK;AAAA,QACb,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,KAAK,cAAc;AAC9B,gCAA0B;AAAA,QACzB,QAAQ,KAAK;AAAA,QACb,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,KAAK,cAAc;AAC9B,yBAAM;AAAA,QACL,QAAQ,KAAK;AAAA,QACb,OAAO,IAAI,KAAK,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC/C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,KAAK,cAAc;AAC9B,yBAAM;AAAA,QACL,QAAQ,KAAK;AAAA,QACb,OAAO,IAAI,KAAK,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC/C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,KAAK,cAAc;AAC9B,yBAAM;AAAA,QACL,QAAQ,KAAK;AAAA,QACb,OAAO,IAAI,KAAK,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC/C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,KAAK,cAAc;AAC9B,aAAO,IAAI,KAAK,wBAAS,eAAe,EAAE,OAAO,QAAQ,KAAK,iBAAiB;AAEhF,QAAI,QAAQ,KAAK,cAAc;AAC9B,aAAO,IAAI,KAAK,wBAAS,MAAM,EAAE,OAAO,QAAQ,KAAK,mBAAmB;AAEzE,QAAI,QAAQ,KAAK,cAAc;AAC9B,yBAAM;AAAA,QACL,QAAQ,KAAK;AAAA,QACb,OAAO,IAAI,KAAK,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC/C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,KAAK,cAAc;AAC9B,yBAAM;AAAA,QACL,QAAQ,KAAK;AAAA,QACb,OAAO,IAAI,KAAK,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC/C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,4BAA4B,IAAI,+BAA+B;AAE5E,MAAM,sCAAsC,4BAAsC;AAAA,EACjF,cAAc;AACb,UAAM,4CAA4C;AAAA,MACjD;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA4E;AAClF,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAAiD,MAAM,SAAS,KAAK;AAC9F,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QAC2B;AAC3B,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAqC;AACpC,kBAAQ,WAAW,OAAO,OAAO,EAAE,SAAS;AAC5C;AAAA,QACD;AAAA,QAAuE;AACtE,kBAAQ,0CAA0C,OAAO,OAAO,EAAE,SAAS;AAC3E;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,aAAa,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,QAAQ;AAE1F,QAAI,QAAQ,4CAA4C;AACvD,aAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,uCAAuC;AACtF,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,2BAA2B,IAAI,8BAA8B;AAE1E,MAAM,uCAAuC,4BAAuC;AAAA,EACnF,cAAc;AACb,UAAM,6CAA6C;AAAA,MAClD;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAW,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAuB;AAAA,MAC/E;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG,MAAM;AAAA,MACV;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA8E;AACpF,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,eAAe,CAAC;AACxB,QAAI,UAAU;AACb,kDAAkD,MAAM,SAAS,KAAK;AACvE,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QAC4B;AAC5B,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAkC;AACjC,kBAAQ,UAAU,OAAO,MAAM;AAC/B;AAAA,QACD;AAAA,QAA0E;AACzE,kBAAQ,aAAa;AAAA,YACpB,yBAAyB,mBAAmB,QAAQ,OAAO,OAAO,GAAG,OAAO;AAAA,UAC7E;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,YAAY,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,MAAM,QAAQ,OAAO;AAEvF,aAAS,IAAI,GAAG,IAAI,QAAQ,aAAa,QAAQ;AAChD,+BAAyB;AAAA,QACxB,QAAQ,aAAa,CAAC;AAAA,QACtB,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,4BAA4B,IAAI,+BAA+B;AAE5E,MAAM,sCAAsC,4BAAsC;AAAA,EACjF,cAAc;AACb,UAAM,4CAA4C;AAAA,MACjD;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG,MAAM;AAAA,UACR;AAAA,UACA;AAAA,QACD;AAAA,MACD;AAAA,MACA,EAAE,IAAI,GAAG,MAAM,oBAAoB,MAAM,WAAW,GAAG,MAAM,SAAS;AAAA,MACtE;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG,MAAM;AAAA,MACV;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA4E;AAClF,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,wBAAwB,CAAC;AACjC,QAAI,UAAU,OAAW,6CAAiD,MAAM,SAAS,KAAK;AAC9F,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QAC2B;AAC3B,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAA+F;AAC9F,kBAAQ,OAAO,OAAO,MAAM;AAC5B;AAAA,QACD;AAAA,QAA8D;AAC7D,kBAAQ,iBAAiB,SAAS;AAAA,YACjC;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AAAA,QAA6F;AAC5F,kBAAQ,sBAAsB;AAAA,YAC7B,kCAAkC,mBAAmB,QAAQ,OAAO,OAAO,GAAG,OAAO;AAAA,UACtF;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,SAAS,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,MAAM,QAAQ,IAAI;AAEjF,QAAI,QAAQ;AACX,eAAS;AAAA,QACR,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,aAAS,IAAI,GAAG,IAAI,QAAQ,sBAAsB,QAAQ;AACzD,wCAAkC;AAAA,QACjC,QAAQ,sBAAsB,CAAC;AAAA,QAC/B,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,2BAA2B,IAAI,8BAA8B;AAE1E,MAAM,+CAA+C,4BAA+C;AAAA,EACnG,cAAc;AACb,UAAM,qDAAqD;AAAA,MAC1D;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAa,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAClF,EAAE,IAAI,GAAG,MAAM,YAAY,MAAM,WAAW,GAAG,MAAM,yBAAS;AAAA,IAC/D,CAAC;AAAA,EACF;AAAA,EACA,OACC,OACoC;AACpC,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU;AACb,kDAA0D,MAAM,SAAS,KAAK;AAC/E,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACoC;AACpC,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAoC;AACnC,kBAAQ,YAAY,OAAO,MAAM;AACjC;AAAA,QACD;AAAA,QAAsD;AACrD,kBAAQ,WAAW,yBAAS;AAAA,YAC3B;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,cAAc;AACzB,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,MAAM,QAAQ,SAAS;AAEhE,QAAI,QAAQ;AACX,+BAAS;AAAA,QACR,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,oCAAoC,IAAI,uCAAuC;",
  "names": ["import_runtime", "TransactionExpiration_TransactionExpirationKind", "ExecutionTimeObservation_ExecutionTimeObservationKind"]
}
