{
  "version": 3,
  "sources": ["../../../../../../src/proto/sui/rpc/v2beta2/owner.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport type { BinaryWriteOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryWriter } from '@protobuf-ts/runtime';\nimport { WireType } from '@protobuf-ts/runtime';\nimport type { BinaryReadOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryReader } from '@protobuf-ts/runtime';\nimport { UnknownFieldHandler } from '@protobuf-ts/runtime';\nimport type { PartialMessage } from '@protobuf-ts/runtime';\nimport { reflectionMergePartial } from '@protobuf-ts/runtime';\nimport { MessageType } from '@protobuf-ts/runtime';\n/**\n * Enum of different types of ownership for an object.\n *\n * @generated from protobuf message sui.rpc.v2beta2.Owner\n */\nexport interface Owner {\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Owner.OwnerKind kind = 1\n\t */\n\tkind?: Owner_OwnerKind;\n\t/**\n\t * Address or ObjectId of the owner\n\t *\n\t * @generated from protobuf field: optional string address = 2\n\t */\n\taddress?: string;\n\t/**\n\t * The `initial_shared_version` if kind is `SHARED` or `start_version` if kind `CONSENSUS_ADDRESS`.\n\t *\n\t * @generated from protobuf field: optional uint64 version = 3\n\t */\n\tversion?: bigint;\n}\n/**\n * @generated from protobuf enum sui.rpc.v2beta2.Owner.OwnerKind\n */\nexport enum Owner_OwnerKind {\n\t/**\n\t * @generated from protobuf enum value: OWNER_KIND_UNKNOWN = 0;\n\t */\n\tOWNER_KIND_UNKNOWN = 0,\n\t/**\n\t * @generated from protobuf enum value: ADDRESS = 1;\n\t */\n\tADDRESS = 1,\n\t/**\n\t * @generated from protobuf enum value: OBJECT = 2;\n\t */\n\tOBJECT = 2,\n\t/**\n\t * @generated from protobuf enum value: SHARED = 3;\n\t */\n\tSHARED = 3,\n\t/**\n\t * @generated from protobuf enum value: IMMUTABLE = 4;\n\t */\n\tIMMUTABLE = 4,\n\t/**\n\t * @generated from protobuf enum value: CONSENSUS_ADDRESS = 5;\n\t */\n\tCONSENSUS_ADDRESS = 5,\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Owner$Type extends MessageType<Owner> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.Owner', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'kind',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => ['sui.rpc.v2beta2.Owner.OwnerKind', Owner_OwnerKind],\n\t\t\t},\n\t\t\t{ no: 2, name: 'address', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'version',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<Owner>): Owner {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<Owner>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: Owner,\n\t): Owner {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Owner.OwnerKind kind */ 1:\n\t\t\t\t\tmessage.kind = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string address */ 2:\n\t\t\t\t\tmessage.address = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 version */ 3:\n\t\t\t\t\tmessage.version = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: Owner,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.Owner.OwnerKind kind = 1; */\n\t\tif (message.kind !== undefined) writer.tag(1, WireType.Varint).int32(message.kind);\n\t\t/* optional string address = 2; */\n\t\tif (message.address !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.address);\n\t\t/* optional uint64 version = 3; */\n\t\tif (message.version !== undefined) writer.tag(3, WireType.Varint).uint64(message.version);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.Owner\n */\nexport const Owner = new Owner$Type();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,qBAAyB;AAGzB,IAAAA,kBAAoC;AAEpC,IAAAA,kBAAuC;AACvC,IAAAA,kBAA4B;AA2BrB,IAAK,kBAAL,kBAAKC,qBAAL;AAIN,EAAAA,kCAAA,wBAAqB,KAArB;AAIA,EAAAA,kCAAA,aAAU,KAAV;AAIA,EAAAA,kCAAA,YAAS,KAAT;AAIA,EAAAA,kCAAA,YAAS,KAAT;AAIA,EAAAA,kCAAA,eAAY,KAAZ;AAIA,EAAAA,kCAAA,uBAAoB,KAApB;AAxBW,SAAAA;AAAA,GAAA;AA2BZ,MAAM,mBAAmB,4BAAmB;AAAA,EAC3C,cAAc;AACb,UAAM,yBAAyB;AAAA,MAC9B;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG,MAAM,CAAC,mCAAmC,eAAe;AAAA,MAC7D;AAAA,MACA;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAW,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAChF;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAsC;AAC5C,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,6CAA8B,MAAM,SAAS,KAAK;AAC3E,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACQ;AACR,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAyD;AACxD,kBAAQ,OAAO,OAAO,MAAM;AAC5B;AAAA,QACD;AAAA,QAAmC;AAClC,kBAAQ,UAAU,OAAO,OAAO;AAChC;AAAA,QACD;AAAA,QAAmC;AAClC,kBAAQ,UAAU,OAAO,OAAO,EAAE,SAAS;AAC3C;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oCAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,SAAS,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,MAAM,QAAQ,IAAI;AAEjF,QAAI,QAAQ,YAAY;AACvB,aAAO,IAAI,GAAG,wBAAS,eAAe,EAAE,OAAO,QAAQ,OAAO;AAE/D,QAAI,QAAQ,YAAY,OAAW,QAAO,IAAI,GAAG,wBAAS,MAAM,EAAE,OAAO,QAAQ,OAAO;AACxF,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oCAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,QAAQ,IAAI,WAAW;",
  "names": ["import_runtime", "Owner_OwnerKind"]
}
