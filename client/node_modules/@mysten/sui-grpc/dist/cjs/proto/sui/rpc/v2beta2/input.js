"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var input_exports = {};
__export(input_exports, {
  Input: () => Input,
  Input_InputKind: () => Input_InputKind
});
module.exports = __toCommonJS(input_exports);
var import_runtime = require("@protobuf-ts/runtime");
var import_runtime2 = require("@protobuf-ts/runtime");
var import_runtime3 = require("@protobuf-ts/runtime");
var import_runtime4 = require("@protobuf-ts/runtime");
var import_struct = require("../../../google/protobuf/struct.js");
var Input_InputKind = /* @__PURE__ */ ((Input_InputKind2) => {
  Input_InputKind2[Input_InputKind2["INPUT_KIND_UNKNOWN"] = 0] = "INPUT_KIND_UNKNOWN";
  Input_InputKind2[Input_InputKind2["PURE"] = 1] = "PURE";
  Input_InputKind2[Input_InputKind2["IMMUTABLE_OR_OWNED"] = 2] = "IMMUTABLE_OR_OWNED";
  Input_InputKind2[Input_InputKind2["SHARED"] = 3] = "SHARED";
  Input_InputKind2[Input_InputKind2["RECEIVING"] = 4] = "RECEIVING";
  return Input_InputKind2;
})(Input_InputKind || {});
class Input$Type extends import_runtime4.MessageType {
  constructor() {
    super("sui.rpc.v2beta2.Input", [
      {
        no: 1,
        name: "kind",
        kind: "enum",
        opt: true,
        T: () => ["sui.rpc.v2beta2.Input.InputKind", Input_InputKind]
      },
      {
        no: 2,
        name: "pure",
        kind: "scalar",
        opt: true,
        T: 12
        /*ScalarType.BYTES*/
      },
      {
        no: 3,
        name: "object_id",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 4,
        name: "version",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      {
        no: 5,
        name: "digest",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 6,
        name: "mutable",
        kind: "scalar",
        opt: true,
        T: 8
        /*ScalarType.BOOL*/
      },
      { no: 1e3, name: "literal", kind: "message", T: () => import_struct.Value }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0) (0, import_runtime3.reflectionMergePartial)(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional sui.rpc.v2beta2.Input.InputKind kind */
        1:
          message.kind = reader.int32();
          break;
        case /* optional bytes pure */
        2:
          message.pure = reader.bytes();
          break;
        case /* optional string object_id */
        3:
          message.objectId = reader.string();
          break;
        case /* optional uint64 version */
        4:
          message.version = reader.uint64().toBigInt();
          break;
        case /* optional string digest */
        5:
          message.digest = reader.string();
          break;
        case /* optional bool mutable */
        6:
          message.mutable = reader.bool();
          break;
        case /* optional google.protobuf.Value literal */
        1e3:
          message.literal = import_struct.Value.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.literal
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? import_runtime2.UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.kind !== void 0) writer.tag(1, import_runtime.WireType.Varint).int32(message.kind);
    if (message.pure !== void 0) writer.tag(2, import_runtime.WireType.LengthDelimited).bytes(message.pure);
    if (message.objectId !== void 0)
      writer.tag(3, import_runtime.WireType.LengthDelimited).string(message.objectId);
    if (message.version !== void 0) writer.tag(4, import_runtime.WireType.Varint).uint64(message.version);
    if (message.digest !== void 0)
      writer.tag(5, import_runtime.WireType.LengthDelimited).string(message.digest);
    if (message.mutable !== void 0) writer.tag(6, import_runtime.WireType.Varint).bool(message.mutable);
    if (message.literal)
      import_struct.Value.internalBinaryWrite(
        message.literal,
        writer.tag(1e3, import_runtime.WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? import_runtime2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const Input = new Input$Type();
//# sourceMappingURL=input.js.map
