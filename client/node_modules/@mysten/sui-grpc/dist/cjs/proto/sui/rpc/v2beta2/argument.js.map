{
  "version": 3,
  "sources": ["../../../../../../src/proto/sui/rpc/v2beta2/argument.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport type { BinaryWriteOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryWriter } from '@protobuf-ts/runtime';\nimport { WireType } from '@protobuf-ts/runtime';\nimport type { BinaryReadOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryReader } from '@protobuf-ts/runtime';\nimport { UnknownFieldHandler } from '@protobuf-ts/runtime';\nimport type { PartialMessage } from '@protobuf-ts/runtime';\nimport { reflectionMergePartial } from '@protobuf-ts/runtime';\nimport { MessageType } from '@protobuf-ts/runtime';\n/**\n * An argument to a programmable transaction command.\n *\n * @generated from protobuf message sui.rpc.v2beta2.Argument\n */\nexport interface Argument {\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Argument.ArgumentKind kind = 1\n\t */\n\tkind?: Argument_ArgumentKind;\n\t/**\n\t * Index of an input when `kind` is `INPUT`.\n\t *\n\t * @generated from protobuf field: optional uint32 input = 2\n\t */\n\tinput?: number;\n\t/**\n\t * Index of a result when `kind` is `RESULT`.\n\t *\n\t * @generated from protobuf field: optional uint32 result = 3\n\t */\n\tresult?: number;\n\t/**\n\t * Used to access a nested result when `kind` is `RESULT`.\n\t *\n\t * @generated from protobuf field: optional uint32 subresult = 4\n\t */\n\tsubresult?: number;\n}\n/**\n * @generated from protobuf enum sui.rpc.v2beta2.Argument.ArgumentKind\n */\nexport enum Argument_ArgumentKind {\n\t/**\n\t * @generated from protobuf enum value: ARGUMENT_KIND_UNKNOWN = 0;\n\t */\n\tARGUMENT_KIND_UNKNOWN = 0,\n\t/**\n\t * The gas coin.\n\t *\n\t * @generated from protobuf enum value: GAS = 1;\n\t */\n\tGAS = 1,\n\t/**\n\t * One of the input objects or primitive values (from\n\t * `ProgrammableTransaction` inputs).\n\t *\n\t * @generated from protobuf enum value: INPUT = 2;\n\t */\n\tINPUT = 2,\n\t/**\n\t * The result of another command (from `ProgrammableTransaction` commands).\n\t *\n\t * @generated from protobuf enum value: RESULT = 3;\n\t */\n\tRESULT = 3,\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Argument$Type extends MessageType<Argument> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.Argument', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'kind',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => ['sui.rpc.v2beta2.Argument.ArgumentKind', Argument_ArgumentKind],\n\t\t\t},\n\t\t\t{ no: 2, name: 'input', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t\t{ no: 3, name: 'result', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t\t{ no: 4, name: 'subresult', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<Argument>): Argument {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<Argument>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: Argument,\n\t): Argument {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Argument.ArgumentKind kind */ 1:\n\t\t\t\t\tmessage.kind = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint32 input */ 2:\n\t\t\t\t\tmessage.input = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint32 result */ 3:\n\t\t\t\t\tmessage.result = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint32 subresult */ 4:\n\t\t\t\t\tmessage.subresult = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: Argument,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.Argument.ArgumentKind kind = 1; */\n\t\tif (message.kind !== undefined) writer.tag(1, WireType.Varint).int32(message.kind);\n\t\t/* optional uint32 input = 2; */\n\t\tif (message.input !== undefined) writer.tag(2, WireType.Varint).uint32(message.input);\n\t\t/* optional uint32 result = 3; */\n\t\tif (message.result !== undefined) writer.tag(3, WireType.Varint).uint32(message.result);\n\t\t/* optional uint32 subresult = 4; */\n\t\tif (message.subresult !== undefined) writer.tag(4, WireType.Varint).uint32(message.subresult);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.Argument\n */\nexport const Argument = new Argument$Type();\n"],
  "mappings": "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",
  "names": ["import_runtime", "Argument_ArgumentKind"]
}
