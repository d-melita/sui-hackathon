"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var subscription_service_exports = {};
__export(subscription_service_exports, {
  SubscribeCheckpointsRequest: () => SubscribeCheckpointsRequest,
  SubscribeCheckpointsResponse: () => SubscribeCheckpointsResponse,
  SubscriptionService: () => SubscriptionService
});
module.exports = __toCommonJS(subscription_service_exports);
var import_runtime_rpc = require("@protobuf-ts/runtime-rpc");
var import_runtime = require("@protobuf-ts/runtime");
var import_runtime2 = require("@protobuf-ts/runtime");
var import_runtime3 = require("@protobuf-ts/runtime");
var import_runtime4 = require("@protobuf-ts/runtime");
var import_checkpoint = require("./checkpoint.js");
var import_field_mask = require("../../../google/protobuf/field_mask.js");
class SubscribeCheckpointsRequest$Type extends import_runtime4.MessageType {
  constructor() {
    super("sui.rpc.v2beta2.SubscribeCheckpointsRequest", [
      { no: 1, name: "read_mask", kind: "message", T: () => import_field_mask.FieldMask }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0)
      (0, import_runtime3.reflectionMergePartial)(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional google.protobuf.FieldMask read_mask */
        1:
          message.readMask = import_field_mask.FieldMask.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.readMask
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? import_runtime2.UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.readMask)
      import_field_mask.FieldMask.internalBinaryWrite(
        message.readMask,
        writer.tag(1, import_runtime.WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? import_runtime2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const SubscribeCheckpointsRequest = new SubscribeCheckpointsRequest$Type();
class SubscribeCheckpointsResponse$Type extends import_runtime4.MessageType {
  constructor() {
    super("sui.rpc.v2beta2.SubscribeCheckpointsResponse", [
      {
        no: 1,
        name: "cursor",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      { no: 2, name: "checkpoint", kind: "message", T: () => import_checkpoint.Checkpoint }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0)
      (0, import_runtime3.reflectionMergePartial)(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 cursor */
        1:
          message.cursor = reader.uint64().toBigInt();
          break;
        case /* optional sui.rpc.v2beta2.Checkpoint checkpoint */
        2:
          message.checkpoint = import_checkpoint.Checkpoint.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.checkpoint
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? import_runtime2.UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.cursor !== void 0) writer.tag(1, import_runtime.WireType.Varint).uint64(message.cursor);
    if (message.checkpoint)
      import_checkpoint.Checkpoint.internalBinaryWrite(
        message.checkpoint,
        writer.tag(2, import_runtime.WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? import_runtime2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const SubscribeCheckpointsResponse = new SubscribeCheckpointsResponse$Type();
const SubscriptionService = new import_runtime_rpc.ServiceType("sui.rpc.v2beta2.SubscriptionService", [
  {
    name: "SubscribeCheckpoints",
    serverStreaming: true,
    options: {},
    I: SubscribeCheckpointsRequest,
    O: SubscribeCheckpointsResponse
  }
]);
//# sourceMappingURL=subscription_service.js.map
