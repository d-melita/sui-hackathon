"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var checkpoint_summary_exports = {};
__export(checkpoint_summary_exports, {
  CheckpointCommitment: () => CheckpointCommitment,
  CheckpointCommitment_CheckpointCommitmentKind: () => CheckpointCommitment_CheckpointCommitmentKind,
  CheckpointSummary: () => CheckpointSummary,
  EndOfEpochData: () => EndOfEpochData
});
module.exports = __toCommonJS(checkpoint_summary_exports);
var import_runtime = require("@protobuf-ts/runtime");
var import_runtime2 = require("@protobuf-ts/runtime");
var import_runtime3 = require("@protobuf-ts/runtime");
var import_runtime4 = require("@protobuf-ts/runtime");
var import_signature = require("./signature.js");
var import_timestamp = require("../../../google/protobuf/timestamp.js");
var import_gas_cost_summary = require("./gas_cost_summary.js");
var import_bcs = require("./bcs.js");
var CheckpointCommitment_CheckpointCommitmentKind = /* @__PURE__ */ ((CheckpointCommitment_CheckpointCommitmentKind2) => {
  CheckpointCommitment_CheckpointCommitmentKind2[CheckpointCommitment_CheckpointCommitmentKind2["CHECKPOINT_COMMITMENT_KIND_UNKNOWN"] = 0] = "CHECKPOINT_COMMITMENT_KIND_UNKNOWN";
  CheckpointCommitment_CheckpointCommitmentKind2[CheckpointCommitment_CheckpointCommitmentKind2["ECMH_LIVE_OBJECT_SET"] = 1] = "ECMH_LIVE_OBJECT_SET";
  return CheckpointCommitment_CheckpointCommitmentKind2;
})(CheckpointCommitment_CheckpointCommitmentKind || {});
class CheckpointSummary$Type extends import_runtime4.MessageType {
  constructor() {
    super("sui.rpc.v2beta2.CheckpointSummary", [
      { no: 1, name: "bcs", kind: "message", T: () => import_bcs.Bcs },
      {
        no: 2,
        name: "digest",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "epoch",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      {
        no: 4,
        name: "sequence_number",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      {
        no: 5,
        name: "total_network_transactions",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      {
        no: 6,
        name: "content_digest",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 7,
        name: "previous_digest",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 8, name: "epoch_rolling_gas_cost_summary", kind: "message", T: () => import_gas_cost_summary.GasCostSummary },
      { no: 9, name: "timestamp", kind: "message", T: () => import_timestamp.Timestamp },
      {
        no: 10,
        name: "commitments",
        kind: "message",
        repeat: 2,
        T: () => CheckpointCommitment
      },
      { no: 11, name: "end_of_epoch_data", kind: "message", T: () => EndOfEpochData },
      {
        no: 12,
        name: "version_specific_data",
        kind: "scalar",
        opt: true,
        T: 12
      }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    message.commitments = [];
    if (value !== void 0) (0, import_runtime3.reflectionMergePartial)(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional sui.rpc.v2beta2.Bcs bcs */
        1:
          message.bcs = import_bcs.Bcs.internalBinaryRead(reader, reader.uint32(), options, message.bcs);
          break;
        case /* optional string digest */
        2:
          message.digest = reader.string();
          break;
        case /* optional uint64 epoch */
        3:
          message.epoch = reader.uint64().toBigInt();
          break;
        case /* optional uint64 sequence_number */
        4:
          message.sequenceNumber = reader.uint64().toBigInt();
          break;
        case /* optional uint64 total_network_transactions */
        5:
          message.totalNetworkTransactions = reader.uint64().toBigInt();
          break;
        case /* optional string content_digest */
        6:
          message.contentDigest = reader.string();
          break;
        case /* optional string previous_digest */
        7:
          message.previousDigest = reader.string();
          break;
        case /* optional sui.rpc.v2beta2.GasCostSummary epoch_rolling_gas_cost_summary */
        8:
          message.epochRollingGasCostSummary = import_gas_cost_summary.GasCostSummary.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.epochRollingGasCostSummary
          );
          break;
        case /* optional google.protobuf.Timestamp timestamp */
        9:
          message.timestamp = import_timestamp.Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.timestamp
          );
          break;
        case /* repeated sui.rpc.v2beta2.CheckpointCommitment commitments */
        10:
          message.commitments.push(
            CheckpointCommitment.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        case /* optional sui.rpc.v2beta2.EndOfEpochData end_of_epoch_data */
        11:
          message.endOfEpochData = EndOfEpochData.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.endOfEpochData
          );
          break;
        case /* optional bytes version_specific_data */
        12:
          message.versionSpecificData = reader.bytes();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? import_runtime2.UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.bcs)
      import_bcs.Bcs.internalBinaryWrite(
        message.bcs,
        writer.tag(1, import_runtime.WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.digest !== void 0)
      writer.tag(2, import_runtime.WireType.LengthDelimited).string(message.digest);
    if (message.epoch !== void 0) writer.tag(3, import_runtime.WireType.Varint).uint64(message.epoch);
    if (message.sequenceNumber !== void 0)
      writer.tag(4, import_runtime.WireType.Varint).uint64(message.sequenceNumber);
    if (message.totalNetworkTransactions !== void 0)
      writer.tag(5, import_runtime.WireType.Varint).uint64(message.totalNetworkTransactions);
    if (message.contentDigest !== void 0)
      writer.tag(6, import_runtime.WireType.LengthDelimited).string(message.contentDigest);
    if (message.previousDigest !== void 0)
      writer.tag(7, import_runtime.WireType.LengthDelimited).string(message.previousDigest);
    if (message.epochRollingGasCostSummary)
      import_gas_cost_summary.GasCostSummary.internalBinaryWrite(
        message.epochRollingGasCostSummary,
        writer.tag(8, import_runtime.WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.timestamp)
      import_timestamp.Timestamp.internalBinaryWrite(
        message.timestamp,
        writer.tag(9, import_runtime.WireType.LengthDelimited).fork(),
        options
      ).join();
    for (let i = 0; i < message.commitments.length; i++)
      CheckpointCommitment.internalBinaryWrite(
        message.commitments[i],
        writer.tag(10, import_runtime.WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.endOfEpochData)
      EndOfEpochData.internalBinaryWrite(
        message.endOfEpochData,
        writer.tag(11, import_runtime.WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.versionSpecificData !== void 0)
      writer.tag(12, import_runtime.WireType.LengthDelimited).bytes(message.versionSpecificData);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? import_runtime2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const CheckpointSummary = new CheckpointSummary$Type();
class EndOfEpochData$Type extends import_runtime4.MessageType {
  constructor() {
    super("sui.rpc.v2beta2.EndOfEpochData", [
      {
        no: 1,
        name: "next_epoch_committee",
        kind: "message",
        repeat: 2,
        T: () => import_signature.ValidatorCommitteeMember
      },
      {
        no: 2,
        name: "next_epoch_protocol_version",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      {
        no: 3,
        name: "epoch_commitments",
        kind: "message",
        repeat: 2,
        T: () => CheckpointCommitment
      }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    message.nextEpochCommittee = [];
    message.epochCommitments = [];
    if (value !== void 0) (0, import_runtime3.reflectionMergePartial)(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated sui.rpc.v2beta2.ValidatorCommitteeMember next_epoch_committee */
        1:
          message.nextEpochCommittee.push(
            import_signature.ValidatorCommitteeMember.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        case /* optional uint64 next_epoch_protocol_version */
        2:
          message.nextEpochProtocolVersion = reader.uint64().toBigInt();
          break;
        case /* repeated sui.rpc.v2beta2.CheckpointCommitment epoch_commitments */
        3:
          message.epochCommitments.push(
            CheckpointCommitment.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? import_runtime2.UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    for (let i = 0; i < message.nextEpochCommittee.length; i++)
      import_signature.ValidatorCommitteeMember.internalBinaryWrite(
        message.nextEpochCommittee[i],
        writer.tag(1, import_runtime.WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.nextEpochProtocolVersion !== void 0)
      writer.tag(2, import_runtime.WireType.Varint).uint64(message.nextEpochProtocolVersion);
    for (let i = 0; i < message.epochCommitments.length; i++)
      CheckpointCommitment.internalBinaryWrite(
        message.epochCommitments[i],
        writer.tag(3, import_runtime.WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? import_runtime2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const EndOfEpochData = new EndOfEpochData$Type();
class CheckpointCommitment$Type extends import_runtime4.MessageType {
  constructor() {
    super("sui.rpc.v2beta2.CheckpointCommitment", [
      {
        no: 1,
        name: "kind",
        kind: "enum",
        opt: true,
        T: () => [
          "sui.rpc.v2beta2.CheckpointCommitment.CheckpointCommitmentKind",
          CheckpointCommitment_CheckpointCommitmentKind
        ]
      },
      {
        no: 2,
        name: "digest",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0) (0, import_runtime3.reflectionMergePartial)(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional sui.rpc.v2beta2.CheckpointCommitment.CheckpointCommitmentKind kind */
        1:
          message.kind = reader.int32();
          break;
        case /* optional string digest */
        2:
          message.digest = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? import_runtime2.UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.kind !== void 0) writer.tag(1, import_runtime.WireType.Varint).int32(message.kind);
    if (message.digest !== void 0)
      writer.tag(2, import_runtime.WireType.LengthDelimited).string(message.digest);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? import_runtime2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const CheckpointCommitment = new CheckpointCommitment$Type();
//# sourceMappingURL=checkpoint_summary.js.map
