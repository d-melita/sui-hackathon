{
  "version": 3,
  "sources": ["../../../../../../src/proto/sui/rpc/v2beta2/live_data_service.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { ServiceType } from '@protobuf-ts/runtime-rpc';\nimport type { BinaryWriteOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryWriter } from '@protobuf-ts/runtime';\nimport { WireType } from '@protobuf-ts/runtime';\nimport type { BinaryReadOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryReader } from '@protobuf-ts/runtime';\nimport { UnknownFieldHandler } from '@protobuf-ts/runtime';\nimport type { PartialMessage } from '@protobuf-ts/runtime';\nimport { reflectionMergePartial } from '@protobuf-ts/runtime';\nimport { MessageType } from '@protobuf-ts/runtime';\nimport { Value } from '../../../google/protobuf/struct.js';\nimport { Bcs } from './bcs.js';\nimport { Argument } from './argument.js';\nimport { ExecutedTransaction } from './executed_transaction.js';\nimport { Transaction } from './transaction.js';\nimport { Object } from './object.js';\nimport { FieldMask } from '../../../google/protobuf/field_mask.js';\n/**\n * Request message for `NodeService.GetCoinInfo`.\n *\n * @generated from protobuf message sui.rpc.v2beta2.GetCoinInfoRequest\n */\nexport interface GetCoinInfoRequest {\n\t/**\n\t * The coin type to request information about\n\t *\n\t * @generated from protobuf field: optional string coin_type = 1\n\t */\n\tcoinType?: string;\n}\n/**\n * Response message for `NodeService.GetCoinInfo`.\n *\n * @generated from protobuf message sui.rpc.v2beta2.GetCoinInfoResponse\n */\nexport interface GetCoinInfoResponse {\n\t/**\n\t * Required. The coin type.\n\t *\n\t * @generated from protobuf field: optional string coin_type = 1\n\t */\n\tcoinType?: string;\n\t/**\n\t * This field will be populated with information about this coin\n\t * type's `0x2::coin::CoinMetadata` if it exists and has not been wrapped.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.CoinMetadata metadata = 2\n\t */\n\tmetadata?: CoinMetadata;\n\t/**\n\t * This field will be populated with information about this coin\n\t * type's `0x2::coin::TreasuryCap` if it exists and has not been wrapped.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.CoinTreasury treasury = 3\n\t */\n\ttreasury?: CoinTreasury;\n\t/**\n\t * If this coin type is a regulated coin, this field will be\n\t * populated with information about its `0x2::coin::RegulatedCoinMetadata`\n\t * object.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.RegulatedCoinMetadata regulated_metadata = 4\n\t */\n\tregulatedMetadata?: RegulatedCoinMetadata;\n}\n/**\n * Metadata for a coin type\n *\n * @generated from protobuf message sui.rpc.v2beta2.CoinMetadata\n */\nexport interface CoinMetadata {\n\t/**\n\t * ObjectId of the `0x2::coin::CoinMetadata` object or\n\t * 0x2::sui::coin_registry::CoinData object (when registered with CoinRegistry).\n\t *\n\t * @generated from protobuf field: optional string id = 1\n\t */\n\tid?: string;\n\t/**\n\t * Number of decimal places to coin uses.\n\t *\n\t * @generated from protobuf field: optional uint32 decimals = 2\n\t */\n\tdecimals?: number;\n\t/**\n\t * Name for the token\n\t *\n\t * @generated from protobuf field: optional string name = 3\n\t */\n\tname?: string;\n\t/**\n\t * Symbol for the token\n\t *\n\t * @generated from protobuf field: optional string symbol = 4\n\t */\n\tsymbol?: string;\n\t/**\n\t * Description of the token\n\t *\n\t * @generated from protobuf field: optional string description = 5\n\t */\n\tdescription?: string;\n\t/**\n\t * URL for the token logo\n\t *\n\t * @generated from protobuf field: optional string icon_url = 6\n\t */\n\ticonUrl?: string;\n\t/**\n\t * The MetadataCap ID if it has been claimed for this coin type.\n\t * This capability allows updating the coin's metadata fields.\n\t * Only populated when metadata is from CoinRegistry.\n\t *\n\t * @generated from protobuf field: optional string metadata_cap_id = 7\n\t */\n\tmetadataCapId?: string;\n}\n/**\n * Information about a coin type's `0x2::coin::TreasuryCap` and its total available supply\n *\n * @generated from protobuf message sui.rpc.v2beta2.CoinTreasury\n */\nexport interface CoinTreasury {\n\t/**\n\t * ObjectId of the `0x2::coin::TreasuryCap` object.\n\t *\n\t * @generated from protobuf field: optional string id = 1\n\t */\n\tid?: string;\n\t/**\n\t * Total available supply for this coin type.\n\t *\n\t * @generated from protobuf field: optional uint64 total_supply = 2\n\t */\n\ttotalSupply?: bigint;\n\t/**\n\t * Supply state indicating if the supply is fixed or can still be minted\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.CoinTreasury.SupplyState supply_state = 3\n\t */\n\tsupplyState?: CoinTreasury_SupplyState;\n}\n/**\n * Supply state of a coin, matching the Move SupplyState enum\n *\n * @generated from protobuf enum sui.rpc.v2beta2.CoinTreasury.SupplyState\n */\nexport enum CoinTreasury_SupplyState {\n\t/**\n\t * Supply is unknown or TreasuryCap still exists (minting still possible)\n\t *\n\t * @generated from protobuf enum value: SUPPLY_STATE_UNKNOWN = 0;\n\t */\n\tSUPPLY_STATE_UNKNOWN = 0,\n\t/**\n\t * Supply is fixed (TreasuryCap consumed, no more minting possible)\n\t *\n\t * @generated from protobuf enum value: FIXED = 1;\n\t */\n\tFIXED = 1,\n}\n/**\n * Information about a regulated coin, which indicates that it makes use of the transfer deny list.\n *\n * @generated from protobuf message sui.rpc.v2beta2.RegulatedCoinMetadata\n */\nexport interface RegulatedCoinMetadata {\n\t/**\n\t * ObjectId of the `0x2::coin::RegulatedCoinMetadata` object.\n\t *\n\t * @generated from protobuf field: optional string id = 1\n\t */\n\tid?: string;\n\t/**\n\t * The ID of the coin's `CoinMetadata` or `CoinData` object.\n\t *\n\t * @generated from protobuf field: optional string coin_metadata_object = 2\n\t */\n\tcoinMetadataObject?: string;\n\t/**\n\t * The ID of the coin's `DenyCap` object.\n\t *\n\t * @generated from protobuf field: optional string deny_cap_object = 3\n\t */\n\tdenyCapObject?: string;\n}\n/**\n * Request message for `LiveDataService.GetBalance`.\n *\n * @generated from protobuf message sui.rpc.v2beta2.GetBalanceRequest\n */\nexport interface GetBalanceRequest {\n\t/**\n\t * Required. The owner's Sui address.\n\t *\n\t * @generated from protobuf field: optional string owner = 1\n\t */\n\towner?: string;\n\t/**\n\t * Required. The type names for the coin (e.g., 0x2::sui::SUI).\n\t *\n\t * @generated from protobuf field: optional string coin_type = 2\n\t */\n\tcoinType?: string;\n}\n/**\n * Response message for `LiveDataService.GetBalance`.\n * Return the total coin balance for one coin type, owned by the address owner.\n *\n * @generated from protobuf message sui.rpc.v2beta2.GetBalanceResponse\n */\nexport interface GetBalanceResponse {\n\t/**\n\t * The balance information for the requested coin type.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Balance balance = 1\n\t */\n\tbalance?: Balance;\n}\n/**\n * Request message for `LiveDataService.ListBalances`.\n *\n * @generated from protobuf message sui.rpc.v2beta2.ListBalancesRequest\n */\nexport interface ListBalancesRequest {\n\t/**\n\t * Required. The owner's Sui address.\n\t *\n\t * @generated from protobuf field: optional string owner = 1\n\t */\n\towner?: string;\n\t/**\n\t * The maximum number of balance entries to return. The service may return fewer than this value.\n\t * If unspecified, at most `50` entries will be returned.\n\t * The maximum value is `1000`; values above `1000` will be coerced to `1000`.\n\t *\n\t * @generated from protobuf field: optional uint32 page_size = 2\n\t */\n\tpageSize?: number;\n\t/**\n\t * A page token, received from a previous `ListBalances` call.\n\t * Provide this to retrieve the subsequent page.\n\t *\n\t * When paginating, all other parameters provided to `ListBalances` must\n\t * match the call that provided the page token.\n\t *\n\t * @generated from protobuf field: optional bytes page_token = 3\n\t */\n\tpageToken?: Uint8Array;\n}\n/**\n * Response message for `LiveDataService.ListBalances`.\n * Return the total coin balance for all coin types, owned by the address owner.\n *\n * @generated from protobuf message sui.rpc.v2beta2.ListBalancesResponse\n */\nexport interface ListBalancesResponse {\n\t/**\n\t * The list of coin types and their respective balances.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.Balance balances = 1\n\t */\n\tbalances: Balance[];\n\t/**\n\t * A token, which can be sent as `page_token` to retrieve the next page.\n\t * If this field is omitted, there are no subsequent pages.\n\t *\n\t * @generated from protobuf field: optional bytes next_page_token = 2\n\t */\n\tnextPageToken?: Uint8Array;\n}\n/**\n * Balance information for a specific coin type.\n *\n * @generated from protobuf message sui.rpc.v2beta2.Balance\n */\nexport interface Balance {\n\t/**\n\t * The type of the coin (e.g., 0x2::sui::SUI).\n\t *\n\t * @generated from protobuf field: optional string coin_type = 1\n\t */\n\tcoinType?: string;\n\t/**\n\t * Shows the total balance of the coin in its smallest unit.\n\t *\n\t * @generated from protobuf field: optional uint64 balance = 3\n\t */\n\tbalance?: bigint;\n}\n/**\n * Request message for `NodeService.ListDynamicFields`\n *\n * @generated from protobuf message sui.rpc.v2beta2.ListDynamicFieldsRequest\n */\nexport interface ListDynamicFieldsRequest {\n\t/**\n\t * Required. The `UID` of the parent, which owns the collections of dynamic fields.\n\t *\n\t * @generated from protobuf field: optional string parent = 1\n\t */\n\tparent?: string;\n\t/**\n\t * The maximum number of dynamic fields to return. The service may return fewer than this value.\n\t * If unspecified, at most `50` entries will be returned.\n\t * The maximum value is `1000`; values above `1000` will be coerced to `1000`.\n\t *\n\t * @generated from protobuf field: optional uint32 page_size = 2\n\t */\n\tpageSize?: number;\n\t/**\n\t * A page token, received from a previous `ListDynamicFields` call.\n\t * Provide this to retrieve the subsequent page.\n\t *\n\t * When paginating, all other parameters provided to `ListDynamicFields` must\n\t * match the call that provided the page token.\n\t *\n\t * @generated from protobuf field: optional bytes page_token = 3\n\t */\n\tpageToken?: Uint8Array;\n\t/**\n\t * @generated from protobuf field: optional google.protobuf.FieldMask read_mask = 4\n\t */\n\treadMask?: FieldMask;\n}\n/**\n * Response message for `NodeService.ListDynamicFields`\n *\n * @generated from protobuf message sui.rpc.v2beta2.ListDynamicFieldsResponse\n */\nexport interface ListDynamicFieldsResponse {\n\t/**\n\t * Page of dynamic fields owned by the specified parent.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.DynamicField dynamic_fields = 1\n\t */\n\tdynamicFields: DynamicField[];\n\t/**\n\t * A token, which can be sent as `page_token` to retrieve the next page.\n\t * If this field is omitted, there are no subsequent pages.\n\t *\n\t * @generated from protobuf field: optional bytes next_page_token = 2\n\t */\n\tnextPageToken?: Uint8Array;\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.DynamicField\n */\nexport interface DynamicField {\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.DynamicField.DynamicFieldKind kind = 1\n\t */\n\tkind?: DynamicField_DynamicFieldKind;\n\t/**\n\t * ObjectId of this dynamic field's parent.\n\t *\n\t * @generated from protobuf field: optional string parent = 2\n\t */\n\tparent?: string;\n\t/**\n\t * ObjectId of this dynamic field.\n\t *\n\t * @generated from protobuf field: optional string field_id = 3\n\t */\n\tfieldId?: string;\n\t/**\n\t * The type of the dynamic field \"name\"\n\t *\n\t * @generated from protobuf field: optional string name_type = 4\n\t */\n\tnameType?: string;\n\t/**\n\t * The serialized move value of \"name\"\n\t *\n\t * @generated from protobuf field: optional bytes name_value = 5\n\t */\n\tnameValue?: Uint8Array;\n\t/**\n\t * The type of the dynamic field \"value\".\n\t *\n\t * If this is a dynamic object field then this is the type of the object\n\t * itself (which is a child of this field), otherwise this is the type of the\n\t * value of this field.\n\t *\n\t * @generated from protobuf field: optional string value_type = 6\n\t */\n\tvalueType?: string;\n\t/**\n\t * The ObjectId of the child object when a child is a dynamic\n\t * object field.\n\t *\n\t * The presence or absence of this field can be used to determine if a child\n\t * is a dynamic field or a dynamic child object\n\t *\n\t * @generated from protobuf field: optional string dynamic_object_id = 7\n\t */\n\tdynamicObjectId?: string;\n\t/**\n\t * The object itself when a child is a dynamic object field.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Object object = 8\n\t */\n\tobject?: Object;\n}\n/**\n * @generated from protobuf enum sui.rpc.v2beta2.DynamicField.DynamicFieldKind\n */\nexport enum DynamicField_DynamicFieldKind {\n\t/**\n\t * @generated from protobuf enum value: DYNAMIC_FIELD_KIND_UNKNOWN = 0;\n\t */\n\tDYNAMIC_FIELD_KIND_UNKNOWN = 0,\n\t/**\n\t * @generated from protobuf enum value: FIELD = 1;\n\t */\n\tFIELD = 1,\n\t/**\n\t * @generated from protobuf enum value: OBJECT = 2;\n\t */\n\tOBJECT = 2,\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.SimulateTransactionRequest\n */\nexport interface SimulateTransactionRequest {\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Transaction transaction = 1\n\t */\n\ttransaction?: Transaction;\n\t/**\n\t * @generated from protobuf field: optional google.protobuf.FieldMask read_mask = 2\n\t */\n\treadMask?: FieldMask;\n\t/**\n\t * Specify whether checks should be ENABLED (default) or DISABLED while executing the transaction\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.SimulateTransactionRequest.TransactionChecks checks = 3\n\t */\n\tchecks?: SimulateTransactionRequest_TransactionChecks;\n\t/**\n\t * Perform gas selection based on a budget estimation and include the\n\t * selected gas payment and budget in the response.\n\t *\n\t * This option will be ignored if `checks` is `DISABLED`.\n\t *\n\t * @generated from protobuf field: optional bool do_gas_selection = 4\n\t */\n\tdoGasSelection?: boolean;\n}\n/**\n * buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX\n *\n * @generated from protobuf enum sui.rpc.v2beta2.SimulateTransactionRequest.TransactionChecks\n */\nexport enum SimulateTransactionRequest_TransactionChecks {\n\t/**\n\t * @generated from protobuf enum value: ENABLED = 0;\n\t */\n\tENABLED = 0,\n\t/**\n\t * @generated from protobuf enum value: DISABLED = 1;\n\t */\n\tDISABLED = 1,\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.SimulateTransactionResponse\n */\nexport interface SimulateTransactionResponse {\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.ExecutedTransaction transaction = 1\n\t */\n\ttransaction?: ExecutedTransaction;\n\t/**\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.CommandResult outputs = 2\n\t */\n\toutputs: CommandResult[];\n}\n/**\n * An intermediate result/output from the execution of a single command\n *\n * @generated from protobuf message sui.rpc.v2beta2.CommandResult\n */\nexport interface CommandResult {\n\t/**\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.CommandOutput return_values = 1\n\t */\n\treturnValues: CommandOutput[];\n\t/**\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.CommandOutput mutated_by_ref = 2\n\t */\n\tmutatedByRef: CommandOutput[];\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.CommandOutput\n */\nexport interface CommandOutput {\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Argument argument = 1\n\t */\n\targument?: Argument;\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Bcs value = 2\n\t */\n\tvalue?: Bcs;\n\t/**\n\t * JSON rendering of the output.\n\t *\n\t * @generated from protobuf field: optional google.protobuf.Value json = 3\n\t */\n\tjson?: Value;\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.ListOwnedObjectsRequest\n */\nexport interface ListOwnedObjectsRequest {\n\t/**\n\t * Required. The address of the account that owns the objects.\n\t *\n\t * @generated from protobuf field: optional string owner = 1\n\t */\n\towner?: string;\n\t/**\n\t * The maximum number of entries return. The service may return fewer than this value.\n\t * If unspecified, at most `50` entries will be returned.\n\t * The maximum value is `1000`; values above `1000` will be coerced to `1000`.\n\t *\n\t * @generated from protobuf field: optional uint32 page_size = 2\n\t */\n\tpageSize?: number;\n\t/**\n\t * A page token, received from a previous `ListOwnedObjects` call.\n\t * Provide this to retrieve the subsequent page.\n\t *\n\t * When paginating, all other parameters provided to `ListOwnedObjects` must\n\t * match the call that provided the page token.\n\t *\n\t * @generated from protobuf field: optional bytes page_token = 3\n\t */\n\tpageToken?: Uint8Array;\n\t/**\n\t * @generated from protobuf field: optional google.protobuf.FieldMask read_mask = 4\n\t */\n\treadMask?: FieldMask;\n\t/**\n\t * Optional type filter to limit the types of objects listed.\n\t *\n\t * Providing an object type with no type params will return objects of that\n\t * type with any type parameter, e.g. `0x2::coin::Coin` will return all\n\t * `Coin<T>` objects regardless of the type parameter `T`. Providing a type\n\t * with a type param will retrict the returned objects to only those objects\n\t * that match the provided type parameters, e.g.\n\t * `0x2::coin::Coin<0x2::sui::SUI>` will only return `Coin<SUI>` objects.\n\t *\n\t * @generated from protobuf field: optional string object_type = 5\n\t */\n\tobjectType?: string;\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.ListOwnedObjectsResponse\n */\nexport interface ListOwnedObjectsResponse {\n\t/**\n\t * Page of dynamic fields owned by the specified parent.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.Object objects = 1\n\t */\n\tobjects: Object[];\n\t/**\n\t * A token, which can be sent as `page_token` to retrieve the next page.\n\t * If this field is omitted, there are no subsequent pages.\n\t *\n\t * @generated from protobuf field: optional bytes next_page_token = 2\n\t */\n\tnextPageToken?: Uint8Array;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass GetCoinInfoRequest$Type extends MessageType<GetCoinInfoRequest> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.GetCoinInfoRequest', [\n\t\t\t{ no: 1, name: 'coin_type', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<GetCoinInfoRequest>): GetCoinInfoRequest {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<GetCoinInfoRequest>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: GetCoinInfoRequest,\n\t): GetCoinInfoRequest {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string coin_type */ 1:\n\t\t\t\t\tmessage.coinType = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: GetCoinInfoRequest,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string coin_type = 1; */\n\t\tif (message.coinType !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).string(message.coinType);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.GetCoinInfoRequest\n */\nexport const GetCoinInfoRequest = new GetCoinInfoRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GetCoinInfoResponse$Type extends MessageType<GetCoinInfoResponse> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.GetCoinInfoResponse', [\n\t\t\t{ no: 1, name: 'coin_type', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'metadata', kind: 'message', T: () => CoinMetadata },\n\t\t\t{ no: 3, name: 'treasury', kind: 'message', T: () => CoinTreasury },\n\t\t\t{ no: 4, name: 'regulated_metadata', kind: 'message', T: () => RegulatedCoinMetadata },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<GetCoinInfoResponse>): GetCoinInfoResponse {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<GetCoinInfoResponse>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: GetCoinInfoResponse,\n\t): GetCoinInfoResponse {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string coin_type */ 1:\n\t\t\t\t\tmessage.coinType = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.CoinMetadata metadata */ 2:\n\t\t\t\t\tmessage.metadata = CoinMetadata.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.metadata,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.CoinTreasury treasury */ 3:\n\t\t\t\t\tmessage.treasury = CoinTreasury.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.treasury,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.RegulatedCoinMetadata regulated_metadata */ 4:\n\t\t\t\t\tmessage.regulatedMetadata = RegulatedCoinMetadata.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.regulatedMetadata,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: GetCoinInfoResponse,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string coin_type = 1; */\n\t\tif (message.coinType !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).string(message.coinType);\n\t\t/* optional sui.rpc.v2beta2.CoinMetadata metadata = 2; */\n\t\tif (message.metadata)\n\t\t\tCoinMetadata.internalBinaryWrite(\n\t\t\t\tmessage.metadata,\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.CoinTreasury treasury = 3; */\n\t\tif (message.treasury)\n\t\t\tCoinTreasury.internalBinaryWrite(\n\t\t\t\tmessage.treasury,\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.RegulatedCoinMetadata regulated_metadata = 4; */\n\t\tif (message.regulatedMetadata)\n\t\t\tRegulatedCoinMetadata.internalBinaryWrite(\n\t\t\t\tmessage.regulatedMetadata,\n\t\t\t\twriter.tag(4, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.GetCoinInfoResponse\n */\nexport const GetCoinInfoResponse = new GetCoinInfoResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CoinMetadata$Type extends MessageType<CoinMetadata> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.CoinMetadata', [\n\t\t\t{ no: 1, name: 'id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'decimals', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t\t{ no: 3, name: 'name', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 4, name: 'symbol', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 5, name: 'description', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 6, name: 'icon_url', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 7, name: 'metadata_cap_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<CoinMetadata>): CoinMetadata {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<CoinMetadata>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: CoinMetadata,\n\t): CoinMetadata {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string id */ 1:\n\t\t\t\t\tmessage.id = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint32 decimals */ 2:\n\t\t\t\t\tmessage.decimals = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string name */ 3:\n\t\t\t\t\tmessage.name = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string symbol */ 4:\n\t\t\t\t\tmessage.symbol = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string description */ 5:\n\t\t\t\t\tmessage.description = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string icon_url */ 6:\n\t\t\t\t\tmessage.iconUrl = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string metadata_cap_id */ 7:\n\t\t\t\t\tmessage.metadataCapId = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: CoinMetadata,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string id = 1; */\n\t\tif (message.id !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.id);\n\t\t/* optional uint32 decimals = 2; */\n\t\tif (message.decimals !== undefined) writer.tag(2, WireType.Varint).uint32(message.decimals);\n\t\t/* optional string name = 3; */\n\t\tif (message.name !== undefined) writer.tag(3, WireType.LengthDelimited).string(message.name);\n\t\t/* optional string symbol = 4; */\n\t\tif (message.symbol !== undefined)\n\t\t\twriter.tag(4, WireType.LengthDelimited).string(message.symbol);\n\t\t/* optional string description = 5; */\n\t\tif (message.description !== undefined)\n\t\t\twriter.tag(5, WireType.LengthDelimited).string(message.description);\n\t\t/* optional string icon_url = 6; */\n\t\tif (message.iconUrl !== undefined)\n\t\t\twriter.tag(6, WireType.LengthDelimited).string(message.iconUrl);\n\t\t/* optional string metadata_cap_id = 7; */\n\t\tif (message.metadataCapId !== undefined)\n\t\t\twriter.tag(7, WireType.LengthDelimited).string(message.metadataCapId);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.CoinMetadata\n */\nexport const CoinMetadata = new CoinMetadata$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CoinTreasury$Type extends MessageType<CoinTreasury> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.CoinTreasury', [\n\t\t\t{ no: 1, name: 'id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'total_supply',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'supply_state',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => ['sui.rpc.v2beta2.CoinTreasury.SupplyState', CoinTreasury_SupplyState],\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<CoinTreasury>): CoinTreasury {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<CoinTreasury>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: CoinTreasury,\n\t): CoinTreasury {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string id */ 1:\n\t\t\t\t\tmessage.id = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 total_supply */ 2:\n\t\t\t\t\tmessage.totalSupply = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.CoinTreasury.SupplyState supply_state */ 3:\n\t\t\t\t\tmessage.supplyState = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: CoinTreasury,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string id = 1; */\n\t\tif (message.id !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.id);\n\t\t/* optional uint64 total_supply = 2; */\n\t\tif (message.totalSupply !== undefined)\n\t\t\twriter.tag(2, WireType.Varint).uint64(message.totalSupply);\n\t\t/* optional sui.rpc.v2beta2.CoinTreasury.SupplyState supply_state = 3; */\n\t\tif (message.supplyState !== undefined)\n\t\t\twriter.tag(3, WireType.Varint).int32(message.supplyState);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.CoinTreasury\n */\nexport const CoinTreasury = new CoinTreasury$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RegulatedCoinMetadata$Type extends MessageType<RegulatedCoinMetadata> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.RegulatedCoinMetadata', [\n\t\t\t{ no: 1, name: 'id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'coin_metadata_object',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 9 /*ScalarType.STRING*/,\n\t\t\t},\n\t\t\t{ no: 3, name: 'deny_cap_object', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<RegulatedCoinMetadata>): RegulatedCoinMetadata {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<RegulatedCoinMetadata>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: RegulatedCoinMetadata,\n\t): RegulatedCoinMetadata {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string id */ 1:\n\t\t\t\t\tmessage.id = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string coin_metadata_object */ 2:\n\t\t\t\t\tmessage.coinMetadataObject = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string deny_cap_object */ 3:\n\t\t\t\t\tmessage.denyCapObject = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: RegulatedCoinMetadata,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string id = 1; */\n\t\tif (message.id !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.id);\n\t\t/* optional string coin_metadata_object = 2; */\n\t\tif (message.coinMetadataObject !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.coinMetadataObject);\n\t\t/* optional string deny_cap_object = 3; */\n\t\tif (message.denyCapObject !== undefined)\n\t\t\twriter.tag(3, WireType.LengthDelimited).string(message.denyCapObject);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.RegulatedCoinMetadata\n */\nexport const RegulatedCoinMetadata = new RegulatedCoinMetadata$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GetBalanceRequest$Type extends MessageType<GetBalanceRequest> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.GetBalanceRequest', [\n\t\t\t{ no: 1, name: 'owner', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'coin_type', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<GetBalanceRequest>): GetBalanceRequest {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<GetBalanceRequest>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: GetBalanceRequest,\n\t): GetBalanceRequest {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string owner */ 1:\n\t\t\t\t\tmessage.owner = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string coin_type */ 2:\n\t\t\t\t\tmessage.coinType = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: GetBalanceRequest,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string owner = 1; */\n\t\tif (message.owner !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.owner);\n\t\t/* optional string coin_type = 2; */\n\t\tif (message.coinType !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.coinType);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.GetBalanceRequest\n */\nexport const GetBalanceRequest = new GetBalanceRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GetBalanceResponse$Type extends MessageType<GetBalanceResponse> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.GetBalanceResponse', [\n\t\t\t{ no: 1, name: 'balance', kind: 'message', T: () => Balance },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<GetBalanceResponse>): GetBalanceResponse {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<GetBalanceResponse>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: GetBalanceResponse,\n\t): GetBalanceResponse {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Balance balance */ 1:\n\t\t\t\t\tmessage.balance = Balance.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.balance,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: GetBalanceResponse,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.Balance balance = 1; */\n\t\tif (message.balance)\n\t\t\tBalance.internalBinaryWrite(\n\t\t\t\tmessage.balance,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.GetBalanceResponse\n */\nexport const GetBalanceResponse = new GetBalanceResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ListBalancesRequest$Type extends MessageType<ListBalancesRequest> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ListBalancesRequest', [\n\t\t\t{ no: 1, name: 'owner', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'page_size', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t\t{ no: 3, name: 'page_token', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ListBalancesRequest>): ListBalancesRequest {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<ListBalancesRequest>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ListBalancesRequest,\n\t): ListBalancesRequest {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string owner */ 1:\n\t\t\t\t\tmessage.owner = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint32 page_size */ 2:\n\t\t\t\t\tmessage.pageSize = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes page_token */ 3:\n\t\t\t\t\tmessage.pageToken = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ListBalancesRequest,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string owner = 1; */\n\t\tif (message.owner !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.owner);\n\t\t/* optional uint32 page_size = 2; */\n\t\tif (message.pageSize !== undefined) writer.tag(2, WireType.Varint).uint32(message.pageSize);\n\t\t/* optional bytes page_token = 3; */\n\t\tif (message.pageToken !== undefined)\n\t\t\twriter.tag(3, WireType.LengthDelimited).bytes(message.pageToken);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ListBalancesRequest\n */\nexport const ListBalancesRequest = new ListBalancesRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ListBalancesResponse$Type extends MessageType<ListBalancesResponse> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ListBalancesResponse', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'balances',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => Balance,\n\t\t\t},\n\t\t\t{ no: 2, name: 'next_page_token', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ListBalancesResponse>): ListBalancesResponse {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.balances = [];\n\t\tif (value !== undefined) reflectionMergePartial<ListBalancesResponse>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ListBalancesResponse,\n\t): ListBalancesResponse {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.Balance balances */ 1:\n\t\t\t\t\tmessage.balances.push(Balance.internalBinaryRead(reader, reader.uint32(), options));\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes next_page_token */ 2:\n\t\t\t\t\tmessage.nextPageToken = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ListBalancesResponse,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* repeated sui.rpc.v2beta2.Balance balances = 1; */\n\t\tfor (let i = 0; i < message.balances.length; i++)\n\t\t\tBalance.internalBinaryWrite(\n\t\t\t\tmessage.balances[i],\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional bytes next_page_token = 2; */\n\t\tif (message.nextPageToken !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).bytes(message.nextPageToken);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ListBalancesResponse\n */\nexport const ListBalancesResponse = new ListBalancesResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Balance$Type extends MessageType<Balance> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.Balance', [\n\t\t\t{ no: 1, name: 'coin_type', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'balance',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<Balance>): Balance {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<Balance>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: Balance,\n\t): Balance {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string coin_type */ 1:\n\t\t\t\t\tmessage.coinType = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 balance */ 3:\n\t\t\t\t\tmessage.balance = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: Balance,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string coin_type = 1; */\n\t\tif (message.coinType !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).string(message.coinType);\n\t\t/* optional uint64 balance = 3; */\n\t\tif (message.balance !== undefined) writer.tag(3, WireType.Varint).uint64(message.balance);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.Balance\n */\nexport const Balance = new Balance$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ListDynamicFieldsRequest$Type extends MessageType<ListDynamicFieldsRequest> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ListDynamicFieldsRequest', [\n\t\t\t{ no: 1, name: 'parent', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'page_size', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t\t{ no: 3, name: 'page_token', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{ no: 4, name: 'read_mask', kind: 'message', T: () => FieldMask },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ListDynamicFieldsRequest>): ListDynamicFieldsRequest {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<ListDynamicFieldsRequest>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ListDynamicFieldsRequest,\n\t): ListDynamicFieldsRequest {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string parent */ 1:\n\t\t\t\t\tmessage.parent = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint32 page_size */ 2:\n\t\t\t\t\tmessage.pageSize = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes page_token */ 3:\n\t\t\t\t\tmessage.pageToken = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional google.protobuf.FieldMask read_mask */ 4:\n\t\t\t\t\tmessage.readMask = FieldMask.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.readMask,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ListDynamicFieldsRequest,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string parent = 1; */\n\t\tif (message.parent !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).string(message.parent);\n\t\t/* optional uint32 page_size = 2; */\n\t\tif (message.pageSize !== undefined) writer.tag(2, WireType.Varint).uint32(message.pageSize);\n\t\t/* optional bytes page_token = 3; */\n\t\tif (message.pageToken !== undefined)\n\t\t\twriter.tag(3, WireType.LengthDelimited).bytes(message.pageToken);\n\t\t/* optional google.protobuf.FieldMask read_mask = 4; */\n\t\tif (message.readMask)\n\t\t\tFieldMask.internalBinaryWrite(\n\t\t\t\tmessage.readMask,\n\t\t\t\twriter.tag(4, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ListDynamicFieldsRequest\n */\nexport const ListDynamicFieldsRequest = new ListDynamicFieldsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ListDynamicFieldsResponse$Type extends MessageType<ListDynamicFieldsResponse> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ListDynamicFieldsResponse', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'dynamic_fields',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => DynamicField,\n\t\t\t},\n\t\t\t{ no: 2, name: 'next_page_token', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ListDynamicFieldsResponse>): ListDynamicFieldsResponse {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.dynamicFields = [];\n\t\tif (value !== undefined)\n\t\t\treflectionMergePartial<ListDynamicFieldsResponse>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ListDynamicFieldsResponse,\n\t): ListDynamicFieldsResponse {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.DynamicField dynamic_fields */ 1:\n\t\t\t\t\tmessage.dynamicFields.push(\n\t\t\t\t\t\tDynamicField.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes next_page_token */ 2:\n\t\t\t\t\tmessage.nextPageToken = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ListDynamicFieldsResponse,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* repeated sui.rpc.v2beta2.DynamicField dynamic_fields = 1; */\n\t\tfor (let i = 0; i < message.dynamicFields.length; i++)\n\t\t\tDynamicField.internalBinaryWrite(\n\t\t\t\tmessage.dynamicFields[i],\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional bytes next_page_token = 2; */\n\t\tif (message.nextPageToken !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).bytes(message.nextPageToken);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ListDynamicFieldsResponse\n */\nexport const ListDynamicFieldsResponse = new ListDynamicFieldsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DynamicField$Type extends MessageType<DynamicField> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.DynamicField', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'kind',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => ['sui.rpc.v2beta2.DynamicField.DynamicFieldKind', DynamicField_DynamicFieldKind],\n\t\t\t},\n\t\t\t{ no: 2, name: 'parent', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 3, name: 'field_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 4, name: 'name_type', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 5, name: 'name_value', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{ no: 6, name: 'value_type', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 7, name: 'dynamic_object_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 8, name: 'object', kind: 'message', T: () => Object },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<DynamicField>): DynamicField {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<DynamicField>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: DynamicField,\n\t): DynamicField {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.DynamicField.DynamicFieldKind kind */ 1:\n\t\t\t\t\tmessage.kind = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string parent */ 2:\n\t\t\t\t\tmessage.parent = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string field_id */ 3:\n\t\t\t\t\tmessage.fieldId = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string name_type */ 4:\n\t\t\t\t\tmessage.nameType = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes name_value */ 5:\n\t\t\t\t\tmessage.nameValue = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string value_type */ 6:\n\t\t\t\t\tmessage.valueType = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string dynamic_object_id */ 7:\n\t\t\t\t\tmessage.dynamicObjectId = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Object object */ 8:\n\t\t\t\t\tmessage.object = Object.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.object,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: DynamicField,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.DynamicField.DynamicFieldKind kind = 1; */\n\t\tif (message.kind !== undefined) writer.tag(1, WireType.Varint).int32(message.kind);\n\t\t/* optional string parent = 2; */\n\t\tif (message.parent !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.parent);\n\t\t/* optional string field_id = 3; */\n\t\tif (message.fieldId !== undefined)\n\t\t\twriter.tag(3, WireType.LengthDelimited).string(message.fieldId);\n\t\t/* optional string name_type = 4; */\n\t\tif (message.nameType !== undefined)\n\t\t\twriter.tag(4, WireType.LengthDelimited).string(message.nameType);\n\t\t/* optional bytes name_value = 5; */\n\t\tif (message.nameValue !== undefined)\n\t\t\twriter.tag(5, WireType.LengthDelimited).bytes(message.nameValue);\n\t\t/* optional string value_type = 6; */\n\t\tif (message.valueType !== undefined)\n\t\t\twriter.tag(6, WireType.LengthDelimited).string(message.valueType);\n\t\t/* optional string dynamic_object_id = 7; */\n\t\tif (message.dynamicObjectId !== undefined)\n\t\t\twriter.tag(7, WireType.LengthDelimited).string(message.dynamicObjectId);\n\t\t/* optional sui.rpc.v2beta2.Object object = 8; */\n\t\tif (message.object)\n\t\t\tObject.internalBinaryWrite(\n\t\t\t\tmessage.object,\n\t\t\t\twriter.tag(8, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.DynamicField\n */\nexport const DynamicField = new DynamicField$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimulateTransactionRequest$Type extends MessageType<SimulateTransactionRequest> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.SimulateTransactionRequest', [\n\t\t\t{ no: 1, name: 'transaction', kind: 'message', T: () => Transaction },\n\t\t\t{ no: 2, name: 'read_mask', kind: 'message', T: () => FieldMask },\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'checks',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => [\n\t\t\t\t\t'sui.rpc.v2beta2.SimulateTransactionRequest.TransactionChecks',\n\t\t\t\t\tSimulateTransactionRequest_TransactionChecks,\n\t\t\t\t],\n\t\t\t},\n\t\t\t{ no: 4, name: 'do_gas_selection', kind: 'scalar', opt: true, T: 8 /*ScalarType.BOOL*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<SimulateTransactionRequest>): SimulateTransactionRequest {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined)\n\t\t\treflectionMergePartial<SimulateTransactionRequest>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: SimulateTransactionRequest,\n\t): SimulateTransactionRequest {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Transaction transaction */ 1:\n\t\t\t\t\tmessage.transaction = Transaction.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.transaction,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional google.protobuf.FieldMask read_mask */ 2:\n\t\t\t\t\tmessage.readMask = FieldMask.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.readMask,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.SimulateTransactionRequest.TransactionChecks checks */ 3:\n\t\t\t\t\tmessage.checks = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bool do_gas_selection */ 4:\n\t\t\t\t\tmessage.doGasSelection = reader.bool();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: SimulateTransactionRequest,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.Transaction transaction = 1; */\n\t\tif (message.transaction)\n\t\t\tTransaction.internalBinaryWrite(\n\t\t\t\tmessage.transaction,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional google.protobuf.FieldMask read_mask = 2; */\n\t\tif (message.readMask)\n\t\t\tFieldMask.internalBinaryWrite(\n\t\t\t\tmessage.readMask,\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.SimulateTransactionRequest.TransactionChecks checks = 3; */\n\t\tif (message.checks !== undefined) writer.tag(3, WireType.Varint).int32(message.checks);\n\t\t/* optional bool do_gas_selection = 4; */\n\t\tif (message.doGasSelection !== undefined)\n\t\t\twriter.tag(4, WireType.Varint).bool(message.doGasSelection);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.SimulateTransactionRequest\n */\nexport const SimulateTransactionRequest = new SimulateTransactionRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimulateTransactionResponse$Type extends MessageType<SimulateTransactionResponse> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.SimulateTransactionResponse', [\n\t\t\t{ no: 1, name: 'transaction', kind: 'message', T: () => ExecutedTransaction },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'outputs',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => CommandResult,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<SimulateTransactionResponse>): SimulateTransactionResponse {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.outputs = [];\n\t\tif (value !== undefined)\n\t\t\treflectionMergePartial<SimulateTransactionResponse>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: SimulateTransactionResponse,\n\t): SimulateTransactionResponse {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.ExecutedTransaction transaction */ 1:\n\t\t\t\t\tmessage.transaction = ExecutedTransaction.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.transaction,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.CommandResult outputs */ 2:\n\t\t\t\t\tmessage.outputs.push(CommandResult.internalBinaryRead(reader, reader.uint32(), options));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: SimulateTransactionResponse,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.ExecutedTransaction transaction = 1; */\n\t\tif (message.transaction)\n\t\t\tExecutedTransaction.internalBinaryWrite(\n\t\t\t\tmessage.transaction,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* repeated sui.rpc.v2beta2.CommandResult outputs = 2; */\n\t\tfor (let i = 0; i < message.outputs.length; i++)\n\t\t\tCommandResult.internalBinaryWrite(\n\t\t\t\tmessage.outputs[i],\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.SimulateTransactionResponse\n */\nexport const SimulateTransactionResponse = new SimulateTransactionResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CommandResult$Type extends MessageType<CommandResult> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.CommandResult', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'return_values',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => CommandOutput,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'mutated_by_ref',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => CommandOutput,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<CommandResult>): CommandResult {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.returnValues = [];\n\t\tmessage.mutatedByRef = [];\n\t\tif (value !== undefined) reflectionMergePartial<CommandResult>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: CommandResult,\n\t): CommandResult {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.CommandOutput return_values */ 1:\n\t\t\t\t\tmessage.returnValues.push(\n\t\t\t\t\t\tCommandOutput.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.CommandOutput mutated_by_ref */ 2:\n\t\t\t\t\tmessage.mutatedByRef.push(\n\t\t\t\t\t\tCommandOutput.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: CommandResult,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* repeated sui.rpc.v2beta2.CommandOutput return_values = 1; */\n\t\tfor (let i = 0; i < message.returnValues.length; i++)\n\t\t\tCommandOutput.internalBinaryWrite(\n\t\t\t\tmessage.returnValues[i],\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* repeated sui.rpc.v2beta2.CommandOutput mutated_by_ref = 2; */\n\t\tfor (let i = 0; i < message.mutatedByRef.length; i++)\n\t\t\tCommandOutput.internalBinaryWrite(\n\t\t\t\tmessage.mutatedByRef[i],\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.CommandResult\n */\nexport const CommandResult = new CommandResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CommandOutput$Type extends MessageType<CommandOutput> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.CommandOutput', [\n\t\t\t{ no: 1, name: 'argument', kind: 'message', T: () => Argument },\n\t\t\t{ no: 2, name: 'value', kind: 'message', T: () => Bcs },\n\t\t\t{ no: 3, name: 'json', kind: 'message', T: () => Value },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<CommandOutput>): CommandOutput {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<CommandOutput>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: CommandOutput,\n\t): CommandOutput {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Argument argument */ 1:\n\t\t\t\t\tmessage.argument = Argument.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.argument,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Bcs value */ 2:\n\t\t\t\t\tmessage.value = Bcs.internalBinaryRead(reader, reader.uint32(), options, message.value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional google.protobuf.Value json */ 3:\n\t\t\t\t\tmessage.json = Value.internalBinaryRead(reader, reader.uint32(), options, message.json);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: CommandOutput,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.Argument argument = 1; */\n\t\tif (message.argument)\n\t\t\tArgument.internalBinaryWrite(\n\t\t\t\tmessage.argument,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.Bcs value = 2; */\n\t\tif (message.value)\n\t\t\tBcs.internalBinaryWrite(\n\t\t\t\tmessage.value,\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional google.protobuf.Value json = 3; */\n\t\tif (message.json)\n\t\t\tValue.internalBinaryWrite(\n\t\t\t\tmessage.json,\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.CommandOutput\n */\nexport const CommandOutput = new CommandOutput$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ListOwnedObjectsRequest$Type extends MessageType<ListOwnedObjectsRequest> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ListOwnedObjectsRequest', [\n\t\t\t{ no: 1, name: 'owner', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'page_size', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t\t{ no: 3, name: 'page_token', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{ no: 4, name: 'read_mask', kind: 'message', T: () => FieldMask },\n\t\t\t{ no: 5, name: 'object_type', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ListOwnedObjectsRequest>): ListOwnedObjectsRequest {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<ListOwnedObjectsRequest>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ListOwnedObjectsRequest,\n\t): ListOwnedObjectsRequest {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string owner */ 1:\n\t\t\t\t\tmessage.owner = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint32 page_size */ 2:\n\t\t\t\t\tmessage.pageSize = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes page_token */ 3:\n\t\t\t\t\tmessage.pageToken = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional google.protobuf.FieldMask read_mask */ 4:\n\t\t\t\t\tmessage.readMask = FieldMask.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.readMask,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string object_type */ 5:\n\t\t\t\t\tmessage.objectType = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ListOwnedObjectsRequest,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string owner = 1; */\n\t\tif (message.owner !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.owner);\n\t\t/* optional uint32 page_size = 2; */\n\t\tif (message.pageSize !== undefined) writer.tag(2, WireType.Varint).uint32(message.pageSize);\n\t\t/* optional bytes page_token = 3; */\n\t\tif (message.pageToken !== undefined)\n\t\t\twriter.tag(3, WireType.LengthDelimited).bytes(message.pageToken);\n\t\t/* optional google.protobuf.FieldMask read_mask = 4; */\n\t\tif (message.readMask)\n\t\t\tFieldMask.internalBinaryWrite(\n\t\t\t\tmessage.readMask,\n\t\t\t\twriter.tag(4, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional string object_type = 5; */\n\t\tif (message.objectType !== undefined)\n\t\t\twriter.tag(5, WireType.LengthDelimited).string(message.objectType);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ListOwnedObjectsRequest\n */\nexport const ListOwnedObjectsRequest = new ListOwnedObjectsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ListOwnedObjectsResponse$Type extends MessageType<ListOwnedObjectsResponse> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ListOwnedObjectsResponse', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'objects',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => Object,\n\t\t\t},\n\t\t\t{ no: 2, name: 'next_page_token', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ListOwnedObjectsResponse>): ListOwnedObjectsResponse {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.objects = [];\n\t\tif (value !== undefined) reflectionMergePartial<ListOwnedObjectsResponse>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ListOwnedObjectsResponse,\n\t): ListOwnedObjectsResponse {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.Object objects */ 1:\n\t\t\t\t\tmessage.objects.push(Object.internalBinaryRead(reader, reader.uint32(), options));\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes next_page_token */ 2:\n\t\t\t\t\tmessage.nextPageToken = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ListOwnedObjectsResponse,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* repeated sui.rpc.v2beta2.Object objects = 1; */\n\t\tfor (let i = 0; i < message.objects.length; i++)\n\t\t\tObject.internalBinaryWrite(\n\t\t\t\tmessage.objects[i],\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional bytes next_page_token = 2; */\n\t\tif (message.nextPageToken !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).bytes(message.nextPageToken);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ListOwnedObjectsResponse\n */\nexport const ListOwnedObjectsResponse = new ListOwnedObjectsResponse$Type();\n/**\n * @generated ServiceType for protobuf service sui.rpc.v2beta2.LiveDataService\n */\nexport const LiveDataService = new ServiceType('sui.rpc.v2beta2.LiveDataService', [\n\t{\n\t\tname: 'ListDynamicFields',\n\t\toptions: {},\n\t\tI: ListDynamicFieldsRequest,\n\t\tO: ListDynamicFieldsResponse,\n\t},\n\t{\n\t\tname: 'ListOwnedObjects',\n\t\toptions: {},\n\t\tI: ListOwnedObjectsRequest,\n\t\tO: ListOwnedObjectsResponse,\n\t},\n\t{ name: 'GetCoinInfo', options: {}, I: GetCoinInfoRequest, O: GetCoinInfoResponse },\n\t{ name: 'GetBalance', options: {}, I: GetBalanceRequest, O: GetBalanceResponse },\n\t{ name: 'ListBalances', options: {}, I: ListBalancesRequest, O: ListBalancesResponse },\n\t{\n\t\tname: 'SimulateTransaction',\n\t\toptions: {},\n\t\tI: SimulateTransactionRequest,\n\t\tO: SimulateTransactionResponse,\n\t},\n]);\n"],
  "mappings": "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",
  "names": ["import_runtime", "CoinTreasury_SupplyState", "DynamicField_DynamicFieldKind", "SimulateTransactionRequest_TransactionChecks"]
}
