{
  "version": 3,
  "sources": ["../../../../../src/proto/google/rpc/status.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport type { BinaryWriteOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryWriter } from '@protobuf-ts/runtime';\nimport { WireType } from '@protobuf-ts/runtime';\nimport type { BinaryReadOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryReader } from '@protobuf-ts/runtime';\nimport { UnknownFieldHandler } from '@protobuf-ts/runtime';\nimport type { PartialMessage } from '@protobuf-ts/runtime';\nimport { reflectionMergePartial } from '@protobuf-ts/runtime';\nimport { MessageType } from '@protobuf-ts/runtime';\nimport { Any } from '../protobuf/any.js';\n/**\n * The `Status` type defines a logical error model that is suitable for\n * different programming environments, including REST APIs and RPC APIs. It is\n * used by [gRPC](https://github.com/grpc). Each `Status` message contains\n * three pieces of data: error code, error message, and error details.\n *\n * You can find out more about this error model and how to work with it in the\n * [API Design Guide](https://cloud.google.com/apis/design/errors).\n *\n * @generated from protobuf message google.rpc.Status\n */\nexport interface Status {\n\t/**\n\t * The status code, which should be an enum value of\n\t * [google.rpc.Code][google.rpc.Code].\n\t *\n\t * @generated from protobuf field: int32 code = 1\n\t */\n\tcode: number;\n\t/**\n\t * A developer-facing error message, which should be in English. Any\n\t * user-facing error message should be localized and sent in the\n\t * [google.rpc.Status.details][google.rpc.Status.details] field, or localized\n\t * by the client.\n\t *\n\t * @generated from protobuf field: string message = 2\n\t */\n\tmessage: string;\n\t/**\n\t * A list of messages that carry the error details.  There is a common set of\n\t * message types for APIs to use.\n\t *\n\t * @generated from protobuf field: repeated google.protobuf.Any details = 3\n\t */\n\tdetails: Any[];\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Status$Type extends MessageType<Status> {\n\tconstructor() {\n\t\tsuper('google.rpc.Status', [\n\t\t\t{ no: 1, name: 'code', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },\n\t\t\t{ no: 2, name: 'message', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 3, name: 'details', kind: 'message', repeat: 2 /*RepeatType.UNPACKED*/, T: () => Any },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<Status>): Status {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.code = 0;\n\t\tmessage.message = '';\n\t\tmessage.details = [];\n\t\tif (value !== undefined) reflectionMergePartial<Status>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: Status,\n\t): Status {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* int32 code */ 1:\n\t\t\t\t\tmessage.code = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* string message */ 2:\n\t\t\t\t\tmessage.message = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated google.protobuf.Any details */ 3:\n\t\t\t\t\tmessage.details.push(Any.internalBinaryRead(reader, reader.uint32(), options));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: Status,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* int32 code = 1; */\n\t\tif (message.code !== 0) writer.tag(1, WireType.Varint).int32(message.code);\n\t\t/* string message = 2; */\n\t\tif (message.message !== '') writer.tag(2, WireType.LengthDelimited).string(message.message);\n\t\t/* repeated google.protobuf.Any details = 3; */\n\t\tfor (let i = 0; i < message.details.length; i++)\n\t\t\tAny.internalBinaryWrite(\n\t\t\t\tmessage.details[i],\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message google.rpc.Status\n */\nexport const Status = new Status$Type();\n"],
  "mappings": "AAIA,SAAS,gBAAgB;AAGzB,SAAS,2BAA2B;AAEpC,SAAS,8BAA8B;AACvC,SAAS,mBAAmB;AAC5B,SAAS,WAAW;AAsCpB,MAAM,oBAAoB,YAAoB;AAAA,EAC7C,cAAc;AACb,UAAM,qBAAqB;AAAA,MAC1B;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAQ,MAAM;AAAA,QAAU,GAAG;AAAA;AAAA,MAAuB;AAAA,MACjE;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAW,MAAM;AAAA,QAAU,GAAG;AAAA;AAAA,MAAwB;AAAA,MACrE,EAAE,IAAI,GAAG,MAAM,WAAW,MAAM,WAAW,QAAQ,GAA2B,GAAG,MAAM,IAAI;AAAA,IAC5F,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAwC;AAC9C,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,OAAO;AACf,YAAQ,UAAU;AAClB,YAAQ,UAAU,CAAC;AACnB,QAAI,UAAU,OAAW,wBAA+B,MAAM,SAAS,KAAK;AAC5E,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACS;AACT,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAsB;AACrB,kBAAQ,OAAO,OAAO,MAAM;AAC5B;AAAA,QACD;AAAA,QAA0B;AACzB,kBAAQ,UAAU,OAAO,OAAO;AAChC;AAAA,QACD;AAAA,QAAgD;AAC/C,kBAAQ,QAAQ,KAAK,IAAI,mBAAmB,QAAQ,OAAO,OAAO,GAAG,OAAO,CAAC;AAC7E;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oBAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,SAAS,EAAG,QAAO,IAAI,GAAG,SAAS,MAAM,EAAE,MAAM,QAAQ,IAAI;AAEzE,QAAI,QAAQ,YAAY,GAAI,QAAO,IAAI,GAAG,SAAS,eAAe,EAAE,OAAO,QAAQ,OAAO;AAE1F,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,QAAQ;AAC3C,UAAI;AAAA,QACH,QAAQ,QAAQ,CAAC;AAAA,QACjB,OAAO,IAAI,GAAG,SAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oBAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,SAAS,IAAI,YAAY;",
  "names": []
}
