import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
/**
 * @generated from protobuf message sui.rpc.v2beta2.ProtocolConfig
 */
export interface ProtocolConfig {
    /**
     * @generated from protobuf field: optional uint64 protocol_version = 1
     */
    protocolVersion?: bigint;
    /**
     * @generated from protobuf field: map<string, bool> feature_flags = 2
     */
    featureFlags: {
        [key: string]: boolean;
    };
    /**
     * @generated from protobuf field: map<string, string> attributes = 3
     */
    attributes: {
        [key: string]: string;
    };
}
declare class ProtocolConfig$Type extends MessageType<ProtocolConfig> {
    constructor();
    create(value?: PartialMessage<ProtocolConfig>): ProtocolConfig;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtocolConfig): ProtocolConfig;
    private binaryReadMap2;
    private binaryReadMap3;
    internalBinaryWrite(message: ProtocolConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message sui.rpc.v2beta2.ProtocolConfig
 */
export declare const ProtocolConfig: ProtocolConfig$Type;
export {};
