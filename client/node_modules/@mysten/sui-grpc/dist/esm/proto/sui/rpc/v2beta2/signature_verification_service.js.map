{
  "version": 3,
  "sources": ["../../../../../../src/proto/sui/rpc/v2beta2/signature_verification_service.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { ServiceType } from '@protobuf-ts/runtime-rpc';\nimport type { BinaryWriteOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryWriter } from '@protobuf-ts/runtime';\nimport { WireType } from '@protobuf-ts/runtime';\nimport type { BinaryReadOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryReader } from '@protobuf-ts/runtime';\nimport { UnknownFieldHandler } from '@protobuf-ts/runtime';\nimport type { PartialMessage } from '@protobuf-ts/runtime';\nimport { reflectionMergePartial } from '@protobuf-ts/runtime';\nimport { MessageType } from '@protobuf-ts/runtime';\nimport { ActiveJwk } from './transaction.js';\nimport { UserSignature } from './signature.js';\nimport { Bcs } from './bcs.js';\n/**\n * @generated from protobuf message sui.rpc.v2beta2.VerifySignatureRequest\n */\nexport interface VerifySignatureRequest {\n\t/**\n\t * The message to verify against.\n\t *\n\t * Today the only supported message types are `PersonalMessage` and\n\t * `TransactionData` and the `Bcs.name` must be set to indicate which type of\n\t * message is being verified.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Bcs message = 1\n\t */\n\tmessage?: Bcs;\n\t/**\n\t * The siganture to verify.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.UserSignature signature = 2\n\t */\n\tsignature?: UserSignature;\n\t/**\n\t * Optional. Address to validate against the provided signature.\n\t *\n\t * If provided, this address will be compared against the the address derived\n\t * from the provide signature and a successful response will only be returned\n\t * if they match.\n\t *\n\t * @generated from protobuf field: optional string address = 3\n\t */\n\taddress?: string;\n\t/**\n\t * The set of JWKs to use when verifying Zklogin signatures.\n\t * If this is empty the current set of valid JWKs stored onchain will be used\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.ActiveJwk jwks = 4\n\t */\n\tjwks: ActiveJwk[];\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.VerifySignatureResponse\n */\nexport interface VerifySignatureResponse {\n\t/**\n\t * Indicates if the provided signature was valid given the requested parameters.\n\t *\n\t * @generated from protobuf field: optional bool is_valid = 1\n\t */\n\tisValid?: boolean;\n\t/**\n\t * If `is_valid` is `false`, this is the reason for why the signature verification failed.\n\t *\n\t * @generated from protobuf field: optional string reason = 2\n\t */\n\treason?: string;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass VerifySignatureRequest$Type extends MessageType<VerifySignatureRequest> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.VerifySignatureRequest', [\n\t\t\t{ no: 1, name: 'message', kind: 'message', T: () => Bcs },\n\t\t\t{ no: 2, name: 'signature', kind: 'message', T: () => UserSignature },\n\t\t\t{ no: 3, name: 'address', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 4,\n\t\t\t\tname: 'jwks',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => ActiveJwk,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<VerifySignatureRequest>): VerifySignatureRequest {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.jwks = [];\n\t\tif (value !== undefined) reflectionMergePartial<VerifySignatureRequest>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: VerifySignatureRequest,\n\t): VerifySignatureRequest {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Bcs message */ 1:\n\t\t\t\t\tmessage.message = Bcs.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.message,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.UserSignature signature */ 2:\n\t\t\t\t\tmessage.signature = UserSignature.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.signature,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string address */ 3:\n\t\t\t\t\tmessage.address = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.ActiveJwk jwks */ 4:\n\t\t\t\t\tmessage.jwks.push(ActiveJwk.internalBinaryRead(reader, reader.uint32(), options));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: VerifySignatureRequest,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.Bcs message = 1; */\n\t\tif (message.message)\n\t\t\tBcs.internalBinaryWrite(\n\t\t\t\tmessage.message,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.UserSignature signature = 2; */\n\t\tif (message.signature)\n\t\t\tUserSignature.internalBinaryWrite(\n\t\t\t\tmessage.signature,\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional string address = 3; */\n\t\tif (message.address !== undefined)\n\t\t\twriter.tag(3, WireType.LengthDelimited).string(message.address);\n\t\t/* repeated sui.rpc.v2beta2.ActiveJwk jwks = 4; */\n\t\tfor (let i = 0; i < message.jwks.length; i++)\n\t\t\tActiveJwk.internalBinaryWrite(\n\t\t\t\tmessage.jwks[i],\n\t\t\t\twriter.tag(4, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.VerifySignatureRequest\n */\nexport const VerifySignatureRequest = new VerifySignatureRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VerifySignatureResponse$Type extends MessageType<VerifySignatureResponse> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.VerifySignatureResponse', [\n\t\t\t{ no: 1, name: 'is_valid', kind: 'scalar', opt: true, T: 8 /*ScalarType.BOOL*/ },\n\t\t\t{ no: 2, name: 'reason', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<VerifySignatureResponse>): VerifySignatureResponse {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<VerifySignatureResponse>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: VerifySignatureResponse,\n\t): VerifySignatureResponse {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional bool is_valid */ 1:\n\t\t\t\t\tmessage.isValid = reader.bool();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string reason */ 2:\n\t\t\t\t\tmessage.reason = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: VerifySignatureResponse,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional bool is_valid = 1; */\n\t\tif (message.isValid !== undefined) writer.tag(1, WireType.Varint).bool(message.isValid);\n\t\t/* optional string reason = 2; */\n\t\tif (message.reason !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.reason);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.VerifySignatureResponse\n */\nexport const VerifySignatureResponse = new VerifySignatureResponse$Type();\n/**\n * @generated ServiceType for protobuf service sui.rpc.v2beta2.SignatureVerificationService\n */\nexport const SignatureVerificationService = new ServiceType(\n\t'sui.rpc.v2beta2.SignatureVerificationService',\n\t[{ name: 'VerifySignature', options: {}, I: VerifySignatureRequest, O: VerifySignatureResponse }],\n);\n"],
  "mappings": "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",
  "names": []
}
