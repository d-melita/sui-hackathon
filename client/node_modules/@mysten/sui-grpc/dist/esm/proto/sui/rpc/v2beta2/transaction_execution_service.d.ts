import { ServiceType } from '@protobuf-ts/runtime-rpc';
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
import { Empty } from '../../../google/protobuf/empty.js';
import { ValidatorAggregatedSignature } from './signature.js';
import { ExecutedTransaction } from './executed_transaction.js';
import { FieldMask } from '../../../google/protobuf/field_mask.js';
import { UserSignature } from './signature.js';
import { Transaction } from './transaction.js';
/**
 * @generated from protobuf message sui.rpc.v2beta2.ExecuteTransactionRequest
 */
export interface ExecuteTransactionRequest {
    /**
     * The transaction to execute.
     *
     * @generated from protobuf field: optional sui.rpc.v2beta2.Transaction transaction = 1
     */
    transaction?: Transaction;
    /**
     * Set of `UserSiganture`s authorizing the execution of the provided
     * transaction.
     *
     * @generated from protobuf field: repeated sui.rpc.v2beta2.UserSignature signatures = 2
     */
    signatures: UserSignature[];
    /**
     * Mask specifying which fields to read.
     * If no mask is specified, defaults to `finality`.
     *
     * @generated from protobuf field: optional google.protobuf.FieldMask read_mask = 3
     */
    readMask?: FieldMask;
}
/**
 * Response message for `NodeService.ExecuteTransaction`.
 *
 * @generated from protobuf message sui.rpc.v2beta2.ExecuteTransactionResponse
 */
export interface ExecuteTransactionResponse {
    /**
     * Indicates the finality of the executed transaction.
     *
     * @generated from protobuf field: optional sui.rpc.v2beta2.TransactionFinality finality = 1
     */
    finality?: TransactionFinality;
    /**
     * @generated from protobuf field: optional sui.rpc.v2beta2.ExecutedTransaction transaction = 2
     */
    transaction?: ExecutedTransaction;
}
/**
 * Indicates the finality of the executed transaction.
 *
 * @generated from protobuf message sui.rpc.v2beta2.TransactionFinality
 */
export interface TransactionFinality {
    /**
     * @generated from protobuf oneof: finality
     */
    finality: {
        oneofKind: 'certified';
        /**
         * A quorum certificate certifying that a transaction is final but might not
         * be included in a checkpoint yet.
         *
         * @generated from protobuf field: sui.rpc.v2beta2.ValidatorAggregatedSignature certified = 1
         */
        certified: ValidatorAggregatedSignature;
    } | {
        oneofKind: 'checkpointed';
        /**
         * Sequence number of the checkpoint that includes the transaction.
         *
         * @generated from protobuf field: uint64 checkpointed = 2
         */
        checkpointed: bigint;
    } | {
        oneofKind: 'quorumExecuted';
        /**
         * Indicates that a quorum of validators has executed the transaction but
         * that it might not be included in a checkpoint yet.
         *
         * @generated from protobuf field: google.protobuf.Empty quorum_executed = 3
         */
        quorumExecuted: Empty;
    } | {
        oneofKind: undefined;
    };
}
declare class ExecuteTransactionRequest$Type extends MessageType<ExecuteTransactionRequest> {
    constructor();
    create(value?: PartialMessage<ExecuteTransactionRequest>): ExecuteTransactionRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExecuteTransactionRequest): ExecuteTransactionRequest;
    internalBinaryWrite(message: ExecuteTransactionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message sui.rpc.v2beta2.ExecuteTransactionRequest
 */
export declare const ExecuteTransactionRequest: ExecuteTransactionRequest$Type;
declare class ExecuteTransactionResponse$Type extends MessageType<ExecuteTransactionResponse> {
    constructor();
    create(value?: PartialMessage<ExecuteTransactionResponse>): ExecuteTransactionResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExecuteTransactionResponse): ExecuteTransactionResponse;
    internalBinaryWrite(message: ExecuteTransactionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message sui.rpc.v2beta2.ExecuteTransactionResponse
 */
export declare const ExecuteTransactionResponse: ExecuteTransactionResponse$Type;
declare class TransactionFinality$Type extends MessageType<TransactionFinality> {
    constructor();
    create(value?: PartialMessage<TransactionFinality>): TransactionFinality;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransactionFinality): TransactionFinality;
    internalBinaryWrite(message: TransactionFinality, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message sui.rpc.v2beta2.TransactionFinality
 */
export declare const TransactionFinality: TransactionFinality$Type;
/**
 * @generated ServiceType for protobuf service sui.rpc.v2beta2.TransactionExecutionService
 */
export declare const TransactionExecutionService: ServiceType;
export {};
