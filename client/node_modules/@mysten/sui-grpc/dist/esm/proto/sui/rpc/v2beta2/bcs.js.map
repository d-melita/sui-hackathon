{
  "version": 3,
  "sources": ["../../../../../../src/proto/sui/rpc/v2beta2/bcs.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport type { BinaryWriteOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryWriter } from '@protobuf-ts/runtime';\nimport { WireType } from '@protobuf-ts/runtime';\nimport type { BinaryReadOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryReader } from '@protobuf-ts/runtime';\nimport { UnknownFieldHandler } from '@protobuf-ts/runtime';\nimport type { PartialMessage } from '@protobuf-ts/runtime';\nimport { reflectionMergePartial } from '@protobuf-ts/runtime';\nimport { MessageType } from '@protobuf-ts/runtime';\n/**\n * `Bcs` contains an arbitrary type that is serialized using the\n * [BCS](https://mystenlabs.github.io/sui-rust-sdk/sui_sdk_types/index.html#bcs)\n * format as well as a name that identifies the type of the serialized value.\n *\n * @generated from protobuf message sui.rpc.v2beta2.Bcs\n */\nexport interface Bcs {\n\t/**\n\t * Name that identifies the type of the serialized value.\n\t *\n\t * @generated from protobuf field: optional string name = 1\n\t */\n\tname?: string;\n\t/**\n\t * Bytes of a BCS serialized value.\n\t *\n\t * @generated from protobuf field: optional bytes value = 2\n\t */\n\tvalue?: Uint8Array;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Bcs$Type extends MessageType<Bcs> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.Bcs', [\n\t\t\t{ no: 1, name: 'name', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'value', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<Bcs>): Bcs {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<Bcs>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: Bcs,\n\t): Bcs {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string name */ 1:\n\t\t\t\t\tmessage.name = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes value */ 2:\n\t\t\t\t\tmessage.value = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: Bcs,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string name = 1; */\n\t\tif (message.name !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.name);\n\t\t/* optional bytes value = 2; */\n\t\tif (message.value !== undefined) writer.tag(2, WireType.LengthDelimited).bytes(message.value);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.Bcs\n */\nexport const Bcs = new Bcs$Type();\n"],
  "mappings": "AAIA,SAAS,gBAAgB;AAGzB,SAAS,2BAA2B;AAEpC,SAAS,8BAA8B;AACvC,SAAS,mBAAmB;AAuB5B,MAAM,iBAAiB,YAAiB;AAAA,EACvC,cAAc;AACb,UAAM,uBAAuB;AAAA,MAC5B;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAQ,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAC7E;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAS,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,IAC/E,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAkC;AACxC,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU,OAAW,wBAA4B,MAAM,SAAS,KAAK;AACzE,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACM;AACN,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAgC;AAC/B,kBAAQ,OAAO,OAAO,OAAO;AAC7B;AAAA,QACD;AAAA,QAAgC;AAC/B,kBAAQ,QAAQ,OAAO,MAAM;AAC7B;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oBAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,SAAS,OAAW,QAAO,IAAI,GAAG,SAAS,eAAe,EAAE,OAAO,QAAQ,IAAI;AAE3F,QAAI,QAAQ,UAAU,OAAW,QAAO,IAAI,GAAG,SAAS,eAAe,EAAE,MAAM,QAAQ,KAAK;AAC5F,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oBAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,MAAM,IAAI,SAAS;",
  "names": []
}
