{
  "version": 3,
  "sources": ["../../../../../../src/proto/sui/rpc/v2beta2/transaction_execution_service.client.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport type { RpcTransport } from '@protobuf-ts/runtime-rpc';\nimport type { ServiceInfo } from '@protobuf-ts/runtime-rpc';\nimport { TransactionExecutionService } from './transaction_execution_service.js';\nimport { stackIntercept } from '@protobuf-ts/runtime-rpc';\nimport type { ExecuteTransactionResponse } from './transaction_execution_service.js';\nimport type { ExecuteTransactionRequest } from './transaction_execution_service.js';\nimport type { UnaryCall } from '@protobuf-ts/runtime-rpc';\nimport type { RpcOptions } from '@protobuf-ts/runtime-rpc';\n/**\n * @generated from protobuf service sui.rpc.v2beta2.TransactionExecutionService\n */\nexport interface ITransactionExecutionServiceClient {\n\t/**\n\t * @generated from protobuf rpc: ExecuteTransaction\n\t */\n\texecuteTransaction(\n\t\tinput: ExecuteTransactionRequest,\n\t\toptions?: RpcOptions,\n\t): UnaryCall<ExecuteTransactionRequest, ExecuteTransactionResponse>;\n}\n/**\n * @generated from protobuf service sui.rpc.v2beta2.TransactionExecutionService\n */\nexport class TransactionExecutionServiceClient\n\timplements ITransactionExecutionServiceClient, ServiceInfo\n{\n\ttypeName = TransactionExecutionService.typeName;\n\tmethods = TransactionExecutionService.methods;\n\toptions = TransactionExecutionService.options;\n\tconstructor(private readonly _transport: RpcTransport) {}\n\t/**\n\t * @generated from protobuf rpc: ExecuteTransaction\n\t */\n\texecuteTransaction(\n\t\tinput: ExecuteTransactionRequest,\n\t\toptions?: RpcOptions,\n\t): UnaryCall<ExecuteTransactionRequest, ExecuteTransactionResponse> {\n\t\tconst method = this.methods[0],\n\t\t\topt = this._transport.mergeOptions(options);\n\t\treturn stackIntercept<ExecuteTransactionRequest, ExecuteTransactionResponse>(\n\t\t\t'unary',\n\t\t\tthis._transport,\n\t\t\tmethod,\n\t\t\topt,\n\t\t\tinput,\n\t\t);\n\t}\n}\n"],
  "mappings": "AAIA,SAAS,mCAAmC;AAC5C,SAAS,sBAAsB;AAoBxB,MAAM,kCAEb;AAAA,EAIC,YAA6B,YAA0B;AAA1B;AAH7B,oBAAW,4BAA4B;AACvC,mBAAU,4BAA4B;AACtC,mBAAU,4BAA4B;AAAA,EACkB;AAAA;AAAA;AAAA;AAAA,EAIxD,mBACC,OACA,SACmE;AACnE,UAAM,SAAS,KAAK,QAAQ,CAAC,GAC5B,MAAM,KAAK,WAAW,aAAa,OAAO;AAC3C,WAAO;AAAA,MACN;AAAA,MACA,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AACD;",
  "names": []
}
