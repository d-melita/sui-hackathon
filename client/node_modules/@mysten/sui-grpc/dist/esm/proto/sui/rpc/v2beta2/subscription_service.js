import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Checkpoint } from "./checkpoint.js";
import { FieldMask } from "../../../google/protobuf/field_mask.js";
class SubscribeCheckpointsRequest$Type extends MessageType {
  constructor() {
    super("sui.rpc.v2beta2.SubscribeCheckpointsRequest", [
      { no: 1, name: "read_mask", kind: "message", T: () => FieldMask }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0)
      reflectionMergePartial(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional google.protobuf.FieldMask read_mask */
        1:
          message.readMask = FieldMask.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.readMask
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.readMask)
      FieldMask.internalBinaryWrite(
        message.readMask,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const SubscribeCheckpointsRequest = new SubscribeCheckpointsRequest$Type();
class SubscribeCheckpointsResponse$Type extends MessageType {
  constructor() {
    super("sui.rpc.v2beta2.SubscribeCheckpointsResponse", [
      {
        no: 1,
        name: "cursor",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      { no: 2, name: "checkpoint", kind: "message", T: () => Checkpoint }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0)
      reflectionMergePartial(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 cursor */
        1:
          message.cursor = reader.uint64().toBigInt();
          break;
        case /* optional sui.rpc.v2beta2.Checkpoint checkpoint */
        2:
          message.checkpoint = Checkpoint.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.checkpoint
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.cursor !== void 0) writer.tag(1, WireType.Varint).uint64(message.cursor);
    if (message.checkpoint)
      Checkpoint.internalBinaryWrite(
        message.checkpoint,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const SubscribeCheckpointsResponse = new SubscribeCheckpointsResponse$Type();
const SubscriptionService = new ServiceType("sui.rpc.v2beta2.SubscriptionService", [
  {
    name: "SubscribeCheckpoints",
    serverStreaming: true,
    options: {},
    I: SubscribeCheckpointsRequest,
    O: SubscribeCheckpointsResponse
  }
]);
export {
  SubscribeCheckpointsRequest,
  SubscribeCheckpointsResponse,
  SubscriptionService
};
//# sourceMappingURL=subscription_service.js.map
