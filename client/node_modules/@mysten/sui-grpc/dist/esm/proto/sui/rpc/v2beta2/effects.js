import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Owner } from "./owner.js";
import { GasCostSummary } from "./gas_cost_summary.js";
import { ExecutionStatus } from "./execution_status.js";
import { Bcs } from "./bcs.js";
var ChangedObject_InputObjectState = /* @__PURE__ */ ((ChangedObject_InputObjectState2) => {
  ChangedObject_InputObjectState2[ChangedObject_InputObjectState2["UNKNOWN"] = 0] = "UNKNOWN";
  ChangedObject_InputObjectState2[ChangedObject_InputObjectState2["DOES_NOT_EXIST"] = 1] = "DOES_NOT_EXIST";
  ChangedObject_InputObjectState2[ChangedObject_InputObjectState2["EXISTS"] = 2] = "EXISTS";
  return ChangedObject_InputObjectState2;
})(ChangedObject_InputObjectState || {});
var ChangedObject_OutputObjectState = /* @__PURE__ */ ((ChangedObject_OutputObjectState2) => {
  ChangedObject_OutputObjectState2[ChangedObject_OutputObjectState2["UNKNOWN"] = 0] = "UNKNOWN";
  ChangedObject_OutputObjectState2[ChangedObject_OutputObjectState2["DOES_NOT_EXIST"] = 1] = "DOES_NOT_EXIST";
  ChangedObject_OutputObjectState2[ChangedObject_OutputObjectState2["OBJECT_WRITE"] = 2] = "OBJECT_WRITE";
  ChangedObject_OutputObjectState2[ChangedObject_OutputObjectState2["PACKAGE_WRITE"] = 3] = "PACKAGE_WRITE";
  return ChangedObject_OutputObjectState2;
})(ChangedObject_OutputObjectState || {});
var ChangedObject_IdOperation = /* @__PURE__ */ ((ChangedObject_IdOperation2) => {
  ChangedObject_IdOperation2[ChangedObject_IdOperation2["ID_OPERATION_UNKNOWN"] = 0] = "ID_OPERATION_UNKNOWN";
  ChangedObject_IdOperation2[ChangedObject_IdOperation2["NONE"] = 1] = "NONE";
  ChangedObject_IdOperation2[ChangedObject_IdOperation2["CREATED"] = 2] = "CREATED";
  ChangedObject_IdOperation2[ChangedObject_IdOperation2["DELETED"] = 3] = "DELETED";
  return ChangedObject_IdOperation2;
})(ChangedObject_IdOperation || {});
var UnchangedSharedObject_UnchangedSharedObjectKind = /* @__PURE__ */ ((UnchangedSharedObject_UnchangedSharedObjectKind2) => {
  UnchangedSharedObject_UnchangedSharedObjectKind2[UnchangedSharedObject_UnchangedSharedObjectKind2["UNCHANGED_SHARED_OBJECT_KIND_UNKNOWN"] = 0] = "UNCHANGED_SHARED_OBJECT_KIND_UNKNOWN";
  UnchangedSharedObject_UnchangedSharedObjectKind2[UnchangedSharedObject_UnchangedSharedObjectKind2["READ_ONLY_ROOT"] = 1] = "READ_ONLY_ROOT";
  UnchangedSharedObject_UnchangedSharedObjectKind2[UnchangedSharedObject_UnchangedSharedObjectKind2["MUTATE_CONSENSUS_STREAM_ENDED"] = 2] = "MUTATE_CONSENSUS_STREAM_ENDED";
  UnchangedSharedObject_UnchangedSharedObjectKind2[UnchangedSharedObject_UnchangedSharedObjectKind2["READ_CONSENSUS_STREAM_ENDED"] = 3] = "READ_CONSENSUS_STREAM_ENDED";
  UnchangedSharedObject_UnchangedSharedObjectKind2[UnchangedSharedObject_UnchangedSharedObjectKind2["CANCELED"] = 4] = "CANCELED";
  UnchangedSharedObject_UnchangedSharedObjectKind2[UnchangedSharedObject_UnchangedSharedObjectKind2["PER_EPOCH_CONFIG"] = 5] = "PER_EPOCH_CONFIG";
  return UnchangedSharedObject_UnchangedSharedObjectKind2;
})(UnchangedSharedObject_UnchangedSharedObjectKind || {});
class TransactionEffects$Type extends MessageType {
  constructor() {
    super("sui.rpc.v2beta2.TransactionEffects", [
      { no: 1, name: "bcs", kind: "message", T: () => Bcs },
      {
        no: 2,
        name: "digest",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "version",
        kind: "scalar",
        opt: true,
        T: 5
        /*ScalarType.INT32*/
      },
      { no: 4, name: "status", kind: "message", T: () => ExecutionStatus },
      {
        no: 5,
        name: "epoch",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      { no: 6, name: "gas_used", kind: "message", T: () => GasCostSummary },
      {
        no: 7,
        name: "transaction_digest",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 8, name: "gas_object", kind: "message", T: () => ChangedObject },
      {
        no: 9,
        name: "events_digest",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 10,
        name: "dependencies",
        kind: "scalar",
        repeat: 2,
        T: 9
      },
      {
        no: 11,
        name: "lamport_version",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      {
        no: 12,
        name: "changed_objects",
        kind: "message",
        repeat: 2,
        T: () => ChangedObject
      },
      {
        no: 13,
        name: "unchanged_shared_objects",
        kind: "message",
        repeat: 2,
        T: () => UnchangedSharedObject
      },
      {
        no: 14,
        name: "auxiliary_data_digest",
        kind: "scalar",
        opt: true,
        T: 9
      }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    message.dependencies = [];
    message.changedObjects = [];
    message.unchangedSharedObjects = [];
    if (value !== void 0) reflectionMergePartial(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional sui.rpc.v2beta2.Bcs bcs */
        1:
          message.bcs = Bcs.internalBinaryRead(reader, reader.uint32(), options, message.bcs);
          break;
        case /* optional string digest */
        2:
          message.digest = reader.string();
          break;
        case /* optional int32 version */
        3:
          message.version = reader.int32();
          break;
        case /* optional sui.rpc.v2beta2.ExecutionStatus status */
        4:
          message.status = ExecutionStatus.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.status
          );
          break;
        case /* optional uint64 epoch */
        5:
          message.epoch = reader.uint64().toBigInt();
          break;
        case /* optional sui.rpc.v2beta2.GasCostSummary gas_used */
        6:
          message.gasUsed = GasCostSummary.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.gasUsed
          );
          break;
        case /* optional string transaction_digest */
        7:
          message.transactionDigest = reader.string();
          break;
        case /* optional sui.rpc.v2beta2.ChangedObject gas_object */
        8:
          message.gasObject = ChangedObject.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.gasObject
          );
          break;
        case /* optional string events_digest */
        9:
          message.eventsDigest = reader.string();
          break;
        case /* repeated string dependencies */
        10:
          message.dependencies.push(reader.string());
          break;
        case /* optional uint64 lamport_version */
        11:
          message.lamportVersion = reader.uint64().toBigInt();
          break;
        case /* repeated sui.rpc.v2beta2.ChangedObject changed_objects */
        12:
          message.changedObjects.push(
            ChangedObject.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        case /* repeated sui.rpc.v2beta2.UnchangedSharedObject unchanged_shared_objects */
        13:
          message.unchangedSharedObjects.push(
            UnchangedSharedObject.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        case /* optional string auxiliary_data_digest */
        14:
          message.auxiliaryDataDigest = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.bcs)
      Bcs.internalBinaryWrite(
        message.bcs,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.digest !== void 0)
      writer.tag(2, WireType.LengthDelimited).string(message.digest);
    if (message.version !== void 0) writer.tag(3, WireType.Varint).int32(message.version);
    if (message.status)
      ExecutionStatus.internalBinaryWrite(
        message.status,
        writer.tag(4, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.epoch !== void 0) writer.tag(5, WireType.Varint).uint64(message.epoch);
    if (message.gasUsed)
      GasCostSummary.internalBinaryWrite(
        message.gasUsed,
        writer.tag(6, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.transactionDigest !== void 0)
      writer.tag(7, WireType.LengthDelimited).string(message.transactionDigest);
    if (message.gasObject)
      ChangedObject.internalBinaryWrite(
        message.gasObject,
        writer.tag(8, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.eventsDigest !== void 0)
      writer.tag(9, WireType.LengthDelimited).string(message.eventsDigest);
    for (let i = 0; i < message.dependencies.length; i++)
      writer.tag(10, WireType.LengthDelimited).string(message.dependencies[i]);
    if (message.lamportVersion !== void 0)
      writer.tag(11, WireType.Varint).uint64(message.lamportVersion);
    for (let i = 0; i < message.changedObjects.length; i++)
      ChangedObject.internalBinaryWrite(
        message.changedObjects[i],
        writer.tag(12, WireType.LengthDelimited).fork(),
        options
      ).join();
    for (let i = 0; i < message.unchangedSharedObjects.length; i++)
      UnchangedSharedObject.internalBinaryWrite(
        message.unchangedSharedObjects[i],
        writer.tag(13, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.auxiliaryDataDigest !== void 0)
      writer.tag(14, WireType.LengthDelimited).string(message.auxiliaryDataDigest);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const TransactionEffects = new TransactionEffects$Type();
class ChangedObject$Type extends MessageType {
  constructor() {
    super("sui.rpc.v2beta2.ChangedObject", [
      {
        no: 1,
        name: "object_id",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "input_state",
        kind: "enum",
        opt: true,
        T: () => [
          "sui.rpc.v2beta2.ChangedObject.InputObjectState",
          ChangedObject_InputObjectState,
          "INPUT_OBJECT_STATE_"
        ]
      },
      {
        no: 3,
        name: "input_version",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      {
        no: 4,
        name: "input_digest",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 5, name: "input_owner", kind: "message", T: () => Owner },
      {
        no: 6,
        name: "output_state",
        kind: "enum",
        opt: true,
        T: () => [
          "sui.rpc.v2beta2.ChangedObject.OutputObjectState",
          ChangedObject_OutputObjectState,
          "OUTPUT_OBJECT_STATE_"
        ]
      },
      {
        no: 7,
        name: "output_version",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      {
        no: 8,
        name: "output_digest",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 9, name: "output_owner", kind: "message", T: () => Owner },
      {
        no: 10,
        name: "id_operation",
        kind: "enum",
        opt: true,
        T: () => ["sui.rpc.v2beta2.ChangedObject.IdOperation", ChangedObject_IdOperation]
      },
      {
        no: 11,
        name: "object_type",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0) reflectionMergePartial(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string object_id */
        1:
          message.objectId = reader.string();
          break;
        case /* optional sui.rpc.v2beta2.ChangedObject.InputObjectState input_state */
        2:
          message.inputState = reader.int32();
          break;
        case /* optional uint64 input_version */
        3:
          message.inputVersion = reader.uint64().toBigInt();
          break;
        case /* optional string input_digest */
        4:
          message.inputDigest = reader.string();
          break;
        case /* optional sui.rpc.v2beta2.Owner input_owner */
        5:
          message.inputOwner = Owner.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.inputOwner
          );
          break;
        case /* optional sui.rpc.v2beta2.ChangedObject.OutputObjectState output_state */
        6:
          message.outputState = reader.int32();
          break;
        case /* optional uint64 output_version */
        7:
          message.outputVersion = reader.uint64().toBigInt();
          break;
        case /* optional string output_digest */
        8:
          message.outputDigest = reader.string();
          break;
        case /* optional sui.rpc.v2beta2.Owner output_owner */
        9:
          message.outputOwner = Owner.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.outputOwner
          );
          break;
        case /* optional sui.rpc.v2beta2.ChangedObject.IdOperation id_operation */
        10:
          message.idOperation = reader.int32();
          break;
        case /* optional string object_type */
        11:
          message.objectType = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.objectId !== void 0)
      writer.tag(1, WireType.LengthDelimited).string(message.objectId);
    if (message.inputState !== void 0) writer.tag(2, WireType.Varint).int32(message.inputState);
    if (message.inputVersion !== void 0)
      writer.tag(3, WireType.Varint).uint64(message.inputVersion);
    if (message.inputDigest !== void 0)
      writer.tag(4, WireType.LengthDelimited).string(message.inputDigest);
    if (message.inputOwner)
      Owner.internalBinaryWrite(
        message.inputOwner,
        writer.tag(5, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.outputState !== void 0)
      writer.tag(6, WireType.Varint).int32(message.outputState);
    if (message.outputVersion !== void 0)
      writer.tag(7, WireType.Varint).uint64(message.outputVersion);
    if (message.outputDigest !== void 0)
      writer.tag(8, WireType.LengthDelimited).string(message.outputDigest);
    if (message.outputOwner)
      Owner.internalBinaryWrite(
        message.outputOwner,
        writer.tag(9, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.idOperation !== void 0)
      writer.tag(10, WireType.Varint).int32(message.idOperation);
    if (message.objectType !== void 0)
      writer.tag(11, WireType.LengthDelimited).string(message.objectType);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const ChangedObject = new ChangedObject$Type();
class UnchangedSharedObject$Type extends MessageType {
  constructor() {
    super("sui.rpc.v2beta2.UnchangedSharedObject", [
      {
        no: 1,
        name: "kind",
        kind: "enum",
        opt: true,
        T: () => [
          "sui.rpc.v2beta2.UnchangedSharedObject.UnchangedSharedObjectKind",
          UnchangedSharedObject_UnchangedSharedObjectKind
        ]
      },
      {
        no: 2,
        name: "object_id",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "version",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      {
        no: 4,
        name: "digest",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 5,
        name: "object_type",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0) reflectionMergePartial(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional sui.rpc.v2beta2.UnchangedSharedObject.UnchangedSharedObjectKind kind */
        1:
          message.kind = reader.int32();
          break;
        case /* optional string object_id */
        2:
          message.objectId = reader.string();
          break;
        case /* optional uint64 version */
        3:
          message.version = reader.uint64().toBigInt();
          break;
        case /* optional string digest */
        4:
          message.digest = reader.string();
          break;
        case /* optional string object_type */
        5:
          message.objectType = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.kind !== void 0) writer.tag(1, WireType.Varint).int32(message.kind);
    if (message.objectId !== void 0)
      writer.tag(2, WireType.LengthDelimited).string(message.objectId);
    if (message.version !== void 0) writer.tag(3, WireType.Varint).uint64(message.version);
    if (message.digest !== void 0)
      writer.tag(4, WireType.LengthDelimited).string(message.digest);
    if (message.objectType !== void 0)
      writer.tag(5, WireType.LengthDelimited).string(message.objectType);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const UnchangedSharedObject = new UnchangedSharedObject$Type();
export {
  ChangedObject,
  ChangedObject_IdOperation,
  ChangedObject_InputObjectState,
  ChangedObject_OutputObjectState,
  TransactionEffects,
  UnchangedSharedObject,
  UnchangedSharedObject_UnchangedSharedObjectKind
};
//# sourceMappingURL=effects.js.map
