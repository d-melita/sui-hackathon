import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Object } from "./object.js";
import { BalanceChange } from "./balance_change.js";
import { Timestamp } from "../../../google/protobuf/timestamp.js";
import { TransactionEvents } from "./event.js";
import { TransactionEffects } from "./effects.js";
import { UserSignature } from "./signature.js";
import { Transaction } from "./transaction.js";
class ExecutedTransaction$Type extends MessageType {
  constructor() {
    super("sui.rpc.v2beta2.ExecutedTransaction", [
      {
        no: 1,
        name: "digest",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 2, name: "transaction", kind: "message", T: () => Transaction },
      {
        no: 3,
        name: "signatures",
        kind: "message",
        repeat: 2,
        T: () => UserSignature
      },
      { no: 4, name: "effects", kind: "message", T: () => TransactionEffects },
      { no: 5, name: "events", kind: "message", T: () => TransactionEvents },
      {
        no: 6,
        name: "checkpoint",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      { no: 7, name: "timestamp", kind: "message", T: () => Timestamp },
      {
        no: 8,
        name: "balance_changes",
        kind: "message",
        repeat: 2,
        T: () => BalanceChange
      },
      {
        no: 10,
        name: "input_objects",
        kind: "message",
        repeat: 2,
        T: () => Object
      },
      {
        no: 11,
        name: "output_objects",
        kind: "message",
        repeat: 2,
        T: () => Object
      }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    message.signatures = [];
    message.balanceChanges = [];
    message.inputObjects = [];
    message.outputObjects = [];
    if (value !== void 0) reflectionMergePartial(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string digest */
        1:
          message.digest = reader.string();
          break;
        case /* optional sui.rpc.v2beta2.Transaction transaction */
        2:
          message.transaction = Transaction.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.transaction
          );
          break;
        case /* repeated sui.rpc.v2beta2.UserSignature signatures */
        3:
          message.signatures.push(
            UserSignature.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        case /* optional sui.rpc.v2beta2.TransactionEffects effects */
        4:
          message.effects = TransactionEffects.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.effects
          );
          break;
        case /* optional sui.rpc.v2beta2.TransactionEvents events */
        5:
          message.events = TransactionEvents.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.events
          );
          break;
        case /* optional uint64 checkpoint */
        6:
          message.checkpoint = reader.uint64().toBigInt();
          break;
        case /* optional google.protobuf.Timestamp timestamp */
        7:
          message.timestamp = Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.timestamp
          );
          break;
        case /* repeated sui.rpc.v2beta2.BalanceChange balance_changes */
        8:
          message.balanceChanges.push(
            BalanceChange.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        case /* repeated sui.rpc.v2beta2.Object input_objects */
        10:
          message.inputObjects.push(Object.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* repeated sui.rpc.v2beta2.Object output_objects */
        11:
          message.outputObjects.push(Object.internalBinaryRead(reader, reader.uint32(), options));
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.digest !== void 0)
      writer.tag(1, WireType.LengthDelimited).string(message.digest);
    if (message.transaction)
      Transaction.internalBinaryWrite(
        message.transaction,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    for (let i = 0; i < message.signatures.length; i++)
      UserSignature.internalBinaryWrite(
        message.signatures[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.effects)
      TransactionEffects.internalBinaryWrite(
        message.effects,
        writer.tag(4, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.events)
      TransactionEvents.internalBinaryWrite(
        message.events,
        writer.tag(5, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.checkpoint !== void 0) writer.tag(6, WireType.Varint).uint64(message.checkpoint);
    if (message.timestamp)
      Timestamp.internalBinaryWrite(
        message.timestamp,
        writer.tag(7, WireType.LengthDelimited).fork(),
        options
      ).join();
    for (let i = 0; i < message.balanceChanges.length; i++)
      BalanceChange.internalBinaryWrite(
        message.balanceChanges[i],
        writer.tag(8, WireType.LengthDelimited).fork(),
        options
      ).join();
    for (let i = 0; i < message.inputObjects.length; i++)
      Object.internalBinaryWrite(
        message.inputObjects[i],
        writer.tag(10, WireType.LengthDelimited).fork(),
        options
      ).join();
    for (let i = 0; i < message.outputObjects.length; i++)
      Object.internalBinaryWrite(
        message.outputObjects[i],
        writer.tag(11, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const ExecutedTransaction = new ExecutedTransaction$Type();
export {
  ExecutedTransaction
};
//# sourceMappingURL=executed_transaction.js.map
