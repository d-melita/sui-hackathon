import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Empty } from "../../../google/protobuf/empty.js";
import { ValidatorAggregatedSignature } from "./signature.js";
import { ExecutedTransaction } from "./executed_transaction.js";
import { FieldMask } from "../../../google/protobuf/field_mask.js";
import { UserSignature } from "./signature.js";
import { Transaction } from "./transaction.js";
class ExecuteTransactionRequest$Type extends MessageType {
  constructor() {
    super("sui.rpc.v2beta2.ExecuteTransactionRequest", [
      { no: 1, name: "transaction", kind: "message", T: () => Transaction },
      {
        no: 2,
        name: "signatures",
        kind: "message",
        repeat: 2,
        T: () => UserSignature
      },
      { no: 3, name: "read_mask", kind: "message", T: () => FieldMask }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    message.signatures = [];
    if (value !== void 0)
      reflectionMergePartial(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional sui.rpc.v2beta2.Transaction transaction */
        1:
          message.transaction = Transaction.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.transaction
          );
          break;
        case /* repeated sui.rpc.v2beta2.UserSignature signatures */
        2:
          message.signatures.push(
            UserSignature.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        case /* optional google.protobuf.FieldMask read_mask */
        3:
          message.readMask = FieldMask.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.readMask
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.transaction)
      Transaction.internalBinaryWrite(
        message.transaction,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    for (let i = 0; i < message.signatures.length; i++)
      UserSignature.internalBinaryWrite(
        message.signatures[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.readMask)
      FieldMask.internalBinaryWrite(
        message.readMask,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const ExecuteTransactionRequest = new ExecuteTransactionRequest$Type();
class ExecuteTransactionResponse$Type extends MessageType {
  constructor() {
    super("sui.rpc.v2beta2.ExecuteTransactionResponse", [
      { no: 1, name: "finality", kind: "message", T: () => TransactionFinality },
      { no: 2, name: "transaction", kind: "message", T: () => ExecutedTransaction }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0)
      reflectionMergePartial(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional sui.rpc.v2beta2.TransactionFinality finality */
        1:
          message.finality = TransactionFinality.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.finality
          );
          break;
        case /* optional sui.rpc.v2beta2.ExecutedTransaction transaction */
        2:
          message.transaction = ExecutedTransaction.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.transaction
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.finality)
      TransactionFinality.internalBinaryWrite(
        message.finality,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.transaction)
      ExecutedTransaction.internalBinaryWrite(
        message.transaction,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const ExecuteTransactionResponse = new ExecuteTransactionResponse$Type();
class TransactionFinality$Type extends MessageType {
  constructor() {
    super("sui.rpc.v2beta2.TransactionFinality", [
      {
        no: 1,
        name: "certified",
        kind: "message",
        oneof: "finality",
        T: () => ValidatorAggregatedSignature
      },
      {
        no: 2,
        name: "checkpointed",
        kind: "scalar",
        oneof: "finality",
        T: 4,
        L: 0
      },
      { no: 3, name: "quorum_executed", kind: "message", oneof: "finality", T: () => Empty }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    message.finality = { oneofKind: void 0 };
    if (value !== void 0) reflectionMergePartial(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* sui.rpc.v2beta2.ValidatorAggregatedSignature certified */
        1:
          message.finality = {
            oneofKind: "certified",
            certified: ValidatorAggregatedSignature.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              message.finality.certified
            )
          };
          break;
        case /* uint64 checkpointed */
        2:
          message.finality = {
            oneofKind: "checkpointed",
            checkpointed: reader.uint64().toBigInt()
          };
          break;
        case /* google.protobuf.Empty quorum_executed */
        3:
          message.finality = {
            oneofKind: "quorumExecuted",
            quorumExecuted: Empty.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              message.finality.quorumExecuted
            )
          };
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.finality.oneofKind === "certified")
      ValidatorAggregatedSignature.internalBinaryWrite(
        message.finality.certified,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.finality.oneofKind === "checkpointed")
      writer.tag(2, WireType.Varint).uint64(message.finality.checkpointed);
    if (message.finality.oneofKind === "quorumExecuted")
      Empty.internalBinaryWrite(
        message.finality.quorumExecuted,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const TransactionFinality = new TransactionFinality$Type();
const TransactionExecutionService = new ServiceType(
  "sui.rpc.v2beta2.TransactionExecutionService",
  [
    {
      name: "ExecuteTransaction",
      options: {},
      I: ExecuteTransactionRequest,
      O: ExecuteTransactionResponse
    }
  ]
);
export {
  ExecuteTransactionRequest,
  ExecuteTransactionResponse,
  TransactionExecutionService,
  TransactionFinality
};
//# sourceMappingURL=transaction_execution_service.js.map
