import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Value } from "../../../google/protobuf/struct.js";
import { Bcs } from "./bcs.js";
class TransactionEvents$Type extends MessageType {
  constructor() {
    super("sui.rpc.v2beta2.TransactionEvents", [
      { no: 1, name: "bcs", kind: "message", T: () => Bcs },
      {
        no: 2,
        name: "digest",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 3, name: "events", kind: "message", repeat: 2, T: () => Event }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    message.events = [];
    if (value !== void 0) reflectionMergePartial(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional sui.rpc.v2beta2.Bcs bcs */
        1:
          message.bcs = Bcs.internalBinaryRead(reader, reader.uint32(), options, message.bcs);
          break;
        case /* optional string digest */
        2:
          message.digest = reader.string();
          break;
        case /* repeated sui.rpc.v2beta2.Event events */
        3:
          message.events.push(Event.internalBinaryRead(reader, reader.uint32(), options));
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.bcs)
      Bcs.internalBinaryWrite(
        message.bcs,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.digest !== void 0)
      writer.tag(2, WireType.LengthDelimited).string(message.digest);
    for (let i = 0; i < message.events.length; i++)
      Event.internalBinaryWrite(
        message.events[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const TransactionEvents = new TransactionEvents$Type();
class Event$Type extends MessageType {
  constructor() {
    super("sui.rpc.v2beta2.Event", [
      {
        no: 1,
        name: "package_id",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "module",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "sender",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 4,
        name: "event_type",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 5, name: "contents", kind: "message", T: () => Bcs },
      { no: 6, name: "json", kind: "message", T: () => Value }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0) reflectionMergePartial(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string package_id */
        1:
          message.packageId = reader.string();
          break;
        case /* optional string module */
        2:
          message.module = reader.string();
          break;
        case /* optional string sender */
        3:
          message.sender = reader.string();
          break;
        case /* optional string event_type */
        4:
          message.eventType = reader.string();
          break;
        case /* optional sui.rpc.v2beta2.Bcs contents */
        5:
          message.contents = Bcs.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.contents
          );
          break;
        case /* optional google.protobuf.Value json */
        6:
          message.json = Value.internalBinaryRead(reader, reader.uint32(), options, message.json);
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.packageId !== void 0)
      writer.tag(1, WireType.LengthDelimited).string(message.packageId);
    if (message.module !== void 0)
      writer.tag(2, WireType.LengthDelimited).string(message.module);
    if (message.sender !== void 0)
      writer.tag(3, WireType.LengthDelimited).string(message.sender);
    if (message.eventType !== void 0)
      writer.tag(4, WireType.LengthDelimited).string(message.eventType);
    if (message.contents)
      Bcs.internalBinaryWrite(
        message.contents,
        writer.tag(5, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.json)
      Value.internalBinaryWrite(
        message.json,
        writer.tag(6, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const Event = new Event$Type();
export {
  Event,
  TransactionEvents
};
//# sourceMappingURL=event.js.map
