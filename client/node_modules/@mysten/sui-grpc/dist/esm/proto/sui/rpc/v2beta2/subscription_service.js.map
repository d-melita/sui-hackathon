{
  "version": 3,
  "sources": ["../../../../../../src/proto/sui/rpc/v2beta2/subscription_service.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { ServiceType } from '@protobuf-ts/runtime-rpc';\nimport type { BinaryWriteOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryWriter } from '@protobuf-ts/runtime';\nimport { WireType } from '@protobuf-ts/runtime';\nimport type { BinaryReadOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryReader } from '@protobuf-ts/runtime';\nimport { UnknownFieldHandler } from '@protobuf-ts/runtime';\nimport type { PartialMessage } from '@protobuf-ts/runtime';\nimport { reflectionMergePartial } from '@protobuf-ts/runtime';\nimport { MessageType } from '@protobuf-ts/runtime';\nimport { Checkpoint } from './checkpoint.js';\nimport { FieldMask } from '../../../google/protobuf/field_mask.js';\n/**\n * Request message for SubscriptionService.SubscribeCheckpoints\n *\n * @generated from protobuf message sui.rpc.v2beta2.SubscribeCheckpointsRequest\n */\nexport interface SubscribeCheckpointsRequest {\n\t/**\n\t * Optional. Mask for specifiying which parts of the\n\t * SubscribeCheckpointsResponse should be returned.\n\t *\n\t * @generated from protobuf field: optional google.protobuf.FieldMask read_mask = 1\n\t */\n\treadMask?: FieldMask;\n}\n/**\n * Response message for SubscriptionService.SubscribeCheckpoints\n *\n * @generated from protobuf message sui.rpc.v2beta2.SubscribeCheckpointsResponse\n */\nexport interface SubscribeCheckpointsResponse {\n\t/**\n\t * Required. The checkpoint sequence number and value of the current cursor\n\t * into the checkpoint stream\n\t *\n\t * @generated from protobuf field: optional uint64 cursor = 1\n\t */\n\tcursor?: bigint;\n\t/**\n\t * The requested data for this checkpoint\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Checkpoint checkpoint = 2\n\t */\n\tcheckpoint?: Checkpoint;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscribeCheckpointsRequest$Type extends MessageType<SubscribeCheckpointsRequest> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.SubscribeCheckpointsRequest', [\n\t\t\t{ no: 1, name: 'read_mask', kind: 'message', T: () => FieldMask },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<SubscribeCheckpointsRequest>): SubscribeCheckpointsRequest {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined)\n\t\t\treflectionMergePartial<SubscribeCheckpointsRequest>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: SubscribeCheckpointsRequest,\n\t): SubscribeCheckpointsRequest {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional google.protobuf.FieldMask read_mask */ 1:\n\t\t\t\t\tmessage.readMask = FieldMask.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.readMask,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: SubscribeCheckpointsRequest,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional google.protobuf.FieldMask read_mask = 1; */\n\t\tif (message.readMask)\n\t\t\tFieldMask.internalBinaryWrite(\n\t\t\t\tmessage.readMask,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.SubscribeCheckpointsRequest\n */\nexport const SubscribeCheckpointsRequest = new SubscribeCheckpointsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscribeCheckpointsResponse$Type extends MessageType<SubscribeCheckpointsResponse> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.SubscribeCheckpointsResponse', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'cursor',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 2, name: 'checkpoint', kind: 'message', T: () => Checkpoint },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<SubscribeCheckpointsResponse>): SubscribeCheckpointsResponse {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined)\n\t\t\treflectionMergePartial<SubscribeCheckpointsResponse>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: SubscribeCheckpointsResponse,\n\t): SubscribeCheckpointsResponse {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional uint64 cursor */ 1:\n\t\t\t\t\tmessage.cursor = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Checkpoint checkpoint */ 2:\n\t\t\t\t\tmessage.checkpoint = Checkpoint.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.checkpoint,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: SubscribeCheckpointsResponse,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional uint64 cursor = 1; */\n\t\tif (message.cursor !== undefined) writer.tag(1, WireType.Varint).uint64(message.cursor);\n\t\t/* optional sui.rpc.v2beta2.Checkpoint checkpoint = 2; */\n\t\tif (message.checkpoint)\n\t\t\tCheckpoint.internalBinaryWrite(\n\t\t\t\tmessage.checkpoint,\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.SubscribeCheckpointsResponse\n */\nexport const SubscribeCheckpointsResponse = new SubscribeCheckpointsResponse$Type();\n/**\n * @generated ServiceType for protobuf service sui.rpc.v2beta2.SubscriptionService\n */\nexport const SubscriptionService = new ServiceType('sui.rpc.v2beta2.SubscriptionService', [\n\t{\n\t\tname: 'SubscribeCheckpoints',\n\t\tserverStreaming: true,\n\t\toptions: {},\n\t\tI: SubscribeCheckpointsRequest,\n\t\tO: SubscribeCheckpointsResponse,\n\t},\n]);\n"],
  "mappings": "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",
  "names": []
}
