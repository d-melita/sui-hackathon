import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UserSignature } from "./signature.js";
import { Bcs } from "./bcs.js";
class CheckpointContents$Type extends MessageType {
  constructor() {
    super("sui.rpc.v2beta2.CheckpointContents", [
      { no: 1, name: "bcs", kind: "message", T: () => Bcs },
      {
        no: 2,
        name: "digest",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "version",
        kind: "scalar",
        opt: true,
        T: 5
        /*ScalarType.INT32*/
      },
      {
        no: 4,
        name: "transactions",
        kind: "message",
        repeat: 2,
        T: () => CheckpointedTransactionInfo
      }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    message.transactions = [];
    if (value !== void 0) reflectionMergePartial(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional sui.rpc.v2beta2.Bcs bcs */
        1:
          message.bcs = Bcs.internalBinaryRead(reader, reader.uint32(), options, message.bcs);
          break;
        case /* optional string digest */
        2:
          message.digest = reader.string();
          break;
        case /* optional int32 version */
        3:
          message.version = reader.int32();
          break;
        case /* repeated sui.rpc.v2beta2.CheckpointedTransactionInfo transactions */
        4:
          message.transactions.push(
            CheckpointedTransactionInfo.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.bcs)
      Bcs.internalBinaryWrite(
        message.bcs,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.digest !== void 0)
      writer.tag(2, WireType.LengthDelimited).string(message.digest);
    if (message.version !== void 0) writer.tag(3, WireType.Varint).int32(message.version);
    for (let i = 0; i < message.transactions.length; i++)
      CheckpointedTransactionInfo.internalBinaryWrite(
        message.transactions[i],
        writer.tag(4, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const CheckpointContents = new CheckpointContents$Type();
class CheckpointedTransactionInfo$Type extends MessageType {
  constructor() {
    super("sui.rpc.v2beta2.CheckpointedTransactionInfo", [
      {
        no: 1,
        name: "transaction",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "effects",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "signatures",
        kind: "message",
        repeat: 2,
        T: () => UserSignature
      }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    message.signatures = [];
    if (value !== void 0)
      reflectionMergePartial(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string transaction */
        1:
          message.transaction = reader.string();
          break;
        case /* optional string effects */
        2:
          message.effects = reader.string();
          break;
        case /* repeated sui.rpc.v2beta2.UserSignature signatures */
        3:
          message.signatures.push(
            UserSignature.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.transaction !== void 0)
      writer.tag(1, WireType.LengthDelimited).string(message.transaction);
    if (message.effects !== void 0)
      writer.tag(2, WireType.LengthDelimited).string(message.effects);
    for (let i = 0; i < message.signatures.length; i++)
      UserSignature.internalBinaryWrite(
        message.signatures[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const CheckpointedTransactionInfo = new CheckpointedTransactionInfo$Type();
export {
  CheckpointContents,
  CheckpointedTransactionInfo
};
//# sourceMappingURL=checkpoint_contents.js.map
