{
  "version": 3,
  "sources": ["../../../../../../src/proto/sui/rpc/v2beta2/checkpoint_summary.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport type { BinaryWriteOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryWriter } from '@protobuf-ts/runtime';\nimport { WireType } from '@protobuf-ts/runtime';\nimport type { BinaryReadOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryReader } from '@protobuf-ts/runtime';\nimport { UnknownFieldHandler } from '@protobuf-ts/runtime';\nimport type { PartialMessage } from '@protobuf-ts/runtime';\nimport { reflectionMergePartial } from '@protobuf-ts/runtime';\nimport { MessageType } from '@protobuf-ts/runtime';\nimport { ValidatorCommitteeMember } from './signature.js';\nimport { Timestamp } from '../../../google/protobuf/timestamp.js';\nimport { GasCostSummary } from './gas_cost_summary.js';\nimport { Bcs } from './bcs.js';\n/**\n * A header for a checkpoint on the Sui blockchain.\n *\n * On the Sui network, checkpoints define the history of the blockchain. They are quite similar to\n * the concept of blocks used by other blockchains like Bitcoin or Ethereum. The Sui blockchain,\n * however, forms checkpoints after transaction execution has already happened to provide a\n * certified history of the chain, instead of being formed before execution.\n *\n * Checkpoints commit to a variety of state, including but not limited to:\n * - The hash of the previous checkpoint.\n * - The set of transaction digests, their corresponding effects digests, as well as the set of\n *   user signatures that authorized its execution.\n * - The objects produced by a transaction.\n * - The set of live objects that make up the current state of the chain.\n * - On epoch transitions, the next validator committee.\n *\n * `CheckpointSummary`s themselves don't directly include all of the previous information but they\n * are the top-level type by which all the information is committed to transitively via cryptographic\n * hashes included in the summary. `CheckpointSummary`s are signed and certified by a quorum of\n * the validator committee in a given epoch to allow verification of the chain's state.\n *\n * @generated from protobuf message sui.rpc.v2beta2.CheckpointSummary\n */\nexport interface CheckpointSummary {\n\t/**\n\t * This CheckpointSummary serialized as BCS.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Bcs bcs = 1\n\t */\n\tbcs?: Bcs;\n\t/**\n\t * The digest of this CheckpointSummary.\n\t *\n\t * @generated from protobuf field: optional string digest = 2\n\t */\n\tdigest?: string;\n\t/**\n\t * Epoch that this checkpoint belongs to.\n\t *\n\t * @generated from protobuf field: optional uint64 epoch = 3\n\t */\n\tepoch?: bigint;\n\t/**\n\t * The height of this checkpoint.\n\t *\n\t * @generated from protobuf field: optional uint64 sequence_number = 4\n\t */\n\tsequenceNumber?: bigint;\n\t/**\n\t * Total number of transactions committed since genesis, including those in this\n\t * checkpoint.\n\t *\n\t * @generated from protobuf field: optional uint64 total_network_transactions = 5\n\t */\n\ttotalNetworkTransactions?: bigint;\n\t/**\n\t * The hash of the `CheckpointContents` for this checkpoint.\n\t *\n\t * @generated from protobuf field: optional string content_digest = 6\n\t */\n\tcontentDigest?: string;\n\t/**\n\t * The hash of the previous `CheckpointSummary`.\n\t *\n\t * This will be `None` only for the first, or genesis, checkpoint.\n\t *\n\t * @generated from protobuf field: optional string previous_digest = 7\n\t */\n\tpreviousDigest?: string;\n\t/**\n\t * The running total gas costs of all transactions included in the current epoch so far\n\t * until this checkpoint.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.GasCostSummary epoch_rolling_gas_cost_summary = 8\n\t */\n\tepochRollingGasCostSummary?: GasCostSummary;\n\t/**\n\t * Timestamp of the checkpoint - number of milliseconds from the Unix epoch\n\t * Checkpoint timestamps are monotonic, but not strongly monotonic - subsequent\n\t * checkpoints can have the same timestamp if they originate from the same underlining consensus commit.\n\t *\n\t * @generated from protobuf field: optional google.protobuf.Timestamp timestamp = 9\n\t */\n\ttimestamp?: Timestamp;\n\t/**\n\t * Commitments to checkpoint-specific state.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.CheckpointCommitment commitments = 10\n\t */\n\tcommitments: CheckpointCommitment[];\n\t/**\n\t * Extra data only present in the final checkpoint of an epoch.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.EndOfEpochData end_of_epoch_data = 11\n\t */\n\tendOfEpochData?: EndOfEpochData;\n\t/**\n\t * `CheckpointSummary` is not an evolvable structure - it must be readable by any version of\n\t * the code. Therefore, to allow extensions to be added to `CheckpointSummary`,\n\t * opaque data can be added to checkpoints, which can be deserialized based on the current\n\t * protocol version.\n\t *\n\t * @generated from protobuf field: optional bytes version_specific_data = 12\n\t */\n\tversionSpecificData?: Uint8Array;\n}\n/**\n * Data, which when included in a `CheckpointSummary`, signals the end of an `Epoch`.\n *\n * @generated from protobuf message sui.rpc.v2beta2.EndOfEpochData\n */\nexport interface EndOfEpochData {\n\t/**\n\t * The set of validators that will be in the `ValidatorCommittee` for the next epoch.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.ValidatorCommitteeMember next_epoch_committee = 1\n\t */\n\tnextEpochCommittee: ValidatorCommitteeMember[];\n\t/**\n\t * The protocol version that is in effect during the next epoch.\n\t *\n\t * @generated from protobuf field: optional uint64 next_epoch_protocol_version = 2\n\t */\n\tnextEpochProtocolVersion?: bigint;\n\t/**\n\t * Commitments to epoch specific state (live object set)\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.CheckpointCommitment epoch_commitments = 3\n\t */\n\tepochCommitments: CheckpointCommitment[];\n}\n/**\n * A commitment made by a checkpoint.\n *\n * @generated from protobuf message sui.rpc.v2beta2.CheckpointCommitment\n */\nexport interface CheckpointCommitment {\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.CheckpointCommitment.CheckpointCommitmentKind kind = 1\n\t */\n\tkind?: CheckpointCommitment_CheckpointCommitmentKind;\n\t/**\n\t * @generated from protobuf field: optional string digest = 2\n\t */\n\tdigest?: string;\n}\n/**\n * @generated from protobuf enum sui.rpc.v2beta2.CheckpointCommitment.CheckpointCommitmentKind\n */\nexport enum CheckpointCommitment_CheckpointCommitmentKind {\n\t/**\n\t * @generated from protobuf enum value: CHECKPOINT_COMMITMENT_KIND_UNKNOWN = 0;\n\t */\n\tCHECKPOINT_COMMITMENT_KIND_UNKNOWN = 0,\n\t/**\n\t * An elliptic curve multiset hash attesting to the set of objects that\n\t * comprise the live state of the Sui blockchain.\n\t *\n\t * @generated from protobuf enum value: ECMH_LIVE_OBJECT_SET = 1;\n\t */\n\tECMH_LIVE_OBJECT_SET = 1,\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass CheckpointSummary$Type extends MessageType<CheckpointSummary> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.CheckpointSummary', [\n\t\t\t{ no: 1, name: 'bcs', kind: 'message', T: () => Bcs },\n\t\t\t{ no: 2, name: 'digest', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'epoch',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 4,\n\t\t\t\tname: 'sequence_number',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 5,\n\t\t\t\tname: 'total_network_transactions',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 6, name: 'content_digest', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 7, name: 'previous_digest', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 8, name: 'epoch_rolling_gas_cost_summary', kind: 'message', T: () => GasCostSummary },\n\t\t\t{ no: 9, name: 'timestamp', kind: 'message', T: () => Timestamp },\n\t\t\t{\n\t\t\t\tno: 10,\n\t\t\t\tname: 'commitments',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => CheckpointCommitment,\n\t\t\t},\n\t\t\t{ no: 11, name: 'end_of_epoch_data', kind: 'message', T: () => EndOfEpochData },\n\t\t\t{\n\t\t\t\tno: 12,\n\t\t\t\tname: 'version_specific_data',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 12 /*ScalarType.BYTES*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<CheckpointSummary>): CheckpointSummary {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.commitments = [];\n\t\tif (value !== undefined) reflectionMergePartial<CheckpointSummary>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: CheckpointSummary,\n\t): CheckpointSummary {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Bcs bcs */ 1:\n\t\t\t\t\tmessage.bcs = Bcs.internalBinaryRead(reader, reader.uint32(), options, message.bcs);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string digest */ 2:\n\t\t\t\t\tmessage.digest = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 epoch */ 3:\n\t\t\t\t\tmessage.epoch = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 sequence_number */ 4:\n\t\t\t\t\tmessage.sequenceNumber = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 total_network_transactions */ 5:\n\t\t\t\t\tmessage.totalNetworkTransactions = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string content_digest */ 6:\n\t\t\t\t\tmessage.contentDigest = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string previous_digest */ 7:\n\t\t\t\t\tmessage.previousDigest = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.GasCostSummary epoch_rolling_gas_cost_summary */ 8:\n\t\t\t\t\tmessage.epochRollingGasCostSummary = GasCostSummary.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.epochRollingGasCostSummary,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional google.protobuf.Timestamp timestamp */ 9:\n\t\t\t\t\tmessage.timestamp = Timestamp.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.timestamp,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.CheckpointCommitment commitments */ 10:\n\t\t\t\t\tmessage.commitments.push(\n\t\t\t\t\t\tCheckpointCommitment.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.EndOfEpochData end_of_epoch_data */ 11:\n\t\t\t\t\tmessage.endOfEpochData = EndOfEpochData.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.endOfEpochData,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes version_specific_data */ 12:\n\t\t\t\t\tmessage.versionSpecificData = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: CheckpointSummary,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.Bcs bcs = 1; */\n\t\tif (message.bcs)\n\t\t\tBcs.internalBinaryWrite(\n\t\t\t\tmessage.bcs,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional string digest = 2; */\n\t\tif (message.digest !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.digest);\n\t\t/* optional uint64 epoch = 3; */\n\t\tif (message.epoch !== undefined) writer.tag(3, WireType.Varint).uint64(message.epoch);\n\t\t/* optional uint64 sequence_number = 4; */\n\t\tif (message.sequenceNumber !== undefined)\n\t\t\twriter.tag(4, WireType.Varint).uint64(message.sequenceNumber);\n\t\t/* optional uint64 total_network_transactions = 5; */\n\t\tif (message.totalNetworkTransactions !== undefined)\n\t\t\twriter.tag(5, WireType.Varint).uint64(message.totalNetworkTransactions);\n\t\t/* optional string content_digest = 6; */\n\t\tif (message.contentDigest !== undefined)\n\t\t\twriter.tag(6, WireType.LengthDelimited).string(message.contentDigest);\n\t\t/* optional string previous_digest = 7; */\n\t\tif (message.previousDigest !== undefined)\n\t\t\twriter.tag(7, WireType.LengthDelimited).string(message.previousDigest);\n\t\t/* optional sui.rpc.v2beta2.GasCostSummary epoch_rolling_gas_cost_summary = 8; */\n\t\tif (message.epochRollingGasCostSummary)\n\t\t\tGasCostSummary.internalBinaryWrite(\n\t\t\t\tmessage.epochRollingGasCostSummary,\n\t\t\t\twriter.tag(8, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional google.protobuf.Timestamp timestamp = 9; */\n\t\tif (message.timestamp)\n\t\t\tTimestamp.internalBinaryWrite(\n\t\t\t\tmessage.timestamp,\n\t\t\t\twriter.tag(9, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* repeated sui.rpc.v2beta2.CheckpointCommitment commitments = 10; */\n\t\tfor (let i = 0; i < message.commitments.length; i++)\n\t\t\tCheckpointCommitment.internalBinaryWrite(\n\t\t\t\tmessage.commitments[i],\n\t\t\t\twriter.tag(10, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.EndOfEpochData end_of_epoch_data = 11; */\n\t\tif (message.endOfEpochData)\n\t\t\tEndOfEpochData.internalBinaryWrite(\n\t\t\t\tmessage.endOfEpochData,\n\t\t\t\twriter.tag(11, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional bytes version_specific_data = 12; */\n\t\tif (message.versionSpecificData !== undefined)\n\t\t\twriter.tag(12, WireType.LengthDelimited).bytes(message.versionSpecificData);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.CheckpointSummary\n */\nexport const CheckpointSummary = new CheckpointSummary$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EndOfEpochData$Type extends MessageType<EndOfEpochData> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.EndOfEpochData', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'next_epoch_committee',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => ValidatorCommitteeMember,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'next_epoch_protocol_version',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'epoch_commitments',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => CheckpointCommitment,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<EndOfEpochData>): EndOfEpochData {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.nextEpochCommittee = [];\n\t\tmessage.epochCommitments = [];\n\t\tif (value !== undefined) reflectionMergePartial<EndOfEpochData>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: EndOfEpochData,\n\t): EndOfEpochData {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.ValidatorCommitteeMember next_epoch_committee */ 1:\n\t\t\t\t\tmessage.nextEpochCommittee.push(\n\t\t\t\t\t\tValidatorCommitteeMember.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 next_epoch_protocol_version */ 2:\n\t\t\t\t\tmessage.nextEpochProtocolVersion = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.CheckpointCommitment epoch_commitments */ 3:\n\t\t\t\t\tmessage.epochCommitments.push(\n\t\t\t\t\t\tCheckpointCommitment.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: EndOfEpochData,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* repeated sui.rpc.v2beta2.ValidatorCommitteeMember next_epoch_committee = 1; */\n\t\tfor (let i = 0; i < message.nextEpochCommittee.length; i++)\n\t\t\tValidatorCommitteeMember.internalBinaryWrite(\n\t\t\t\tmessage.nextEpochCommittee[i],\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional uint64 next_epoch_protocol_version = 2; */\n\t\tif (message.nextEpochProtocolVersion !== undefined)\n\t\t\twriter.tag(2, WireType.Varint).uint64(message.nextEpochProtocolVersion);\n\t\t/* repeated sui.rpc.v2beta2.CheckpointCommitment epoch_commitments = 3; */\n\t\tfor (let i = 0; i < message.epochCommitments.length; i++)\n\t\t\tCheckpointCommitment.internalBinaryWrite(\n\t\t\t\tmessage.epochCommitments[i],\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.EndOfEpochData\n */\nexport const EndOfEpochData = new EndOfEpochData$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CheckpointCommitment$Type extends MessageType<CheckpointCommitment> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.CheckpointCommitment', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'kind',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => [\n\t\t\t\t\t'sui.rpc.v2beta2.CheckpointCommitment.CheckpointCommitmentKind',\n\t\t\t\t\tCheckpointCommitment_CheckpointCommitmentKind,\n\t\t\t\t],\n\t\t\t},\n\t\t\t{ no: 2, name: 'digest', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<CheckpointCommitment>): CheckpointCommitment {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<CheckpointCommitment>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: CheckpointCommitment,\n\t): CheckpointCommitment {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.CheckpointCommitment.CheckpointCommitmentKind kind */ 1:\n\t\t\t\t\tmessage.kind = reader.int32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string digest */ 2:\n\t\t\t\t\tmessage.digest = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: CheckpointCommitment,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.CheckpointCommitment.CheckpointCommitmentKind kind = 1; */\n\t\tif (message.kind !== undefined) writer.tag(1, WireType.Varint).int32(message.kind);\n\t\t/* optional string digest = 2; */\n\t\tif (message.digest !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.digest);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.CheckpointCommitment\n */\nexport const CheckpointCommitment = new CheckpointCommitment$Type();\n"],
  "mappings": "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",
  "names": ["CheckpointCommitment_CheckpointCommitmentKind"]
}
