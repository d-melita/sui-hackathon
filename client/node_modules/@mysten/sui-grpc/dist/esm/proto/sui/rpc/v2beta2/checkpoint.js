import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ExecutedTransaction } from "./executed_transaction.js";
import { CheckpointContents } from "./checkpoint_contents.js";
import { ValidatorAggregatedSignature } from "./signature.js";
import { CheckpointSummary } from "./checkpoint_summary.js";
class Checkpoint$Type extends MessageType {
  constructor() {
    super("sui.rpc.v2beta2.Checkpoint", [
      {
        no: 1,
        name: "sequence_number",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      {
        no: 2,
        name: "digest",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 3, name: "summary", kind: "message", T: () => CheckpointSummary },
      { no: 4, name: "signature", kind: "message", T: () => ValidatorAggregatedSignature },
      { no: 5, name: "contents", kind: "message", T: () => CheckpointContents },
      {
        no: 6,
        name: "transactions",
        kind: "message",
        repeat: 2,
        T: () => ExecutedTransaction
      }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    message.transactions = [];
    if (value !== void 0) reflectionMergePartial(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 sequence_number */
        1:
          message.sequenceNumber = reader.uint64().toBigInt();
          break;
        case /* optional string digest */
        2:
          message.digest = reader.string();
          break;
        case /* optional sui.rpc.v2beta2.CheckpointSummary summary */
        3:
          message.summary = CheckpointSummary.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.summary
          );
          break;
        case /* optional sui.rpc.v2beta2.ValidatorAggregatedSignature signature */
        4:
          message.signature = ValidatorAggregatedSignature.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.signature
          );
          break;
        case /* optional sui.rpc.v2beta2.CheckpointContents contents */
        5:
          message.contents = CheckpointContents.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.contents
          );
          break;
        case /* repeated sui.rpc.v2beta2.ExecutedTransaction transactions */
        6:
          message.transactions.push(
            ExecutedTransaction.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.sequenceNumber !== void 0)
      writer.tag(1, WireType.Varint).uint64(message.sequenceNumber);
    if (message.digest !== void 0)
      writer.tag(2, WireType.LengthDelimited).string(message.digest);
    if (message.summary)
      CheckpointSummary.internalBinaryWrite(
        message.summary,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.signature)
      ValidatorAggregatedSignature.internalBinaryWrite(
        message.signature,
        writer.tag(4, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.contents)
      CheckpointContents.internalBinaryWrite(
        message.contents,
        writer.tag(5, WireType.LengthDelimited).fork(),
        options
      ).join();
    for (let i = 0; i < message.transactions.length; i++)
      ExecutedTransaction.internalBinaryWrite(
        message.transactions[i],
        writer.tag(6, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const Checkpoint = new Checkpoint$Type();
export {
  Checkpoint
};
//# sourceMappingURL=checkpoint.js.map
