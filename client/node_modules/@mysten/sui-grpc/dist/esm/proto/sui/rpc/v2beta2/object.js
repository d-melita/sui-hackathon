import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Value } from "../../../google/protobuf/struct.js";
import { Package } from "./move_package.js";
import { Owner } from "./owner.js";
import { Bcs } from "./bcs.js";
class Object$Type extends MessageType {
  constructor() {
    super("sui.rpc.v2beta2.Object", [
      { no: 1, name: "bcs", kind: "message", T: () => Bcs },
      {
        no: 2,
        name: "object_id",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "version",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      {
        no: 4,
        name: "digest",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 5, name: "owner", kind: "message", T: () => Owner },
      {
        no: 6,
        name: "object_type",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 7,
        name: "has_public_transfer",
        kind: "scalar",
        opt: true,
        T: 8
        /*ScalarType.BOOL*/
      },
      { no: 8, name: "contents", kind: "message", T: () => Bcs },
      { no: 9, name: "package", kind: "message", T: () => Package },
      {
        no: 10,
        name: "previous_transaction",
        kind: "scalar",
        opt: true,
        T: 9
      },
      {
        no: 11,
        name: "storage_rebate",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      { no: 100, name: "json", kind: "message", T: () => Value },
      {
        no: 101,
        name: "balance",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0) reflectionMergePartial(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional sui.rpc.v2beta2.Bcs bcs */
        1:
          message.bcs = Bcs.internalBinaryRead(reader, reader.uint32(), options, message.bcs);
          break;
        case /* optional string object_id */
        2:
          message.objectId = reader.string();
          break;
        case /* optional uint64 version */
        3:
          message.version = reader.uint64().toBigInt();
          break;
        case /* optional string digest */
        4:
          message.digest = reader.string();
          break;
        case /* optional sui.rpc.v2beta2.Owner owner */
        5:
          message.owner = Owner.internalBinaryRead(reader, reader.uint32(), options, message.owner);
          break;
        case /* optional string object_type */
        6:
          message.objectType = reader.string();
          break;
        case /* optional bool has_public_transfer */
        7:
          message.hasPublicTransfer = reader.bool();
          break;
        case /* optional sui.rpc.v2beta2.Bcs contents */
        8:
          message.contents = Bcs.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.contents
          );
          break;
        case /* optional sui.rpc.v2beta2.Package package */
        9:
          message.package = Package.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.package
          );
          break;
        case /* optional string previous_transaction */
        10:
          message.previousTransaction = reader.string();
          break;
        case /* optional uint64 storage_rebate */
        11:
          message.storageRebate = reader.uint64().toBigInt();
          break;
        case /* optional google.protobuf.Value json */
        100:
          message.json = Value.internalBinaryRead(reader, reader.uint32(), options, message.json);
          break;
        case /* optional uint64 balance */
        101:
          message.balance = reader.uint64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.bcs)
      Bcs.internalBinaryWrite(
        message.bcs,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.objectId !== void 0)
      writer.tag(2, WireType.LengthDelimited).string(message.objectId);
    if (message.version !== void 0) writer.tag(3, WireType.Varint).uint64(message.version);
    if (message.digest !== void 0)
      writer.tag(4, WireType.LengthDelimited).string(message.digest);
    if (message.owner)
      Owner.internalBinaryWrite(
        message.owner,
        writer.tag(5, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.objectType !== void 0)
      writer.tag(6, WireType.LengthDelimited).string(message.objectType);
    if (message.hasPublicTransfer !== void 0)
      writer.tag(7, WireType.Varint).bool(message.hasPublicTransfer);
    if (message.contents)
      Bcs.internalBinaryWrite(
        message.contents,
        writer.tag(8, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.package)
      Package.internalBinaryWrite(
        message.package,
        writer.tag(9, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.previousTransaction !== void 0)
      writer.tag(10, WireType.LengthDelimited).string(message.previousTransaction);
    if (message.storageRebate !== void 0)
      writer.tag(11, WireType.Varint).uint64(message.storageRebate);
    if (message.json)
      Value.internalBinaryWrite(
        message.json,
        writer.tag(100, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.balance !== void 0) writer.tag(101, WireType.Varint).uint64(message.balance);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const Object = new Object$Type();
export {
  Object
};
//# sourceMappingURL=object.js.map
