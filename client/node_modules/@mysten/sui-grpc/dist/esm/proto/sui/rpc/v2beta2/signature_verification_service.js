import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ActiveJwk } from "./transaction.js";
import { UserSignature } from "./signature.js";
import { Bcs } from "./bcs.js";
class VerifySignatureRequest$Type extends MessageType {
  constructor() {
    super("sui.rpc.v2beta2.VerifySignatureRequest", [
      { no: 1, name: "message", kind: "message", T: () => Bcs },
      { no: 2, name: "signature", kind: "message", T: () => UserSignature },
      {
        no: 3,
        name: "address",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 4,
        name: "jwks",
        kind: "message",
        repeat: 2,
        T: () => ActiveJwk
      }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    message.jwks = [];
    if (value !== void 0) reflectionMergePartial(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional sui.rpc.v2beta2.Bcs message */
        1:
          message.message = Bcs.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.message
          );
          break;
        case /* optional sui.rpc.v2beta2.UserSignature signature */
        2:
          message.signature = UserSignature.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.signature
          );
          break;
        case /* optional string address */
        3:
          message.address = reader.string();
          break;
        case /* repeated sui.rpc.v2beta2.ActiveJwk jwks */
        4:
          message.jwks.push(ActiveJwk.internalBinaryRead(reader, reader.uint32(), options));
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.message)
      Bcs.internalBinaryWrite(
        message.message,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.signature)
      UserSignature.internalBinaryWrite(
        message.signature,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    if (message.address !== void 0)
      writer.tag(3, WireType.LengthDelimited).string(message.address);
    for (let i = 0; i < message.jwks.length; i++)
      ActiveJwk.internalBinaryWrite(
        message.jwks[i],
        writer.tag(4, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const VerifySignatureRequest = new VerifySignatureRequest$Type();
class VerifySignatureResponse$Type extends MessageType {
  constructor() {
    super("sui.rpc.v2beta2.VerifySignatureResponse", [
      {
        no: 1,
        name: "is_valid",
        kind: "scalar",
        opt: true,
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 2,
        name: "reason",
        kind: "scalar",
        opt: true,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0) reflectionMergePartial(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bool is_valid */
        1:
          message.isValid = reader.bool();
          break;
        case /* optional string reason */
        2:
          message.reason = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.isValid !== void 0) writer.tag(1, WireType.Varint).bool(message.isValid);
    if (message.reason !== void 0)
      writer.tag(2, WireType.LengthDelimited).string(message.reason);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const VerifySignatureResponse = new VerifySignatureResponse$Type();
const SignatureVerificationService = new ServiceType(
  "sui.rpc.v2beta2.SignatureVerificationService",
  [{ name: "VerifySignature", options: {}, I: VerifySignatureRequest, O: VerifySignatureResponse }]
);
export {
  SignatureVerificationService,
  VerifySignatureRequest,
  VerifySignatureResponse
};
//# sourceMappingURL=signature_verification_service.js.map
