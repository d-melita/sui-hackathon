import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
class GasCostSummary$Type extends MessageType {
  constructor() {
    super("sui.rpc.v2beta2.GasCostSummary", [
      {
        no: 1,
        name: "computation_cost",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      {
        no: 2,
        name: "storage_cost",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      {
        no: 3,
        name: "storage_rebate",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      },
      {
        no: 4,
        name: "non_refundable_storage_fee",
        kind: "scalar",
        opt: true,
        T: 4,
        L: 0
      }
    ]);
  }
  create(value) {
    const message = globalThis.Object.create(this.messagePrototype);
    if (value !== void 0) reflectionMergePartial(this, message, value);
    return message;
  }
  internalBinaryRead(reader, length, options, target) {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 computation_cost */
        1:
          message.computationCost = reader.uint64().toBigInt();
          break;
        case /* optional uint64 storage_cost */
        2:
          message.storageCost = reader.uint64().toBigInt();
          break;
        case /* optional uint64 storage_rebate */
        3:
          message.storageRebate = reader.uint64().toBigInt();
          break;
        case /* optional uint64 non_refundable_storage_fee */
        4:
          message.nonRefundableStorageFee = reader.uint64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(message, writer, options) {
    if (message.computationCost !== void 0)
      writer.tag(1, WireType.Varint).uint64(message.computationCost);
    if (message.storageCost !== void 0)
      writer.tag(2, WireType.Varint).uint64(message.storageCost);
    if (message.storageRebate !== void 0)
      writer.tag(3, WireType.Varint).uint64(message.storageRebate);
    if (message.nonRefundableStorageFee !== void 0)
      writer.tag(4, WireType.Varint).uint64(message.nonRefundableStorageFee);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
const GasCostSummary = new GasCostSummary$Type();
export {
  GasCostSummary
};
//# sourceMappingURL=gas_cost_summary.js.map
