{
  "version": 3,
  "sources": ["../../../../../../src/proto/sui/rpc/v2beta2/transaction_execution_service.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { ServiceType } from '@protobuf-ts/runtime-rpc';\nimport type { BinaryWriteOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryWriter } from '@protobuf-ts/runtime';\nimport { WireType } from '@protobuf-ts/runtime';\nimport type { BinaryReadOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryReader } from '@protobuf-ts/runtime';\nimport { UnknownFieldHandler } from '@protobuf-ts/runtime';\nimport type { PartialMessage } from '@protobuf-ts/runtime';\nimport { reflectionMergePartial } from '@protobuf-ts/runtime';\nimport { MessageType } from '@protobuf-ts/runtime';\nimport { Empty } from '../../../google/protobuf/empty.js';\nimport { ValidatorAggregatedSignature } from './signature.js';\nimport { ExecutedTransaction } from './executed_transaction.js';\nimport { FieldMask } from '../../../google/protobuf/field_mask.js';\nimport { UserSignature } from './signature.js';\nimport { Transaction } from './transaction.js';\n/**\n * @generated from protobuf message sui.rpc.v2beta2.ExecuteTransactionRequest\n */\nexport interface ExecuteTransactionRequest {\n\t/**\n\t * The transaction to execute.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Transaction transaction = 1\n\t */\n\ttransaction?: Transaction;\n\t/**\n\t * Set of `UserSiganture`s authorizing the execution of the provided\n\t * transaction.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.UserSignature signatures = 2\n\t */\n\tsignatures: UserSignature[];\n\t/**\n\t * Mask specifying which fields to read.\n\t * If no mask is specified, defaults to `finality`.\n\t *\n\t * @generated from protobuf field: optional google.protobuf.FieldMask read_mask = 3\n\t */\n\treadMask?: FieldMask;\n}\n/**\n * Response message for `NodeService.ExecuteTransaction`.\n *\n * @generated from protobuf message sui.rpc.v2beta2.ExecuteTransactionResponse\n */\nexport interface ExecuteTransactionResponse {\n\t/**\n\t * Indicates the finality of the executed transaction.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.TransactionFinality finality = 1\n\t */\n\tfinality?: TransactionFinality;\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.ExecutedTransaction transaction = 2\n\t */\n\ttransaction?: ExecutedTransaction;\n}\n/**\n * Indicates the finality of the executed transaction.\n *\n * @generated from protobuf message sui.rpc.v2beta2.TransactionFinality\n */\nexport interface TransactionFinality {\n\t/**\n\t * @generated from protobuf oneof: finality\n\t */\n\tfinality:\n\t\t| {\n\t\t\t\toneofKind: 'certified';\n\t\t\t\t/**\n\t\t\t\t * A quorum certificate certifying that a transaction is final but might not\n\t\t\t\t * be included in a checkpoint yet.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2beta2.ValidatorAggregatedSignature certified = 1\n\t\t\t\t */\n\t\t\t\tcertified: ValidatorAggregatedSignature;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'checkpointed';\n\t\t\t\t/**\n\t\t\t\t * Sequence number of the checkpoint that includes the transaction.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: uint64 checkpointed = 2\n\t\t\t\t */\n\t\t\t\tcheckpointed: bigint;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'quorumExecuted';\n\t\t\t\t/**\n\t\t\t\t * Indicates that a quorum of validators has executed the transaction but\n\t\t\t\t * that it might not be included in a checkpoint yet.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: google.protobuf.Empty quorum_executed = 3\n\t\t\t\t */\n\t\t\t\tquorumExecuted: Empty;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: undefined;\n\t\t  };\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass ExecuteTransactionRequest$Type extends MessageType<ExecuteTransactionRequest> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ExecuteTransactionRequest', [\n\t\t\t{ no: 1, name: 'transaction', kind: 'message', T: () => Transaction },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'signatures',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => UserSignature,\n\t\t\t},\n\t\t\t{ no: 3, name: 'read_mask', kind: 'message', T: () => FieldMask },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ExecuteTransactionRequest>): ExecuteTransactionRequest {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.signatures = [];\n\t\tif (value !== undefined)\n\t\t\treflectionMergePartial<ExecuteTransactionRequest>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ExecuteTransactionRequest,\n\t): ExecuteTransactionRequest {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Transaction transaction */ 1:\n\t\t\t\t\tmessage.transaction = Transaction.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.transaction,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.UserSignature signatures */ 2:\n\t\t\t\t\tmessage.signatures.push(\n\t\t\t\t\t\tUserSignature.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional google.protobuf.FieldMask read_mask */ 3:\n\t\t\t\t\tmessage.readMask = FieldMask.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.readMask,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ExecuteTransactionRequest,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.Transaction transaction = 1; */\n\t\tif (message.transaction)\n\t\t\tTransaction.internalBinaryWrite(\n\t\t\t\tmessage.transaction,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* repeated sui.rpc.v2beta2.UserSignature signatures = 2; */\n\t\tfor (let i = 0; i < message.signatures.length; i++)\n\t\t\tUserSignature.internalBinaryWrite(\n\t\t\t\tmessage.signatures[i],\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional google.protobuf.FieldMask read_mask = 3; */\n\t\tif (message.readMask)\n\t\t\tFieldMask.internalBinaryWrite(\n\t\t\t\tmessage.readMask,\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ExecuteTransactionRequest\n */\nexport const ExecuteTransactionRequest = new ExecuteTransactionRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ExecuteTransactionResponse$Type extends MessageType<ExecuteTransactionResponse> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ExecuteTransactionResponse', [\n\t\t\t{ no: 1, name: 'finality', kind: 'message', T: () => TransactionFinality },\n\t\t\t{ no: 2, name: 'transaction', kind: 'message', T: () => ExecutedTransaction },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ExecuteTransactionResponse>): ExecuteTransactionResponse {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined)\n\t\t\treflectionMergePartial<ExecuteTransactionResponse>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ExecuteTransactionResponse,\n\t): ExecuteTransactionResponse {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.TransactionFinality finality */ 1:\n\t\t\t\t\tmessage.finality = TransactionFinality.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.finality,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.ExecutedTransaction transaction */ 2:\n\t\t\t\t\tmessage.transaction = ExecutedTransaction.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.transaction,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ExecuteTransactionResponse,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.TransactionFinality finality = 1; */\n\t\tif (message.finality)\n\t\t\tTransactionFinality.internalBinaryWrite(\n\t\t\t\tmessage.finality,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.ExecutedTransaction transaction = 2; */\n\t\tif (message.transaction)\n\t\t\tExecutedTransaction.internalBinaryWrite(\n\t\t\t\tmessage.transaction,\n\t\t\t\twriter.tag(2, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ExecuteTransactionResponse\n */\nexport const ExecuteTransactionResponse = new ExecuteTransactionResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TransactionFinality$Type extends MessageType<TransactionFinality> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.TransactionFinality', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'certified',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'finality',\n\t\t\t\tT: () => ValidatorAggregatedSignature,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'checkpointed',\n\t\t\t\tkind: 'scalar',\n\t\t\t\toneof: 'finality',\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 3, name: 'quorum_executed', kind: 'message', oneof: 'finality', T: () => Empty },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<TransactionFinality>): TransactionFinality {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.finality = { oneofKind: undefined };\n\t\tif (value !== undefined) reflectionMergePartial<TransactionFinality>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: TransactionFinality,\n\t): TransactionFinality {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* sui.rpc.v2beta2.ValidatorAggregatedSignature certified */ 1:\n\t\t\t\t\tmessage.finality = {\n\t\t\t\t\t\toneofKind: 'certified',\n\t\t\t\t\t\tcertified: ValidatorAggregatedSignature.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.finality as any).certified,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* uint64 checkpointed */ 2:\n\t\t\t\t\tmessage.finality = {\n\t\t\t\t\t\toneofKind: 'checkpointed',\n\t\t\t\t\t\tcheckpointed: reader.uint64().toBigInt(),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* google.protobuf.Empty quorum_executed */ 3:\n\t\t\t\t\tmessage.finality = {\n\t\t\t\t\t\toneofKind: 'quorumExecuted',\n\t\t\t\t\t\tquorumExecuted: Empty.internalBinaryRead(\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t(message.finality as any).quorumExecuted,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: TransactionFinality,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* sui.rpc.v2beta2.ValidatorAggregatedSignature certified = 1; */\n\t\tif (message.finality.oneofKind === 'certified')\n\t\t\tValidatorAggregatedSignature.internalBinaryWrite(\n\t\t\t\tmessage.finality.certified,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* uint64 checkpointed = 2; */\n\t\tif (message.finality.oneofKind === 'checkpointed')\n\t\t\twriter.tag(2, WireType.Varint).uint64(message.finality.checkpointed);\n\t\t/* google.protobuf.Empty quorum_executed = 3; */\n\t\tif (message.finality.oneofKind === 'quorumExecuted')\n\t\t\tEmpty.internalBinaryWrite(\n\t\t\t\tmessage.finality.quorumExecuted,\n\t\t\t\twriter.tag(3, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.TransactionFinality\n */\nexport const TransactionFinality = new TransactionFinality$Type();\n/**\n * @generated ServiceType for protobuf service sui.rpc.v2beta2.TransactionExecutionService\n */\nexport const TransactionExecutionService = new ServiceType(\n\t'sui.rpc.v2beta2.TransactionExecutionService',\n\t[\n\t\t{\n\t\t\tname: 'ExecuteTransaction',\n\t\t\toptions: {},\n\t\t\tI: ExecuteTransactionRequest,\n\t\t\tO: ExecuteTransactionResponse,\n\t\t},\n\t],\n);\n"],
  "mappings": "AAEA,SAAS,mBAAmB;AAG5B,SAAS,gBAAgB;AAGzB,SAAS,2BAA2B;AAEpC,SAAS,8BAA8B;AACvC,SAAS,mBAAmB;AAC5B,SAAS,aAAa;AACtB,SAAS,oCAAoC;AAC7C,SAAS,2BAA2B;AACpC,SAAS,iBAAiB;AAC1B,SAAS,qBAAqB;AAC9B,SAAS,mBAAmB;AAuF5B,MAAM,uCAAuC,YAAuC;AAAA,EACnF,cAAc;AACb,UAAM,6CAA6C;AAAA,MAClD,EAAE,IAAI,GAAG,MAAM,eAAe,MAAM,WAAW,GAAG,MAAM,YAAY;AAAA,MACpE;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,GAAG,MAAM;AAAA,MACV;AAAA,MACA,EAAE,IAAI,GAAG,MAAM,aAAa,MAAM,WAAW,GAAG,MAAM,UAAU;AAAA,IACjE,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAA8E;AACpF,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,aAAa,CAAC;AACtB,QAAI,UAAU;AACb,6BAAkD,MAAM,SAAS,KAAK;AACvE,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QAC4B;AAC5B,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAA4D;AAC3D,kBAAQ,cAAc,YAAY;AAAA,YACjC;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AAAA,QAA6D;AAC5D,kBAAQ,WAAW;AAAA,YAClB,cAAc,mBAAmB,QAAQ,OAAO,OAAO,GAAG,OAAO;AAAA,UAClE;AACA;AAAA,QACD;AAAA,QAAwD;AACvD,kBAAQ,WAAW,UAAU;AAAA,YAC5B;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oBAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ;AACX,kBAAY;AAAA,QACX,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,SAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,aAAS,IAAI,GAAG,IAAI,QAAQ,WAAW,QAAQ;AAC9C,oBAAc;AAAA,QACb,QAAQ,WAAW,CAAC;AAAA,QACpB,OAAO,IAAI,GAAG,SAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ;AACX,gBAAU;AAAA,QACT,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,SAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oBAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,4BAA4B,IAAI,+BAA+B;AAE5E,MAAM,wCAAwC,YAAwC;AAAA,EACrF,cAAc;AACb,UAAM,8CAA8C;AAAA,MACnD,EAAE,IAAI,GAAG,MAAM,YAAY,MAAM,WAAW,GAAG,MAAM,oBAAoB;AAAA,MACzE,EAAE,IAAI,GAAG,MAAM,eAAe,MAAM,WAAW,GAAG,MAAM,oBAAoB;AAAA,IAC7E,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAgF;AACtF,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,QAAI,UAAU;AACb,6BAAmD,MAAM,SAAS,KAAK;AACxE,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QAC6B;AAC7B,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAiE;AAChE,kBAAQ,WAAW,oBAAoB;AAAA,YACtC;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AAAA,QAAoE;AACnE,kBAAQ,cAAc,oBAAoB;AAAA,YACzC;AAAA,YACA,OAAO,OAAO;AAAA,YACd;AAAA,YACA,QAAQ;AAAA,UACT;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oBAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ;AACX,0BAAoB;AAAA,QACnB,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,SAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ;AACX,0BAAoB;AAAA,QACnB,QAAQ;AAAA,QACR,OAAO,IAAI,GAAG,SAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oBAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,6BAA6B,IAAI,gCAAgC;AAE9E,MAAM,iCAAiC,YAAiC;AAAA,EACvE,cAAc;AACb,UAAM,uCAAuC;AAAA,MAC5C;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,GAAG,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,MACA,EAAE,IAAI,GAAG,MAAM,mBAAmB,MAAM,WAAW,OAAO,YAAY,GAAG,MAAM,MAAM;AAAA,IACtF,CAAC;AAAA,EACF;AAAA,EACA,OAAO,OAAkE;AACxE,UAAM,UAAU,WAAW,OAAO,OAAO,KAAK,gBAAiB;AAC/D,YAAQ,WAAW,EAAE,WAAW,OAAU;AAC1C,QAAI,UAAU,OAAW,wBAA4C,MAAM,SAAS,KAAK;AACzF,WAAO;AAAA,EACR;AAAA,EACA,mBACC,QACA,QACA,SACA,QACsB;AACtB,QAAI,UAAU,UAAU,KAAK,OAAO,GACnC,MAAM,OAAO,MAAM;AACpB,WAAO,OAAO,MAAM,KAAK;AACxB,UAAI,CAAC,SAAS,QAAQ,IAAI,OAAO,IAAI;AACrC,cAAQ,SAAS;AAAA,QAChB;AAAA,QAAkE;AACjE,kBAAQ,WAAW;AAAA,YAClB,WAAW;AAAA,YACX,WAAW,6BAA6B;AAAA,cACvC;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,SAAiB;AAAA,YAC3B;AAAA,UACD;AACA;AAAA,QACD;AAAA,QAA+B;AAC9B,kBAAQ,WAAW;AAAA,YAClB,WAAW;AAAA,YACX,cAAc,OAAO,OAAO,EAAE,SAAS;AAAA,UACxC;AACA;AAAA,QACD;AAAA,QAAiD;AAChD,kBAAQ,WAAW;AAAA,YAClB,WAAW;AAAA,YACX,gBAAgB,MAAM;AAAA,cACrB;AAAA,cACA,OAAO,OAAO;AAAA,cACd;AAAA,cACC,QAAQ,SAAiB;AAAA,YAC3B;AAAA,UACD;AACA;AAAA,QACD;AACC,cAAI,IAAI,QAAQ;AAChB,cAAI,MAAM;AACT,kBAAM,IAAI,WAAW;AAAA,cACpB,iBAAiB,OAAO,eAAe,QAAQ,SAAS,KAAK,QAAQ;AAAA,YACtE;AACD,cAAI,IAAI,OAAO,KAAK,QAAQ;AAC5B,cAAI,MAAM;AACT,aAAC,MAAM,OAAO,oBAAoB,SAAS;AAAA,cAC1C,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,MACH;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,oBACC,SACA,QACA,SACgB;AAEhB,QAAI,QAAQ,SAAS,cAAc;AAClC,mCAA6B;AAAA,QAC5B,QAAQ,SAAS;AAAA,QACjB,OAAO,IAAI,GAAG,SAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AAER,QAAI,QAAQ,SAAS,cAAc;AAClC,aAAO,IAAI,GAAG,SAAS,MAAM,EAAE,OAAO,QAAQ,SAAS,YAAY;AAEpE,QAAI,QAAQ,SAAS,cAAc;AAClC,YAAM;AAAA,QACL,QAAQ,SAAS;AAAA,QACjB,OAAO,IAAI,GAAG,SAAS,eAAe,EAAE,KAAK;AAAA,QAC7C;AAAA,MACD,EAAE,KAAK;AACR,QAAI,IAAI,QAAQ;AAChB,QAAI,MAAM,MAAO,EAAC,KAAK,OAAO,oBAAoB,UAAU,GAAG,KAAK,UAAU,SAAS,MAAM;AAC7F,WAAO;AAAA,EACR;AACD;AAIO,MAAM,sBAAsB,IAAI,yBAAyB;AAIzD,MAAM,8BAA8B,IAAI;AAAA,EAC9C;AAAA,EACA;AAAA,IACC;AAAA,MACC,MAAM;AAAA,MACN,SAAS,CAAC;AAAA,MACV,GAAG;AAAA,MACH,GAAG;AAAA,IACJ;AAAA,EACD;AACD;",
  "names": []
}
