{
  "version": 3,
  "sources": ["../../../../../../src/proto/sui/rpc/v2beta2/object.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport type { BinaryWriteOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryWriter } from '@protobuf-ts/runtime';\nimport { WireType } from '@protobuf-ts/runtime';\nimport type { BinaryReadOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryReader } from '@protobuf-ts/runtime';\nimport { UnknownFieldHandler } from '@protobuf-ts/runtime';\nimport type { PartialMessage } from '@protobuf-ts/runtime';\nimport { reflectionMergePartial } from '@protobuf-ts/runtime';\nimport { MessageType } from '@protobuf-ts/runtime';\nimport { Value } from '../../../google/protobuf/struct.js';\nimport { Package } from './move_package.js';\nimport { Owner } from './owner.js';\nimport { Bcs } from './bcs.js';\n/**\n * An object on the Sui blockchain.\n *\n * @generated from protobuf message sui.rpc.v2beta2.Object\n */\nexport interface Object {\n\t/**\n\t * This Object serialized as BCS.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Bcs bcs = 1\n\t */\n\tbcs?: Bcs;\n\t/**\n\t * `ObjectId` for this object.\n\t *\n\t * @generated from protobuf field: optional string object_id = 2\n\t */\n\tobjectId?: string;\n\t/**\n\t * Version of the object.\n\t *\n\t * @generated from protobuf field: optional uint64 version = 3\n\t */\n\tversion?: bigint;\n\t/**\n\t * The digest of this Object.\n\t *\n\t * @generated from protobuf field: optional string digest = 4\n\t */\n\tdigest?: string;\n\t/**\n\t * Owner of the object.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Owner owner = 5\n\t */\n\towner?: Owner;\n\t/**\n\t * The type of this object.\n\t *\n\t * This will be 'package' for packages and a StructTag for move structs.\n\t *\n\t * @generated from protobuf field: optional string object_type = 6\n\t */\n\tobjectType?: string;\n\t/**\n\t * DEPRECATED this field is no longer used to determine whether a tx can transfer this\n\t * object. Instead, it is always calculated from the objects type when loaded in execution.\n\t *\n\t * Only set for Move structs\n\t *\n\t * @generated from protobuf field: optional bool has_public_transfer = 7\n\t */\n\thasPublicTransfer?: boolean;\n\t/**\n\t * BCS bytes of a Move struct value.\n\t *\n\t * Only set for Move structs\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Bcs contents = 8\n\t */\n\tcontents?: Bcs;\n\t/**\n\t * Package information for Move Packages\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Package package = 9\n\t */\n\tpackage?: Package;\n\t/**\n\t * The digest of the transaction that created or last mutated this object\n\t *\n\t * @generated from protobuf field: optional string previous_transaction = 10\n\t */\n\tpreviousTransaction?: string;\n\t/**\n\t * The amount of SUI to rebate if this object gets deleted.\n\t * This number is re-calculated each time the object is mutated based on\n\t * the present storage gas price.\n\t *\n\t * @generated from protobuf field: optional uint64 storage_rebate = 11\n\t */\n\tstorageRebate?: bigint;\n\t/**\n\t * JSON rendering of the object.\n\t *\n\t * @generated from protobuf field: optional google.protobuf.Value json = 100\n\t */\n\tjson?: Value;\n\t/**\n\t * Current balance if this object is a `0x2::coin::Coin<T>`\n\t *\n\t * @generated from protobuf field: optional uint64 balance = 101\n\t */\n\tbalance?: bigint;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Object$Type extends MessageType<Object> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.Object', [\n\t\t\t{ no: 1, name: 'bcs', kind: 'message', T: () => Bcs },\n\t\t\t{ no: 2, name: 'object_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'version',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 4, name: 'digest', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 5, name: 'owner', kind: 'message', T: () => Owner },\n\t\t\t{ no: 6, name: 'object_type', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 7, name: 'has_public_transfer', kind: 'scalar', opt: true, T: 8 /*ScalarType.BOOL*/ },\n\t\t\t{ no: 8, name: 'contents', kind: 'message', T: () => Bcs },\n\t\t\t{ no: 9, name: 'package', kind: 'message', T: () => Package },\n\t\t\t{\n\t\t\t\tno: 10,\n\t\t\t\tname: 'previous_transaction',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 9 /*ScalarType.STRING*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 11,\n\t\t\t\tname: 'storage_rebate',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 100, name: 'json', kind: 'message', T: () => Value },\n\t\t\t{\n\t\t\t\tno: 101,\n\t\t\t\tname: 'balance',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<Object>): Object {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<Object>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: Object,\n\t): Object {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Bcs bcs */ 1:\n\t\t\t\t\tmessage.bcs = Bcs.internalBinaryRead(reader, reader.uint32(), options, message.bcs);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string object_id */ 2:\n\t\t\t\t\tmessage.objectId = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 version */ 3:\n\t\t\t\t\tmessage.version = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string digest */ 4:\n\t\t\t\t\tmessage.digest = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Owner owner */ 5:\n\t\t\t\t\tmessage.owner = Owner.internalBinaryRead(reader, reader.uint32(), options, message.owner);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string object_type */ 6:\n\t\t\t\t\tmessage.objectType = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bool has_public_transfer */ 7:\n\t\t\t\t\tmessage.hasPublicTransfer = reader.bool();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Bcs contents */ 8:\n\t\t\t\t\tmessage.contents = Bcs.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.contents,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Package package */ 9:\n\t\t\t\t\tmessage.package = Package.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.package,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string previous_transaction */ 10:\n\t\t\t\t\tmessage.previousTransaction = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 storage_rebate */ 11:\n\t\t\t\t\tmessage.storageRebate = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional google.protobuf.Value json */ 100:\n\t\t\t\t\tmessage.json = Value.internalBinaryRead(reader, reader.uint32(), options, message.json);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 balance */ 101:\n\t\t\t\t\tmessage.balance = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: Object,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.Bcs bcs = 1; */\n\t\tif (message.bcs)\n\t\t\tBcs.internalBinaryWrite(\n\t\t\t\tmessage.bcs,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional string object_id = 2; */\n\t\tif (message.objectId !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.objectId);\n\t\t/* optional uint64 version = 3; */\n\t\tif (message.version !== undefined) writer.tag(3, WireType.Varint).uint64(message.version);\n\t\t/* optional string digest = 4; */\n\t\tif (message.digest !== undefined)\n\t\t\twriter.tag(4, WireType.LengthDelimited).string(message.digest);\n\t\t/* optional sui.rpc.v2beta2.Owner owner = 5; */\n\t\tif (message.owner)\n\t\t\tOwner.internalBinaryWrite(\n\t\t\t\tmessage.owner,\n\t\t\t\twriter.tag(5, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional string object_type = 6; */\n\t\tif (message.objectType !== undefined)\n\t\t\twriter.tag(6, WireType.LengthDelimited).string(message.objectType);\n\t\t/* optional bool has_public_transfer = 7; */\n\t\tif (message.hasPublicTransfer !== undefined)\n\t\t\twriter.tag(7, WireType.Varint).bool(message.hasPublicTransfer);\n\t\t/* optional sui.rpc.v2beta2.Bcs contents = 8; */\n\t\tif (message.contents)\n\t\t\tBcs.internalBinaryWrite(\n\t\t\t\tmessage.contents,\n\t\t\t\twriter.tag(8, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional sui.rpc.v2beta2.Package package = 9; */\n\t\tif (message.package)\n\t\t\tPackage.internalBinaryWrite(\n\t\t\t\tmessage.package,\n\t\t\t\twriter.tag(9, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional string previous_transaction = 10; */\n\t\tif (message.previousTransaction !== undefined)\n\t\t\twriter.tag(10, WireType.LengthDelimited).string(message.previousTransaction);\n\t\t/* optional uint64 storage_rebate = 11; */\n\t\tif (message.storageRebate !== undefined)\n\t\t\twriter.tag(11, WireType.Varint).uint64(message.storageRebate);\n\t\t/* optional google.protobuf.Value json = 100; */\n\t\tif (message.json)\n\t\t\tValue.internalBinaryWrite(\n\t\t\t\tmessage.json,\n\t\t\t\twriter.tag(100, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional uint64 balance = 101; */\n\t\tif (message.balance !== undefined) writer.tag(101, WireType.Varint).uint64(message.balance);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.Object\n */\nexport const Object = new Object$Type();\n"],
  "mappings": "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",
  "names": []
}
