{
  "version": 3,
  "sources": ["../../../../../../src/proto/sui/rpc/v2beta2/move_package_service.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { ServiceType } from '@protobuf-ts/runtime-rpc';\nimport type { BinaryWriteOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryWriter } from '@protobuf-ts/runtime';\nimport { WireType } from '@protobuf-ts/runtime';\nimport type { BinaryReadOptions } from '@protobuf-ts/runtime';\nimport type { IBinaryReader } from '@protobuf-ts/runtime';\nimport { UnknownFieldHandler } from '@protobuf-ts/runtime';\nimport type { PartialMessage } from '@protobuf-ts/runtime';\nimport { reflectionMergePartial } from '@protobuf-ts/runtime';\nimport { MessageType } from '@protobuf-ts/runtime';\nimport { FunctionDescriptor } from './move_package.js';\nimport { DatatypeDescriptor } from './move_package.js';\nimport { Package } from './move_package.js';\n/**\n * @generated from protobuf message sui.rpc.v2beta2.GetPackageRequest\n */\nexport interface GetPackageRequest {\n\t/**\n\t * Required. The `storage_id` of the requested package.\n\t *\n\t * @generated from protobuf field: optional string package_id = 1\n\t */\n\tpackageId?: string;\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.GetPackageResponse\n */\nexport interface GetPackageResponse {\n\t/**\n\t * The package.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.Package package = 1\n\t */\n\tpackage?: Package;\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.GetDatatypeRequest\n */\nexport interface GetDatatypeRequest {\n\t/**\n\t * Required. The `storage_id` of the requested package.\n\t *\n\t * @generated from protobuf field: optional string package_id = 1\n\t */\n\tpackageId?: string;\n\t/**\n\t * Required. The name of the requested module.\n\t *\n\t * @generated from protobuf field: optional string module_name = 2\n\t */\n\tmoduleName?: string;\n\t/**\n\t * Required. The name of the requested datatype.\n\t *\n\t * @generated from protobuf field: optional string name = 3\n\t */\n\tname?: string;\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.GetDatatypeResponse\n */\nexport interface GetDatatypeResponse {\n\t/**\n\t * The datatype.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.DatatypeDescriptor datatype = 1\n\t */\n\tdatatype?: DatatypeDescriptor;\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.GetFunctionRequest\n */\nexport interface GetFunctionRequest {\n\t/**\n\t * Required. The `storage_id` of the requested package.\n\t *\n\t * @generated from protobuf field: optional string package_id = 1\n\t */\n\tpackageId?: string;\n\t/**\n\t * Required. The name of the requested module.\n\t *\n\t * @generated from protobuf field: optional string module_name = 2\n\t */\n\tmoduleName?: string;\n\t/**\n\t * Required. The name of the requested function.\n\t *\n\t * @generated from protobuf field: optional string name = 3\n\t */\n\tname?: string;\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.GetFunctionResponse\n */\nexport interface GetFunctionResponse {\n\t/**\n\t * The function.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2beta2.FunctionDescriptor function = 1\n\t */\n\tfunction?: FunctionDescriptor;\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.ListPackageVersionsRequest\n */\nexport interface ListPackageVersionsRequest {\n\t/**\n\t * Required. The `storage_id` of any version of the package.\n\t *\n\t * @generated from protobuf field: optional string package_id = 1\n\t */\n\tpackageId?: string;\n\t/**\n\t * The maximum number of versions to return. The service may return fewer than this value.\n\t * If unspecified, at most `1000` entries will be returned.\n\t * The maximum value is `10000`; values above `10000` will be coerced to `10000`.\n\t *\n\t * @generated from protobuf field: optional uint32 page_size = 2\n\t */\n\tpageSize?: number;\n\t/**\n\t * A page token, received from a previous `ListPackageVersions` call.\n\t * Provide this to retrieve the subsequent page.\n\t *\n\t * When paginating, all other parameters provided to `ListPackageVersions` must\n\t * match the call that provided the page token.\n\t *\n\t * @generated from protobuf field: optional bytes page_token = 3\n\t */\n\tpageToken?: Uint8Array;\n}\n/**\n * @generated from protobuf message sui.rpc.v2beta2.ListPackageVersionsResponse\n */\nexport interface ListPackageVersionsResponse {\n\t/**\n\t * List of all package versions, ordered by version.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2beta2.PackageVersion versions = 1\n\t */\n\tversions: PackageVersion[];\n\t/**\n\t * A token, which can be sent as `page_token` to retrieve the next page.\n\t * If this field is omitted, there are no subsequent pages.\n\t *\n\t * @generated from protobuf field: optional bytes next_page_token = 2\n\t */\n\tnextPageToken?: Uint8Array;\n}\n/**\n * A simplified representation of a package version\n *\n * @generated from protobuf message sui.rpc.v2beta2.PackageVersion\n */\nexport interface PackageVersion {\n\t/**\n\t * The storage ID of this package version\n\t *\n\t * @generated from protobuf field: optional string package_id = 1\n\t */\n\tpackageId?: string;\n\t/**\n\t * The version number\n\t *\n\t * @generated from protobuf field: optional uint64 version = 2\n\t */\n\tversion?: bigint;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass GetPackageRequest$Type extends MessageType<GetPackageRequest> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.GetPackageRequest', [\n\t\t\t{ no: 1, name: 'package_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<GetPackageRequest>): GetPackageRequest {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<GetPackageRequest>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: GetPackageRequest,\n\t): GetPackageRequest {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string package_id */ 1:\n\t\t\t\t\tmessage.packageId = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: GetPackageRequest,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string package_id = 1; */\n\t\tif (message.packageId !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).string(message.packageId);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.GetPackageRequest\n */\nexport const GetPackageRequest = new GetPackageRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GetPackageResponse$Type extends MessageType<GetPackageResponse> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.GetPackageResponse', [\n\t\t\t{ no: 1, name: 'package', kind: 'message', T: () => Package },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<GetPackageResponse>): GetPackageResponse {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<GetPackageResponse>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: GetPackageResponse,\n\t): GetPackageResponse {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.Package package */ 1:\n\t\t\t\t\tmessage.package = Package.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.package,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: GetPackageResponse,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.Package package = 1; */\n\t\tif (message.package)\n\t\t\tPackage.internalBinaryWrite(\n\t\t\t\tmessage.package,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.GetPackageResponse\n */\nexport const GetPackageResponse = new GetPackageResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GetDatatypeRequest$Type extends MessageType<GetDatatypeRequest> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.GetDatatypeRequest', [\n\t\t\t{ no: 1, name: 'package_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'module_name', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 3, name: 'name', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<GetDatatypeRequest>): GetDatatypeRequest {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<GetDatatypeRequest>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: GetDatatypeRequest,\n\t): GetDatatypeRequest {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string package_id */ 1:\n\t\t\t\t\tmessage.packageId = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string module_name */ 2:\n\t\t\t\t\tmessage.moduleName = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string name */ 3:\n\t\t\t\t\tmessage.name = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: GetDatatypeRequest,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string package_id = 1; */\n\t\tif (message.packageId !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).string(message.packageId);\n\t\t/* optional string module_name = 2; */\n\t\tif (message.moduleName !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.moduleName);\n\t\t/* optional string name = 3; */\n\t\tif (message.name !== undefined) writer.tag(3, WireType.LengthDelimited).string(message.name);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.GetDatatypeRequest\n */\nexport const GetDatatypeRequest = new GetDatatypeRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GetDatatypeResponse$Type extends MessageType<GetDatatypeResponse> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.GetDatatypeResponse', [\n\t\t\t{ no: 1, name: 'datatype', kind: 'message', T: () => DatatypeDescriptor },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<GetDatatypeResponse>): GetDatatypeResponse {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<GetDatatypeResponse>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: GetDatatypeResponse,\n\t): GetDatatypeResponse {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.DatatypeDescriptor datatype */ 1:\n\t\t\t\t\tmessage.datatype = DatatypeDescriptor.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.datatype,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: GetDatatypeResponse,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.DatatypeDescriptor datatype = 1; */\n\t\tif (message.datatype)\n\t\t\tDatatypeDescriptor.internalBinaryWrite(\n\t\t\t\tmessage.datatype,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.GetDatatypeResponse\n */\nexport const GetDatatypeResponse = new GetDatatypeResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GetFunctionRequest$Type extends MessageType<GetFunctionRequest> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.GetFunctionRequest', [\n\t\t\t{ no: 1, name: 'package_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'module_name', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 3, name: 'name', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<GetFunctionRequest>): GetFunctionRequest {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<GetFunctionRequest>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: GetFunctionRequest,\n\t): GetFunctionRequest {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string package_id */ 1:\n\t\t\t\t\tmessage.packageId = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string module_name */ 2:\n\t\t\t\t\tmessage.moduleName = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional string name */ 3:\n\t\t\t\t\tmessage.name = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: GetFunctionRequest,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string package_id = 1; */\n\t\tif (message.packageId !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).string(message.packageId);\n\t\t/* optional string module_name = 2; */\n\t\tif (message.moduleName !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).string(message.moduleName);\n\t\t/* optional string name = 3; */\n\t\tif (message.name !== undefined) writer.tag(3, WireType.LengthDelimited).string(message.name);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.GetFunctionRequest\n */\nexport const GetFunctionRequest = new GetFunctionRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GetFunctionResponse$Type extends MessageType<GetFunctionResponse> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.GetFunctionResponse', [\n\t\t\t{ no: 1, name: 'function', kind: 'message', T: () => FunctionDescriptor },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<GetFunctionResponse>): GetFunctionResponse {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<GetFunctionResponse>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: GetFunctionResponse,\n\t): GetFunctionResponse {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional sui.rpc.v2beta2.FunctionDescriptor function */ 1:\n\t\t\t\t\tmessage.function = FunctionDescriptor.internalBinaryRead(\n\t\t\t\t\t\treader,\n\t\t\t\t\t\treader.uint32(),\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tmessage.function,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: GetFunctionResponse,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional sui.rpc.v2beta2.FunctionDescriptor function = 1; */\n\t\tif (message.function)\n\t\t\tFunctionDescriptor.internalBinaryWrite(\n\t\t\t\tmessage.function,\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.GetFunctionResponse\n */\nexport const GetFunctionResponse = new GetFunctionResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ListPackageVersionsRequest$Type extends MessageType<ListPackageVersionsRequest> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ListPackageVersionsRequest', [\n\t\t\t{ no: 1, name: 'package_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'page_size', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t\t{ no: 3, name: 'page_token', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ListPackageVersionsRequest>): ListPackageVersionsRequest {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined)\n\t\t\treflectionMergePartial<ListPackageVersionsRequest>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ListPackageVersionsRequest,\n\t): ListPackageVersionsRequest {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string package_id */ 1:\n\t\t\t\t\tmessage.packageId = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint32 page_size */ 2:\n\t\t\t\t\tmessage.pageSize = reader.uint32();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes page_token */ 3:\n\t\t\t\t\tmessage.pageToken = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ListPackageVersionsRequest,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string package_id = 1; */\n\t\tif (message.packageId !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).string(message.packageId);\n\t\t/* optional uint32 page_size = 2; */\n\t\tif (message.pageSize !== undefined) writer.tag(2, WireType.Varint).uint32(message.pageSize);\n\t\t/* optional bytes page_token = 3; */\n\t\tif (message.pageToken !== undefined)\n\t\t\twriter.tag(3, WireType.LengthDelimited).bytes(message.pageToken);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ListPackageVersionsRequest\n */\nexport const ListPackageVersionsRequest = new ListPackageVersionsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ListPackageVersionsResponse$Type extends MessageType<ListPackageVersionsResponse> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.ListPackageVersionsResponse', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'versions',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 2 /*RepeatType.UNPACKED*/,\n\t\t\t\tT: () => PackageVersion,\n\t\t\t},\n\t\t\t{ no: 2, name: 'next_page_token', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<ListPackageVersionsResponse>): ListPackageVersionsResponse {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tmessage.versions = [];\n\t\tif (value !== undefined)\n\t\t\treflectionMergePartial<ListPackageVersionsResponse>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: ListPackageVersionsResponse,\n\t): ListPackageVersionsResponse {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* repeated sui.rpc.v2beta2.PackageVersion versions */ 1:\n\t\t\t\t\tmessage.versions.push(\n\t\t\t\t\t\tPackageVersion.internalBinaryRead(reader, reader.uint32(), options),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional bytes next_page_token */ 2:\n\t\t\t\t\tmessage.nextPageToken = reader.bytes();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: ListPackageVersionsResponse,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* repeated sui.rpc.v2beta2.PackageVersion versions = 1; */\n\t\tfor (let i = 0; i < message.versions.length; i++)\n\t\t\tPackageVersion.internalBinaryWrite(\n\t\t\t\tmessage.versions[i],\n\t\t\t\twriter.tag(1, WireType.LengthDelimited).fork(),\n\t\t\t\toptions,\n\t\t\t).join();\n\t\t/* optional bytes next_page_token = 2; */\n\t\tif (message.nextPageToken !== undefined)\n\t\t\twriter.tag(2, WireType.LengthDelimited).bytes(message.nextPageToken);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.ListPackageVersionsResponse\n */\nexport const ListPackageVersionsResponse = new ListPackageVersionsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PackageVersion$Type extends MessageType<PackageVersion> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2beta2.PackageVersion', [\n\t\t\t{ no: 1, name: 'package_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'version',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t]);\n\t}\n\tcreate(value?: PartialMessage<PackageVersion>): PackageVersion {\n\t\tconst message = globalThis.Object.create(this.messagePrototype!);\n\t\tif (value !== undefined) reflectionMergePartial<PackageVersion>(this, message, value);\n\t\treturn message;\n\t}\n\tinternalBinaryRead(\n\t\treader: IBinaryReader,\n\t\tlength: number,\n\t\toptions: BinaryReadOptions,\n\t\ttarget?: PackageVersion,\n\t): PackageVersion {\n\t\tlet message = target ?? this.create(),\n\t\t\tend = reader.pos + length;\n\t\twhile (reader.pos < end) {\n\t\t\tlet [fieldNo, wireType] = reader.tag();\n\t\t\tswitch (fieldNo) {\n\t\t\t\tcase /* optional string package_id */ 1:\n\t\t\t\t\tmessage.packageId = reader.string();\n\t\t\t\t\tbreak;\n\t\t\t\tcase /* optional uint64 version */ 2:\n\t\t\t\t\tmessage.version = reader.uint64().toBigInt();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet u = options.readUnknownField;\n\t\t\t\t\tif (u === 'throw')\n\t\t\t\t\t\tthrow new globalThis.Error(\n\t\t\t\t\t\t\t`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n\t\t\t\t\t\t);\n\t\t\t\t\tlet d = reader.skip(wireType);\n\t\t\t\t\tif (u !== false)\n\t\t\t\t\t\t(u === true ? UnknownFieldHandler.onRead : u)(\n\t\t\t\t\t\t\tthis.typeName,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tfieldNo,\n\t\t\t\t\t\t\twireType,\n\t\t\t\t\t\t\td,\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t}\n\tinternalBinaryWrite(\n\t\tmessage: PackageVersion,\n\t\twriter: IBinaryWriter,\n\t\toptions: BinaryWriteOptions,\n\t): IBinaryWriter {\n\t\t/* optional string package_id = 1; */\n\t\tif (message.packageId !== undefined)\n\t\t\twriter.tag(1, WireType.LengthDelimited).string(message.packageId);\n\t\t/* optional uint64 version = 2; */\n\t\tif (message.version !== undefined) writer.tag(2, WireType.Varint).uint64(message.version);\n\t\tlet u = options.writeUnknownFields;\n\t\tif (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n\t\treturn writer;\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2beta2.PackageVersion\n */\nexport const PackageVersion = new PackageVersion$Type();\n/**\n * @generated ServiceType for protobuf service sui.rpc.v2beta2.MovePackageService\n */\nexport const MovePackageService = new ServiceType('sui.rpc.v2beta2.MovePackageService', [\n\t{ name: 'GetPackage', options: {}, I: GetPackageRequest, O: GetPackageResponse },\n\t{ name: 'GetDatatype', options: {}, I: GetDatatypeRequest, O: GetDatatypeResponse },\n\t{ name: 'GetFunction', options: {}, I: GetFunctionRequest, O: GetFunctionResponse },\n\t{\n\t\tname: 'ListPackageVersions',\n\t\toptions: {},\n\t\tI: ListPackageVersionsRequest,\n\t\tO: ListPackageVersionsResponse,\n\t},\n]);\n"],
  "mappings": "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",
  "names": []
}
